// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

package com.valve.gamenetworkingsockets.proto.messages;

public final class UDP {
  private UDP() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code ESteamNetworkingUDPMsgID}
   */
  public enum ESteamNetworkingUDPMsgID
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeRequest = 32;</code>
     */
    k_ESteamNetworkingUDPMsg_ChallengeRequest(32),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeReply = 33;</code>
     */
    k_ESteamNetworkingUDPMsg_ChallengeReply(33),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectRequest = 34;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectRequest(34),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectOK = 35;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectOK(35),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectionClosed = 36;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectionClosed(36),
    /**
     * <code>k_ESteamNetworkingUDPMsg_NoConnection = 37;</code>
     */
    k_ESteamNetworkingUDPMsg_NoConnection(37),
    ;

    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeRequest = 32;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ChallengeRequest_VALUE = 32;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeReply = 33;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ChallengeReply_VALUE = 33;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectRequest = 34;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectRequest_VALUE = 34;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectOK = 35;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectOK_VALUE = 35;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectionClosed = 36;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectionClosed_VALUE = 36;
    /**
     * <code>k_ESteamNetworkingUDPMsg_NoConnection = 37;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_NoConnection_VALUE = 37;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ESteamNetworkingUDPMsgID valueOf(int value) {
      return forNumber(value);
    }

    public static ESteamNetworkingUDPMsgID forNumber(int value) {
      switch (value) {
        case 32: return k_ESteamNetworkingUDPMsg_ChallengeRequest;
        case 33: return k_ESteamNetworkingUDPMsg_ChallengeReply;
        case 34: return k_ESteamNetworkingUDPMsg_ConnectRequest;
        case 35: return k_ESteamNetworkingUDPMsg_ConnectOK;
        case 36: return k_ESteamNetworkingUDPMsg_ConnectionClosed;
        case 37: return k_ESteamNetworkingUDPMsg_NoConnection;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ESteamNetworkingUDPMsgID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ESteamNetworkingUDPMsgID> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ESteamNetworkingUDPMsgID>() {
            public ESteamNetworkingUDPMsgID findValueByNumber(int number) {
              return ESteamNetworkingUDPMsgID.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.getDescriptor().getEnumTypes().get(0);
    }

    private static final ESteamNetworkingUDPMsgID[] VALUES = values();

    public static ESteamNetworkingUDPMsgID valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ESteamNetworkingUDPMsgID(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ESteamNetworkingUDPMsgID)
  }

  public interface CMsgSteamSockets_UDP_ChallengeRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_ChallengeRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    boolean hasConnectionId();
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    int getConnectionId();

    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     */
    boolean hasMyTimestamp();
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     */
    long getMyTimestamp();

    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_ChallengeRequest}
   */
  public  static final class CMsgSteamSockets_UDP_ChallengeRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_ChallengeRequest)
      CMsgSteamSockets_UDP_ChallengeRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_ChallengeRequest.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ChallengeRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ChallengeRequest() {
      connectionId_ = 0;
      myTimestamp_ = 0L;
      protocolVersion_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_ChallengeRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              connectionId_ = input.readFixed32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000002;
              myTimestamp_ = input.readFixed64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              protocolVersion_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.Builder.class);
    }

    private int bitField0_;
    public static final int CONNECTION_ID_FIELD_NUMBER = 1;
    private int connectionId_;
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    public boolean hasConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    public int getConnectionId() {
      return connectionId_;
    }

    public static final int MY_TIMESTAMP_FIELD_NUMBER = 3;
    private long myTimestamp_;
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     */
    public boolean hasMyTimestamp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     */
    public long getMyTimestamp() {
      return myTimestamp_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 4;
    private int protocolVersion_;
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed64(3, myTimestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, protocolVersion_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, myTimestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, protocolVersion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest) obj;

      boolean result = true;
      result = result && (hasConnectionId() == other.hasConnectionId());
      if (hasConnectionId()) {
        result = result && (getConnectionId()
            == other.getConnectionId());
      }
      result = result && (hasMyTimestamp() == other.hasMyTimestamp());
      if (hasMyTimestamp()) {
        result = result && (getMyTimestamp()
            == other.getMyTimestamp());
      }
      result = result && (hasProtocolVersion() == other.hasProtocolVersion());
      if (hasProtocolVersion()) {
        result = result && (getProtocolVersion()
            == other.getProtocolVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConnectionId()) {
        hash = (37 * hash) + CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getConnectionId();
      }
      if (hasMyTimestamp()) {
        hash = (37 * hash) + MY_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMyTimestamp());
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_ChallengeRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_ChallengeRequest)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        connectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        myTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        protocolVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.connectionId_ = connectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.myTimestamp_ = myTimestamp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.protocolVersion_ = protocolVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest.getDefaultInstance()) return this;
        if (other.hasConnectionId()) {
          setConnectionId(other.getConnectionId());
        }
        if (other.hasMyTimestamp()) {
          setMyTimestamp(other.getMyTimestamp());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int connectionId_ ;
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public int getConnectionId() {
        return connectionId_;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public Builder setConnectionId(int value) {
        bitField0_ |= 0x00000001;
        connectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public Builder clearConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        connectionId_ = 0;
        onChanged();
        return this;
      }

      private long myTimestamp_ ;
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       */
      public boolean hasMyTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       */
      public long getMyTimestamp() {
        return myTimestamp_;
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       */
      public Builder setMyTimestamp(long value) {
        bitField0_ |= 0x00000002;
        myTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       */
      public Builder clearMyTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        myTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public Builder setProtocolVersion(int value) {
        bitField0_ |= 0x00000004;
        protocolVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_ChallengeRequest)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeRequest)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ChallengeRequest>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ChallengeRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_ChallengeRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ChallengeReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_ChallengeReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    boolean hasConnectionId();
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    int getConnectionId();

    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    boolean hasChallenge();
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    long getChallenge();

    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    boolean hasYourTimestamp();
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    long getYourTimestamp();

    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_ChallengeReply}
   */
  public  static final class CMsgSteamSockets_UDP_ChallengeReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_ChallengeReply)
      CMsgSteamSockets_UDP_ChallengeReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_ChallengeReply.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ChallengeReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ChallengeReply() {
      connectionId_ = 0;
      challenge_ = 0L;
      yourTimestamp_ = 0L;
      protocolVersion_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_ChallengeReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              connectionId_ = input.readFixed32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              challenge_ = input.readFixed64();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              yourTimestamp_ = input.readFixed64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              protocolVersion_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.Builder.class);
    }

    private int bitField0_;
    public static final int CONNECTION_ID_FIELD_NUMBER = 1;
    private int connectionId_;
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    public boolean hasConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     */
    public int getConnectionId() {
      return connectionId_;
    }

    public static final int CHALLENGE_FIELD_NUMBER = 2;
    private long challenge_;
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    public boolean hasChallenge() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    public long getChallenge() {
      return challenge_;
    }

    public static final int YOUR_TIMESTAMP_FIELD_NUMBER = 3;
    private long yourTimestamp_;
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    public boolean hasYourTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    public long getYourTimestamp() {
      return yourTimestamp_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 4;
    private int protocolVersion_;
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     */
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed64(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed64(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, protocolVersion_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, protocolVersion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply) obj;

      boolean result = true;
      result = result && (hasConnectionId() == other.hasConnectionId());
      if (hasConnectionId()) {
        result = result && (getConnectionId()
            == other.getConnectionId());
      }
      result = result && (hasChallenge() == other.hasChallenge());
      if (hasChallenge()) {
        result = result && (getChallenge()
            == other.getChallenge());
      }
      result = result && (hasYourTimestamp() == other.hasYourTimestamp());
      if (hasYourTimestamp()) {
        result = result && (getYourTimestamp()
            == other.getYourTimestamp());
      }
      result = result && (hasProtocolVersion() == other.hasProtocolVersion());
      if (hasProtocolVersion()) {
        result = result && (getProtocolVersion()
            == other.getProtocolVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConnectionId()) {
        hash = (37 * hash) + CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getConnectionId();
      }
      if (hasChallenge()) {
        hash = (37 * hash) + CHALLENGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChallenge());
      }
      if (hasYourTimestamp()) {
        hash = (37 * hash) + YOUR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getYourTimestamp());
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_ChallengeReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_ChallengeReply)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        connectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        challenge_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        yourTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        protocolVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.connectionId_ = connectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.challenge_ = challenge_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.yourTimestamp_ = yourTimestamp_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.protocolVersion_ = protocolVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply.getDefaultInstance()) return this;
        if (other.hasConnectionId()) {
          setConnectionId(other.getConnectionId());
        }
        if (other.hasChallenge()) {
          setChallenge(other.getChallenge());
        }
        if (other.hasYourTimestamp()) {
          setYourTimestamp(other.getYourTimestamp());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int connectionId_ ;
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public int getConnectionId() {
        return connectionId_;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public Builder setConnectionId(int value) {
        bitField0_ |= 0x00000001;
        connectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       */
      public Builder clearConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        connectionId_ = 0;
        onChanged();
        return this;
      }

      private long challenge_ ;
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public boolean hasChallenge() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public long getChallenge() {
        return challenge_;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public Builder setChallenge(long value) {
        bitField0_ |= 0x00000002;
        challenge_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public Builder clearChallenge() {
        bitField0_ = (bitField0_ & ~0x00000002);
        challenge_ = 0L;
        onChanged();
        return this;
      }

      private long yourTimestamp_ ;
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public boolean hasYourTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public long getYourTimestamp() {
        return yourTimestamp_;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public Builder setYourTimestamp(long value) {
        bitField0_ |= 0x00000004;
        yourTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public Builder clearYourTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yourTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public Builder setProtocolVersion(int value) {
        bitField0_ |= 0x00000008;
        protocolVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_ChallengeReply)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeReply)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ChallengeReply>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ChallengeReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_ChallengeReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_ConnectRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    boolean hasClientConnectionId();
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    int getClientConnectionId();

    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    boolean hasChallenge();
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    long getChallenge();

    /**
     * <code>optional fixed64 client_steam_id = 3;</code>
     */
    boolean hasClientSteamId();
    /**
     * <code>optional fixed64 client_steam_id = 3;</code>
     */
    long getClientSteamId();

    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     */
    boolean hasMyTimestamp();
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     */
    long getMyTimestamp();

    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     */
    boolean hasPingEstMs();
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     */
    int getPingEstMs();

    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    boolean hasCrypt();
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt();
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder();

    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    boolean hasCert();
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert();
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder();

    /**
     * <code>optional uint32 protocol_version = 8;</code>
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 8;</code>
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_ConnectRequest}
   */
  public  static final class CMsgSteamSockets_UDP_ConnectRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_ConnectRequest)
      CMsgSteamSockets_UDP_ConnectRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_ConnectRequest.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectRequest() {
      clientConnectionId_ = 0;
      challenge_ = 0L;
      clientSteamId_ = 0L;
      myTimestamp_ = 0L;
      pingEstMs_ = 0;
      protocolVersion_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_ConnectRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              clientConnectionId_ = input.readFixed32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              challenge_ = input.readFixed64();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              clientSteamId_ = input.readFixed64();
              break;
            }
            case 34: {
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = cert_.toBuilder();
              }
              cert_ = input.readMessage(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cert_);
                cert_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 41: {
              bitField0_ |= 0x00000008;
              myTimestamp_ = input.readFixed64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              pingEstMs_ = input.readUInt32();
              break;
            }
            case 58: {
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = crypt_.toBuilder();
              }
              crypt_ = input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(crypt_);
                crypt_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              protocolVersion_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.Builder.class);
    }

    private int bitField0_;
    public static final int CLIENT_CONNECTION_ID_FIELD_NUMBER = 1;
    private int clientConnectionId_;
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    public boolean hasClientConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    public int getClientConnectionId() {
      return clientConnectionId_;
    }

    public static final int CHALLENGE_FIELD_NUMBER = 2;
    private long challenge_;
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    public boolean hasChallenge() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed64 challenge = 2;</code>
     */
    public long getChallenge() {
      return challenge_;
    }

    public static final int CLIENT_STEAM_ID_FIELD_NUMBER = 3;
    private long clientSteamId_;
    /**
     * <code>optional fixed64 client_steam_id = 3;</code>
     */
    public boolean hasClientSteamId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed64 client_steam_id = 3;</code>
     */
    public long getClientSteamId() {
      return clientSteamId_;
    }

    public static final int MY_TIMESTAMP_FIELD_NUMBER = 5;
    private long myTimestamp_;
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     */
    public boolean hasMyTimestamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     */
    public long getMyTimestamp() {
      return myTimestamp_;
    }

    public static final int PING_EST_MS_FIELD_NUMBER = 6;
    private int pingEstMs_;
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     */
    public boolean hasPingEstMs() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     */
    public int getPingEstMs() {
      return pingEstMs_;
    }

    public static final int CRYPT_FIELD_NUMBER = 7;
    private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public boolean hasCrypt() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
      return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
      return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }

    public static final int CERT_FIELD_NUMBER = 4;
    private com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned cert_;
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    public boolean hasCert() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert() {
      return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
      return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 8;
    private int protocolVersion_;
    /**
     * <code>optional uint32 protocol_version = 8;</code>
     */
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 protocol_version = 8;</code>
     */
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed64(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed64(3, clientSteamId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(4, getCert());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed64(5, myTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(6, pingEstMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, getCrypt());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, protocolVersion_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, clientSteamId_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCert());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, myTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, pingEstMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getCrypt());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, protocolVersion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest) obj;

      boolean result = true;
      result = result && (hasClientConnectionId() == other.hasClientConnectionId());
      if (hasClientConnectionId()) {
        result = result && (getClientConnectionId()
            == other.getClientConnectionId());
      }
      result = result && (hasChallenge() == other.hasChallenge());
      if (hasChallenge()) {
        result = result && (getChallenge()
            == other.getChallenge());
      }
      result = result && (hasClientSteamId() == other.hasClientSteamId());
      if (hasClientSteamId()) {
        result = result && (getClientSteamId()
            == other.getClientSteamId());
      }
      result = result && (hasMyTimestamp() == other.hasMyTimestamp());
      if (hasMyTimestamp()) {
        result = result && (getMyTimestamp()
            == other.getMyTimestamp());
      }
      result = result && (hasPingEstMs() == other.hasPingEstMs());
      if (hasPingEstMs()) {
        result = result && (getPingEstMs()
            == other.getPingEstMs());
      }
      result = result && (hasCrypt() == other.hasCrypt());
      if (hasCrypt()) {
        result = result && getCrypt()
            .equals(other.getCrypt());
      }
      result = result && (hasCert() == other.hasCert());
      if (hasCert()) {
        result = result && getCert()
            .equals(other.getCert());
      }
      result = result && (hasProtocolVersion() == other.hasProtocolVersion());
      if (hasProtocolVersion()) {
        result = result && (getProtocolVersion()
            == other.getProtocolVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClientConnectionId()) {
        hash = (37 * hash) + CLIENT_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getClientConnectionId();
      }
      if (hasChallenge()) {
        hash = (37 * hash) + CHALLENGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChallenge());
      }
      if (hasClientSteamId()) {
        hash = (37 * hash) + CLIENT_STEAM_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getClientSteamId());
      }
      if (hasMyTimestamp()) {
        hash = (37 * hash) + MY_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMyTimestamp());
      }
      if (hasPingEstMs()) {
        hash = (37 * hash) + PING_EST_MS_FIELD_NUMBER;
        hash = (53 * hash) + getPingEstMs();
      }
      if (hasCrypt()) {
        hash = (37 * hash) + CRYPT_FIELD_NUMBER;
        hash = (53 * hash) + getCrypt().hashCode();
      }
      if (hasCert()) {
        hash = (37 * hash) + CERT_FIELD_NUMBER;
        hash = (53 * hash) + getCert().hashCode();
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_ConnectRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_ConnectRequest)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCryptFieldBuilder();
          getCertFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        clientConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        challenge_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        clientSteamId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        myTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        pingEstMs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (cryptBuilder_ == null) {
          crypt_ = null;
        } else {
          cryptBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (certBuilder_ == null) {
          cert_ = null;
        } else {
          certBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        protocolVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clientConnectionId_ = clientConnectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.challenge_ = challenge_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.clientSteamId_ = clientSteamId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.myTimestamp_ = myTimestamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pingEstMs_ = pingEstMs_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (cryptBuilder_ == null) {
          result.crypt_ = crypt_;
        } else {
          result.crypt_ = cryptBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (certBuilder_ == null) {
          result.cert_ = cert_;
        } else {
          result.cert_ = certBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.protocolVersion_ = protocolVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest.getDefaultInstance()) return this;
        if (other.hasClientConnectionId()) {
          setClientConnectionId(other.getClientConnectionId());
        }
        if (other.hasChallenge()) {
          setChallenge(other.getChallenge());
        }
        if (other.hasClientSteamId()) {
          setClientSteamId(other.getClientSteamId());
        }
        if (other.hasMyTimestamp()) {
          setMyTimestamp(other.getMyTimestamp());
        }
        if (other.hasPingEstMs()) {
          setPingEstMs(other.getPingEstMs());
        }
        if (other.hasCrypt()) {
          mergeCrypt(other.getCrypt());
        }
        if (other.hasCert()) {
          mergeCert(other.getCert());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int clientConnectionId_ ;
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public boolean hasClientConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public int getClientConnectionId() {
        return clientConnectionId_;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public Builder setClientConnectionId(int value) {
        bitField0_ |= 0x00000001;
        clientConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public Builder clearClientConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientConnectionId_ = 0;
        onChanged();
        return this;
      }

      private long challenge_ ;
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public boolean hasChallenge() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public long getChallenge() {
        return challenge_;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public Builder setChallenge(long value) {
        bitField0_ |= 0x00000002;
        challenge_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       */
      public Builder clearChallenge() {
        bitField0_ = (bitField0_ & ~0x00000002);
        challenge_ = 0L;
        onChanged();
        return this;
      }

      private long clientSteamId_ ;
      /**
       * <code>optional fixed64 client_steam_id = 3;</code>
       */
      public boolean hasClientSteamId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed64 client_steam_id = 3;</code>
       */
      public long getClientSteamId() {
        return clientSteamId_;
      }
      /**
       * <code>optional fixed64 client_steam_id = 3;</code>
       */
      public Builder setClientSteamId(long value) {
        bitField0_ |= 0x00000004;
        clientSteamId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 client_steam_id = 3;</code>
       */
      public Builder clearClientSteamId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        clientSteamId_ = 0L;
        onChanged();
        return this;
      }

      private long myTimestamp_ ;
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       */
      public boolean hasMyTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       */
      public long getMyTimestamp() {
        return myTimestamp_;
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       */
      public Builder setMyTimestamp(long value) {
        bitField0_ |= 0x00000008;
        myTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       */
      public Builder clearMyTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        myTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int pingEstMs_ ;
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       */
      public boolean hasPingEstMs() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       */
      public int getPingEstMs() {
        return pingEstMs_;
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       */
      public Builder setPingEstMs(int value) {
        bitField0_ |= 0x00000010;
        pingEstMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       */
      public Builder clearPingEstMs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pingEstMs_ = 0;
        onChanged();
        return this;
      }

      private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned crypt_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> cryptBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public boolean hasCrypt() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
        if (cryptBuilder_ == null) {
          return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        } else {
          return cryptBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          crypt_ = value;
          onChanged();
        } else {
          cryptBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder builderForValue) {
        if (cryptBuilder_ == null) {
          crypt_ = builderForValue.build();
          onChanged();
        } else {
          cryptBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder mergeCrypt(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              crypt_ != null &&
              crypt_ != com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance()) {
            crypt_ =
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.newBuilder(crypt_).mergeFrom(value).buildPartial();
          } else {
            crypt_ = value;
          }
          onChanged();
        } else {
          cryptBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder clearCrypt() {
        if (cryptBuilder_ == null) {
          crypt_ = null;
          onChanged();
        } else {
          cryptBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder getCryptBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getCryptFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
        if (cryptBuilder_ != null) {
          return cryptBuilder_.getMessageOrBuilder();
        } else {
          return crypt_ == null ?
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> 
          getCryptFieldBuilder() {
        if (cryptBuilder_ == null) {
          cryptBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder>(
                  getCrypt(),
                  getParentForChildren(),
                  isClean());
          crypt_ = null;
        }
        return cryptBuilder_;
      }

      private com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned cert_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder> certBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public boolean hasCert() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert() {
        if (certBuilder_ == null) {
          return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        } else {
          return certBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder setCert(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cert_ = value;
          onChanged();
        } else {
          certBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder setCert(
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder builderForValue) {
        if (certBuilder_ == null) {
          cert_ = builderForValue.build();
          onChanged();
        } else {
          certBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder mergeCert(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              cert_ != null &&
              cert_ != com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance()) {
            cert_ =
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.newBuilder(cert_).mergeFrom(value).buildPartial();
          } else {
            cert_ = value;
          }
          onChanged();
        } else {
          certBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder clearCert() {
        if (certBuilder_ == null) {
          cert_ = null;
          onChanged();
        } else {
          certBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder getCertBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getCertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
        if (certBuilder_ != null) {
          return certBuilder_.getMessageOrBuilder();
        } else {
          return cert_ == null ?
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder> 
          getCertFieldBuilder() {
        if (certBuilder_ == null) {
          certBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder>(
                  getCert(),
                  getParentForChildren(),
                  isClean());
          cert_ = null;
        }
        return certBuilder_;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 8;</code>
       */
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 protocol_version = 8;</code>
       */
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 8;</code>
       */
      public Builder setProtocolVersion(int value) {
        bitField0_ |= 0x00000080;
        protocolVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 8;</code>
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000080);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_ConnectRequest)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectRequest)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectRequest>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_ConnectRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectOKOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_ConnectOK)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    boolean hasClientConnectionId();
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    int getClientConnectionId();

    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     */
    boolean hasServerConnectionId();
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     */
    int getServerConnectionId();

    /**
     * <code>optional fixed64 server_steam_id = 2;</code>
     */
    boolean hasServerSteamId();
    /**
     * <code>optional fixed64 server_steam_id = 2;</code>
     */
    long getServerSteamId();

    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    boolean hasYourTimestamp();
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    long getYourTimestamp();

    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     */
    boolean hasDelayTimeUsec();
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     */
    int getDelayTimeUsec();

    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    boolean hasCrypt();
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt();
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder();

    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    boolean hasCert();
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert();
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder();

    /**
     * <code>optional uint32 protocol_version = 9;</code>
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 9;</code>
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_ConnectOK}
   */
  public  static final class CMsgSteamSockets_UDP_ConnectOK extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_ConnectOK)
      CMsgSteamSockets_UDP_ConnectOKOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_ConnectOK.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectOK(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectOK() {
      clientConnectionId_ = 0;
      serverConnectionId_ = 0;
      serverSteamId_ = 0L;
      yourTimestamp_ = 0L;
      delayTimeUsec_ = 0;
      protocolVersion_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_ConnectOK(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              clientConnectionId_ = input.readFixed32();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000004;
              serverSteamId_ = input.readFixed64();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000008;
              yourTimestamp_ = input.readFixed64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              delayTimeUsec_ = input.readUInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000002;
              serverConnectionId_ = input.readFixed32();
              break;
            }
            case 58: {
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = crypt_.toBuilder();
              }
              crypt_ = input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(crypt_);
                crypt_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 66: {
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = cert_.toBuilder();
              }
              cert_ = input.readMessage(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cert_);
                cert_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              protocolVersion_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.Builder.class);
    }

    private int bitField0_;
    public static final int CLIENT_CONNECTION_ID_FIELD_NUMBER = 1;
    private int clientConnectionId_;
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    public boolean hasClientConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     */
    public int getClientConnectionId() {
      return clientConnectionId_;
    }

    public static final int SERVER_CONNECTION_ID_FIELD_NUMBER = 5;
    private int serverConnectionId_;
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     */
    public boolean hasServerConnectionId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     */
    public int getServerConnectionId() {
      return serverConnectionId_;
    }

    public static final int SERVER_STEAM_ID_FIELD_NUMBER = 2;
    private long serverSteamId_;
    /**
     * <code>optional fixed64 server_steam_id = 2;</code>
     */
    public boolean hasServerSteamId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed64 server_steam_id = 2;</code>
     */
    public long getServerSteamId() {
      return serverSteamId_;
    }

    public static final int YOUR_TIMESTAMP_FIELD_NUMBER = 3;
    private long yourTimestamp_;
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    public boolean hasYourTimestamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     */
    public long getYourTimestamp() {
      return yourTimestamp_;
    }

    public static final int DELAY_TIME_USEC_FIELD_NUMBER = 4;
    private int delayTimeUsec_;
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     */
    public boolean hasDelayTimeUsec() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     */
    public int getDelayTimeUsec() {
      return delayTimeUsec_;
    }

    public static final int CRYPT_FIELD_NUMBER = 7;
    private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public boolean hasCrypt() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
      return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
      return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }

    public static final int CERT_FIELD_NUMBER = 8;
    private com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned cert_;
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    public boolean hasCert() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert() {
      return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }
    /**
     * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
      return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 9;
    private int protocolVersion_;
    /**
     * <code>optional uint32 protocol_version = 9;</code>
     */
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 protocol_version = 9;</code>
     */
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed64(2, serverSteamId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed64(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(4, delayTimeUsec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(5, serverConnectionId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(7, getCrypt());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(8, getCert());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(9, protocolVersion_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, serverSteamId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, delayTimeUsec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, serverConnectionId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getCrypt());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getCert());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, protocolVersion_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK) obj;

      boolean result = true;
      result = result && (hasClientConnectionId() == other.hasClientConnectionId());
      if (hasClientConnectionId()) {
        result = result && (getClientConnectionId()
            == other.getClientConnectionId());
      }
      result = result && (hasServerConnectionId() == other.hasServerConnectionId());
      if (hasServerConnectionId()) {
        result = result && (getServerConnectionId()
            == other.getServerConnectionId());
      }
      result = result && (hasServerSteamId() == other.hasServerSteamId());
      if (hasServerSteamId()) {
        result = result && (getServerSteamId()
            == other.getServerSteamId());
      }
      result = result && (hasYourTimestamp() == other.hasYourTimestamp());
      if (hasYourTimestamp()) {
        result = result && (getYourTimestamp()
            == other.getYourTimestamp());
      }
      result = result && (hasDelayTimeUsec() == other.hasDelayTimeUsec());
      if (hasDelayTimeUsec()) {
        result = result && (getDelayTimeUsec()
            == other.getDelayTimeUsec());
      }
      result = result && (hasCrypt() == other.hasCrypt());
      if (hasCrypt()) {
        result = result && getCrypt()
            .equals(other.getCrypt());
      }
      result = result && (hasCert() == other.hasCert());
      if (hasCert()) {
        result = result && getCert()
            .equals(other.getCert());
      }
      result = result && (hasProtocolVersion() == other.hasProtocolVersion());
      if (hasProtocolVersion()) {
        result = result && (getProtocolVersion()
            == other.getProtocolVersion());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClientConnectionId()) {
        hash = (37 * hash) + CLIENT_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getClientConnectionId();
      }
      if (hasServerConnectionId()) {
        hash = (37 * hash) + SERVER_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getServerConnectionId();
      }
      if (hasServerSteamId()) {
        hash = (37 * hash) + SERVER_STEAM_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getServerSteamId());
      }
      if (hasYourTimestamp()) {
        hash = (37 * hash) + YOUR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getYourTimestamp());
      }
      if (hasDelayTimeUsec()) {
        hash = (37 * hash) + DELAY_TIME_USEC_FIELD_NUMBER;
        hash = (53 * hash) + getDelayTimeUsec();
      }
      if (hasCrypt()) {
        hash = (37 * hash) + CRYPT_FIELD_NUMBER;
        hash = (53 * hash) + getCrypt().hashCode();
      }
      if (hasCert()) {
        hash = (37 * hash) + CERT_FIELD_NUMBER;
        hash = (53 * hash) + getCert().hashCode();
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_ConnectOK}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_ConnectOK)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOKOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCryptFieldBuilder();
          getCertFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        clientConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        serverConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        serverSteamId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        yourTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        delayTimeUsec_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (cryptBuilder_ == null) {
          crypt_ = null;
        } else {
          cryptBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (certBuilder_ == null) {
          cert_ = null;
        } else {
          certBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        protocolVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clientConnectionId_ = clientConnectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serverConnectionId_ = serverConnectionId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.serverSteamId_ = serverSteamId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.yourTimestamp_ = yourTimestamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.delayTimeUsec_ = delayTimeUsec_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (cryptBuilder_ == null) {
          result.crypt_ = crypt_;
        } else {
          result.crypt_ = cryptBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (certBuilder_ == null) {
          result.cert_ = cert_;
        } else {
          result.cert_ = certBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.protocolVersion_ = protocolVersion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK.getDefaultInstance()) return this;
        if (other.hasClientConnectionId()) {
          setClientConnectionId(other.getClientConnectionId());
        }
        if (other.hasServerConnectionId()) {
          setServerConnectionId(other.getServerConnectionId());
        }
        if (other.hasServerSteamId()) {
          setServerSteamId(other.getServerSteamId());
        }
        if (other.hasYourTimestamp()) {
          setYourTimestamp(other.getYourTimestamp());
        }
        if (other.hasDelayTimeUsec()) {
          setDelayTimeUsec(other.getDelayTimeUsec());
        }
        if (other.hasCrypt()) {
          mergeCrypt(other.getCrypt());
        }
        if (other.hasCert()) {
          mergeCert(other.getCert());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int clientConnectionId_ ;
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public boolean hasClientConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public int getClientConnectionId() {
        return clientConnectionId_;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public Builder setClientConnectionId(int value) {
        bitField0_ |= 0x00000001;
        clientConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       */
      public Builder clearClientConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int serverConnectionId_ ;
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       */
      public boolean hasServerConnectionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       */
      public int getServerConnectionId() {
        return serverConnectionId_;
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       */
      public Builder setServerConnectionId(int value) {
        bitField0_ |= 0x00000002;
        serverConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       */
      public Builder clearServerConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serverConnectionId_ = 0;
        onChanged();
        return this;
      }

      private long serverSteamId_ ;
      /**
       * <code>optional fixed64 server_steam_id = 2;</code>
       */
      public boolean hasServerSteamId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed64 server_steam_id = 2;</code>
       */
      public long getServerSteamId() {
        return serverSteamId_;
      }
      /**
       * <code>optional fixed64 server_steam_id = 2;</code>
       */
      public Builder setServerSteamId(long value) {
        bitField0_ |= 0x00000004;
        serverSteamId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 server_steam_id = 2;</code>
       */
      public Builder clearServerSteamId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        serverSteamId_ = 0L;
        onChanged();
        return this;
      }

      private long yourTimestamp_ ;
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public boolean hasYourTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public long getYourTimestamp() {
        return yourTimestamp_;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public Builder setYourTimestamp(long value) {
        bitField0_ |= 0x00000008;
        yourTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       */
      public Builder clearYourTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        yourTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int delayTimeUsec_ ;
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       */
      public boolean hasDelayTimeUsec() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       */
      public int getDelayTimeUsec() {
        return delayTimeUsec_;
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       */
      public Builder setDelayTimeUsec(int value) {
        bitField0_ |= 0x00000010;
        delayTimeUsec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       */
      public Builder clearDelayTimeUsec() {
        bitField0_ = (bitField0_ & ~0x00000010);
        delayTimeUsec_ = 0;
        onChanged();
        return this;
      }

      private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned crypt_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> cryptBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public boolean hasCrypt() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
        if (cryptBuilder_ == null) {
          return crypt_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        } else {
          return cryptBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          crypt_ = value;
          onChanged();
        } else {
          cryptBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder builderForValue) {
        if (cryptBuilder_ == null) {
          crypt_ = builderForValue.build();
          onChanged();
        } else {
          cryptBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder mergeCrypt(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              crypt_ != null &&
              crypt_ != com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance()) {
            crypt_ =
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.newBuilder(crypt_).mergeFrom(value).buildPartial();
          } else {
            crypt_ = value;
          }
          onChanged();
        } else {
          cryptBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder clearCrypt() {
        if (cryptBuilder_ == null) {
          crypt_ = null;
          onChanged();
        } else {
          cryptBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder getCryptBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getCryptFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
        if (cryptBuilder_ != null) {
          return cryptBuilder_.getMessageOrBuilder();
        } else {
          return crypt_ == null ?
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> 
          getCryptFieldBuilder() {
        if (cryptBuilder_ == null) {
          cryptBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder>(
                  getCrypt(),
                  getParentForChildren(),
                  isClean());
          crypt_ = null;
        }
        return cryptBuilder_;
      }

      private com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned cert_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder> certBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public boolean hasCert() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned getCert() {
        if (certBuilder_ == null) {
          return cert_ == null ? com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        } else {
          return certBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder setCert(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cert_ = value;
          onChanged();
        } else {
          certBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder setCert(
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder builderForValue) {
        if (certBuilder_ == null) {
          cert_ = builderForValue.build();
          onChanged();
        } else {
          certBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder mergeCert(com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              cert_ != null &&
              cert_ != com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance()) {
            cert_ =
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.newBuilder(cert_).mergeFrom(value).buildPartial();
          } else {
            cert_ = value;
          }
          onChanged();
        } else {
          certBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder clearCert() {
        if (certBuilder_ == null) {
          cert_ = null;
          onChanged();
        } else {
          certBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder getCertBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getCertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
        if (certBuilder_ != null) {
          return certBuilder_.getMessageOrBuilder();
        } else {
          return cert_ == null ?
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder> 
          getCertFieldBuilder() {
        if (certBuilder_ == null) {
          certBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSigned.Builder, com.valve.gamenetworkingsockets.proto.messages.Certs.CMsgSteamDatagramCertificateSignedOrBuilder>(
                  getCert(),
                  getParentForChildren(),
                  isClean());
          cert_ = null;
        }
        return certBuilder_;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 9;</code>
       */
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 protocol_version = 9;</code>
       */
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 9;</code>
       */
      public Builder setProtocolVersion(int value) {
        bitField0_ |= 0x00000080;
        protocolVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 9;</code>
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000080);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_ConnectOK)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectOK)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectOK>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectOK parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_ConnectOK(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectionClosedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_ConnectionClosed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     */
    boolean hasToConnectionId();
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     */
    int getToConnectionId();

    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     */
    boolean hasFromConnectionId();
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     */
    int getFromConnectionId();

    /**
     * <code>optional string debug = 2;</code>
     */
    boolean hasDebug();
    /**
     * <code>optional string debug = 2;</code>
     */
    java.lang.String getDebug();
    /**
     * <code>optional string debug = 2;</code>
     */
    com.google.protobuf.ByteString
        getDebugBytes();

    /**
     * <code>optional uint32 reason_code = 3;</code>
     */
    boolean hasReasonCode();
    /**
     * <code>optional uint32 reason_code = 3;</code>
     */
    int getReasonCode();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_ConnectionClosed}
   */
  public  static final class CMsgSteamSockets_UDP_ConnectionClosed extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_ConnectionClosed)
      CMsgSteamSockets_UDP_ConnectionClosedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_ConnectionClosed.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectionClosed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectionClosed() {
      toConnectionId_ = 0;
      fromConnectionId_ = 0;
      debug_ = "";
      reasonCode_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_ConnectionClosed(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              debug_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000008;
              reasonCode_ = input.readUInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000001;
              toConnectionId_ = input.readFixed32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000002;
              fromConnectionId_ = input.readFixed32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.Builder.class);
    }

    private int bitField0_;
    public static final int TO_CONNECTION_ID_FIELD_NUMBER = 4;
    private int toConnectionId_;
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     */
    public boolean hasToConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     */
    public int getToConnectionId() {
      return toConnectionId_;
    }

    public static final int FROM_CONNECTION_ID_FIELD_NUMBER = 5;
    private int fromConnectionId_;
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     */
    public boolean hasFromConnectionId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     */
    public int getFromConnectionId() {
      return fromConnectionId_;
    }

    public static final int DEBUG_FIELD_NUMBER = 2;
    private volatile java.lang.Object debug_;
    /**
     * <code>optional string debug = 2;</code>
     */
    public boolean hasDebug() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string debug = 2;</code>
     */
    public java.lang.String getDebug() {
      java.lang.Object ref = debug_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          debug_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string debug = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDebugBytes() {
      java.lang.Object ref = debug_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        debug_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REASON_CODE_FIELD_NUMBER = 3;
    private int reasonCode_;
    /**
     * <code>optional uint32 reason_code = 3;</code>
     */
    public boolean hasReasonCode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 reason_code = 3;</code>
     */
    public int getReasonCode() {
      return reasonCode_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, debug_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(3, reasonCode_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(4, toConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(5, fromConnectionId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, debug_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, reasonCode_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, toConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, fromConnectionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed) obj;

      boolean result = true;
      result = result && (hasToConnectionId() == other.hasToConnectionId());
      if (hasToConnectionId()) {
        result = result && (getToConnectionId()
            == other.getToConnectionId());
      }
      result = result && (hasFromConnectionId() == other.hasFromConnectionId());
      if (hasFromConnectionId()) {
        result = result && (getFromConnectionId()
            == other.getFromConnectionId());
      }
      result = result && (hasDebug() == other.hasDebug());
      if (hasDebug()) {
        result = result && getDebug()
            .equals(other.getDebug());
      }
      result = result && (hasReasonCode() == other.hasReasonCode());
      if (hasReasonCode()) {
        result = result && (getReasonCode()
            == other.getReasonCode());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasToConnectionId()) {
        hash = (37 * hash) + TO_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getToConnectionId();
      }
      if (hasFromConnectionId()) {
        hash = (37 * hash) + FROM_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFromConnectionId();
      }
      if (hasDebug()) {
        hash = (37 * hash) + DEBUG_FIELD_NUMBER;
        hash = (53 * hash) + getDebug().hashCode();
      }
      if (hasReasonCode()) {
        hash = (37 * hash) + REASON_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getReasonCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_ConnectionClosed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_ConnectionClosed)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        toConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        fromConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        debug_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        reasonCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.toConnectionId_ = toConnectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fromConnectionId_ = fromConnectionId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.debug_ = debug_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.reasonCode_ = reasonCode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed.getDefaultInstance()) return this;
        if (other.hasToConnectionId()) {
          setToConnectionId(other.getToConnectionId());
        }
        if (other.hasFromConnectionId()) {
          setFromConnectionId(other.getFromConnectionId());
        }
        if (other.hasDebug()) {
          bitField0_ |= 0x00000004;
          debug_ = other.debug_;
          onChanged();
        }
        if (other.hasReasonCode()) {
          setReasonCode(other.getReasonCode());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int toConnectionId_ ;
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       */
      public boolean hasToConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       */
      public int getToConnectionId() {
        return toConnectionId_;
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       */
      public Builder setToConnectionId(int value) {
        bitField0_ |= 0x00000001;
        toConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       */
      public Builder clearToConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        toConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int fromConnectionId_ ;
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       */
      public boolean hasFromConnectionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       */
      public int getFromConnectionId() {
        return fromConnectionId_;
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       */
      public Builder setFromConnectionId(int value) {
        bitField0_ |= 0x00000002;
        fromConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       */
      public Builder clearFromConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fromConnectionId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object debug_ = "";
      /**
       * <code>optional string debug = 2;</code>
       */
      public boolean hasDebug() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string debug = 2;</code>
       */
      public java.lang.String getDebug() {
        java.lang.Object ref = debug_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            debug_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string debug = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDebugBytes() {
        java.lang.Object ref = debug_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          debug_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string debug = 2;</code>
       */
      public Builder setDebug(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        debug_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string debug = 2;</code>
       */
      public Builder clearDebug() {
        bitField0_ = (bitField0_ & ~0x00000004);
        debug_ = getDefaultInstance().getDebug();
        onChanged();
        return this;
      }
      /**
       * <code>optional string debug = 2;</code>
       */
      public Builder setDebugBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        debug_ = value;
        onChanged();
        return this;
      }

      private int reasonCode_ ;
      /**
       * <code>optional uint32 reason_code = 3;</code>
       */
      public boolean hasReasonCode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       */
      public int getReasonCode() {
        return reasonCode_;
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       */
      public Builder setReasonCode(int value) {
        bitField0_ |= 0x00000008;
        reasonCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       */
      public Builder clearReasonCode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        reasonCode_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_ConnectionClosed)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectionClosed)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectionClosed>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectionClosed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_ConnectionClosed(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_NoConnectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_NoConnection)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     */
    boolean hasFromConnectionId();
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     */
    int getFromConnectionId();

    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     */
    boolean hasToConnectionId();
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     */
    int getToConnectionId();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_NoConnection}
   */
  public  static final class CMsgSteamSockets_UDP_NoConnection extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_NoConnection)
      CMsgSteamSockets_UDP_NoConnectionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_NoConnection.newBuilder() to construct.
    private CMsgSteamSockets_UDP_NoConnection(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_NoConnection() {
      fromConnectionId_ = 0;
      toConnectionId_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_NoConnection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 21: {
              bitField0_ |= 0x00000001;
              fromConnectionId_ = input.readFixed32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000002;
              toConnectionId_ = input.readFixed32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_CONNECTION_ID_FIELD_NUMBER = 2;
    private int fromConnectionId_;
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     */
    public boolean hasFromConnectionId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     */
    public int getFromConnectionId() {
      return fromConnectionId_;
    }

    public static final int TO_CONNECTION_ID_FIELD_NUMBER = 3;
    private int toConnectionId_;
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     */
    public boolean hasToConnectionId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     */
    public int getToConnectionId() {
      return toConnectionId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(2, fromConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(3, toConnectionId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, fromConnectionId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, toConnectionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection) obj;

      boolean result = true;
      result = result && (hasFromConnectionId() == other.hasFromConnectionId());
      if (hasFromConnectionId()) {
        result = result && (getFromConnectionId()
            == other.getFromConnectionId());
      }
      result = result && (hasToConnectionId() == other.hasToConnectionId());
      if (hasToConnectionId()) {
        result = result && (getToConnectionId()
            == other.getToConnectionId());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFromConnectionId()) {
        hash = (37 * hash) + FROM_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFromConnectionId();
      }
      if (hasToConnectionId()) {
        hash = (37 * hash) + TO_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getToConnectionId();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_NoConnection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_NoConnection)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        fromConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        toConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fromConnectionId_ = fromConnectionId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.toConnectionId_ = toConnectionId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection.getDefaultInstance()) return this;
        if (other.hasFromConnectionId()) {
          setFromConnectionId(other.getFromConnectionId());
        }
        if (other.hasToConnectionId()) {
          setToConnectionId(other.getToConnectionId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int fromConnectionId_ ;
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       */
      public boolean hasFromConnectionId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       */
      public int getFromConnectionId() {
        return fromConnectionId_;
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       */
      public Builder setFromConnectionId(int value) {
        bitField0_ |= 0x00000001;
        fromConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       */
      public Builder clearFromConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fromConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int toConnectionId_ ;
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       */
      public boolean hasToConnectionId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       */
      public int getToConnectionId() {
        return toConnectionId_;
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       */
      public Builder setToConnectionId(int value) {
        bitField0_ |= 0x00000002;
        toConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       */
      public Builder clearToConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        toConnectionId_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_NoConnection)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_NoConnection)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_NoConnection>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_NoConnection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_NoConnection(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_StatsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamSockets_UDP_Stats)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    boolean hasStats();
    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getStats();
    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder();

    /**
     * <code>optional uint32 flags = 3;</code>
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 3;</code>
     */
    int getFlags();

    /**
     * <code>optional fixed32 to_connection_id = 9;</code>
     */
    boolean hasToConnectionId();
    /**
     * <code>optional fixed32 to_connection_id = 9;</code>
     */
    int getToConnectionId();

    /**
     * <code>optional fixed32 from_connection_id = 10;</code>
     */
    boolean hasFromConnectionId();
    /**
     * <code>optional fixed32 from_connection_id = 10;</code>
     */
    int getFromConnectionId();

    /**
     * <code>optional uint32 seq_num = 4;</code>
     */
    boolean hasSeqNum();
    /**
     * <code>optional uint32 seq_num = 4;</code>
     */
    int getSeqNum();
  }
  /**
   * Protobuf type {@code CMsgSteamSockets_UDP_Stats}
   */
  public  static final class CMsgSteamSockets_UDP_Stats extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamSockets_UDP_Stats)
      CMsgSteamSockets_UDP_StatsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamSockets_UDP_Stats.newBuilder() to construct.
    private CMsgSteamSockets_UDP_Stats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_Stats() {
      flags_ = 0;
      toConnectionId_ = 0;
      fromConnectionId_ = 0;
      seqNum_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamSockets_UDP_Stats(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = stats_.toBuilder();
              }
              stats_ = input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stats_);
                stats_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              flags_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000010;
              seqNum_ = input.readUInt32();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000004;
              toConnectionId_ = input.readFixed32();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000008;
              fromConnectionId_ = input.readFixed32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_Stats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_Stats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.Builder.class);
    }

    /**
     * Protobuf enum {@code CMsgSteamSockets_UDP_Stats.Flags}
     */
    public enum Flags
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACK_REQUEST_E2E = 2;</code>
       */
      ACK_REQUEST_E2E(2),
      /**
       * <code>ACK_REQUEST_IMMEDIATE = 4;</code>
       */
      ACK_REQUEST_IMMEDIATE(4),
      ;

      /**
       * <code>ACK_REQUEST_E2E = 2;</code>
       */
      public static final int ACK_REQUEST_E2E_VALUE = 2;
      /**
       * <code>ACK_REQUEST_IMMEDIATE = 4;</code>
       */
      public static final int ACK_REQUEST_IMMEDIATE_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Flags valueOf(int value) {
        return forNumber(value);
      }

      public static Flags forNumber(int value) {
        switch (value) {
          case 2: return ACK_REQUEST_E2E;
          case 4: return ACK_REQUEST_IMMEDIATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Flags>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Flags> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Flags>() {
              public Flags findValueByNumber(int number) {
                return Flags.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.getDescriptor().getEnumTypes().get(0);
      }

      private static final Flags[] VALUES = values();

      public static Flags valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Flags(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:CMsgSteamSockets_UDP_Stats.Flags)
    }

    private int bitField0_;
    public static final int STATS_FIELD_NUMBER = 1;
    private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality stats_;
    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    public boolean hasStats() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getStats() {
      return stats_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
    }
    /**
     * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder() {
      return stats_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
    }

    public static final int FLAGS_FIELD_NUMBER = 3;
    private int flags_;
    /**
     * <code>optional uint32 flags = 3;</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 flags = 3;</code>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int TO_CONNECTION_ID_FIELD_NUMBER = 9;
    private int toConnectionId_;
    /**
     * <code>optional fixed32 to_connection_id = 9;</code>
     */
    public boolean hasToConnectionId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed32 to_connection_id = 9;</code>
     */
    public int getToConnectionId() {
      return toConnectionId_;
    }

    public static final int FROM_CONNECTION_ID_FIELD_NUMBER = 10;
    private int fromConnectionId_;
    /**
     * <code>optional fixed32 from_connection_id = 10;</code>
     */
    public boolean hasFromConnectionId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed32 from_connection_id = 10;</code>
     */
    public int getFromConnectionId() {
      return fromConnectionId_;
    }

    public static final int SEQ_NUM_FIELD_NUMBER = 4;
    private int seqNum_;
    /**
     * <code>optional uint32 seq_num = 4;</code>
     */
    public boolean hasSeqNum() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 seq_num = 4;</code>
     */
    public int getSeqNum() {
      return seqNum_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getStats());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, flags_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(4, seqNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed32(9, toConnectionId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed32(10, fromConnectionId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStats());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, flags_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, seqNum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(9, toConnectionId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(10, fromConnectionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats other = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats) obj;

      boolean result = true;
      result = result && (hasStats() == other.hasStats());
      if (hasStats()) {
        result = result && getStats()
            .equals(other.getStats());
      }
      result = result && (hasFlags() == other.hasFlags());
      if (hasFlags()) {
        result = result && (getFlags()
            == other.getFlags());
      }
      result = result && (hasToConnectionId() == other.hasToConnectionId());
      if (hasToConnectionId()) {
        result = result && (getToConnectionId()
            == other.getToConnectionId());
      }
      result = result && (hasFromConnectionId() == other.hasFromConnectionId());
      if (hasFromConnectionId()) {
        result = result && (getFromConnectionId()
            == other.getFromConnectionId());
      }
      result = result && (hasSeqNum() == other.hasSeqNum());
      if (hasSeqNum()) {
        result = result && (getSeqNum()
            == other.getSeqNum());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStats()) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStats().hashCode();
      }
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      if (hasToConnectionId()) {
        hash = (37 * hash) + TO_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getToConnectionId();
      }
      if (hasFromConnectionId()) {
        hash = (37 * hash) + FROM_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFromConnectionId();
      }
      if (hasSeqNum()) {
        hash = (37 * hash) + SEQ_NUM_FIELD_NUMBER;
        hash = (53 * hash) + getSeqNum();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamSockets_UDP_Stats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamSockets_UDP_Stats)
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_StatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_Stats_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_Stats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.class, com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStatsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (statsBuilder_ == null) {
          stats_ = null;
        } else {
          statsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        toConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        fromConnectionId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        seqNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.internal_static_CMsgSteamSockets_UDP_Stats_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats build() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats buildPartial() {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats result = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (statsBuilder_ == null) {
          result.stats_ = stats_;
        } else {
          result.stats_ = statsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.toConnectionId_ = toConnectionId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fromConnectionId_ = fromConnectionId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.seqNum_ = seqNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats other) {
        if (other == com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats.getDefaultInstance()) return this;
        if (other.hasStats()) {
          mergeStats(other.getStats());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasToConnectionId()) {
          setToConnectionId(other.getToConnectionId());
        }
        if (other.hasFromConnectionId()) {
          setFromConnectionId(other.getFromConnectionId());
        }
        if (other.hasSeqNum()) {
          setSeqNum(other.getSeqNum());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality stats_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder> statsBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public boolean hasStats() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getStats() {
        if (statsBuilder_ == null) {
          return stats_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
        } else {
          return statsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder setStats(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stats_ = value;
          onChanged();
        } else {
          statsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder setStats(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder builderForValue) {
        if (statsBuilder_ == null) {
          stats_ = builderForValue.build();
          onChanged();
        } else {
          statsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder mergeStats(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality value) {
        if (statsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              stats_ != null &&
              stats_ != com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance()) {
            stats_ =
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.newBuilder(stats_).mergeFrom(value).buildPartial();
          } else {
            stats_ = value;
          }
          onChanged();
        } else {
          statsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder clearStats() {
        if (statsBuilder_ == null) {
          stats_ = null;
          onChanged();
        } else {
          statsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder getStatsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStatsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilder();
        } else {
          return stats_ == null ?
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder> 
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder>(
                  getStats(),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }

      private int flags_ ;
      /**
       * <code>optional uint32 flags = 3;</code>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000002;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int toConnectionId_ ;
      /**
       * <code>optional fixed32 to_connection_id = 9;</code>
       */
      public boolean hasToConnectionId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed32 to_connection_id = 9;</code>
       */
      public int getToConnectionId() {
        return toConnectionId_;
      }
      /**
       * <code>optional fixed32 to_connection_id = 9;</code>
       */
      public Builder setToConnectionId(int value) {
        bitField0_ |= 0x00000004;
        toConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 to_connection_id = 9;</code>
       */
      public Builder clearToConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        toConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int fromConnectionId_ ;
      /**
       * <code>optional fixed32 from_connection_id = 10;</code>
       */
      public boolean hasFromConnectionId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional fixed32 from_connection_id = 10;</code>
       */
      public int getFromConnectionId() {
        return fromConnectionId_;
      }
      /**
       * <code>optional fixed32 from_connection_id = 10;</code>
       */
      public Builder setFromConnectionId(int value) {
        bitField0_ |= 0x00000008;
        fromConnectionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 from_connection_id = 10;</code>
       */
      public Builder clearFromConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fromConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int seqNum_ ;
      /**
       * <code>optional uint32 seq_num = 4;</code>
       */
      public boolean hasSeqNum() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 seq_num = 4;</code>
       */
      public int getSeqNum() {
        return seqNum_;
      }
      /**
       * <code>optional uint32 seq_num = 4;</code>
       */
      public Builder setSeqNum(int value) {
        bitField0_ |= 0x00000010;
        seqNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 seq_num = 4;</code>
       */
      public Builder clearSeqNum() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seqNum_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamSockets_UDP_Stats)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_Stats)
    private static final com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats();
    }

    public static com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_Stats>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_Stats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamSockets_UDP_Stats(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.messages.UDP.CMsgSteamSockets_UDP_Stats getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamSockets_UDP_Stats_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamSockets_UDP_Stats_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)steamnetworkingsockets_messages_udp.pr" +
      "oto\032+steamnetworkingsockets_messages_cer" +
      "ts.proto\032%steamnetworkingsockets_message" +
      "s.proto\"n\n%CMsgSteamSockets_UDP_Challeng" +
      "eRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_ti" +
      "mestamp\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\"" +
      "\201\001\n#CMsgSteamSockets_UDP_ChallengeReply\022" +
      "\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(" +
      "\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020protocol_ve" +
      "rsion\030\004 \001(\r\"\240\002\n#CMsgSteamSockets_UDP_Con" +
      "nectRequest\022\034\n\024client_connection_id\030\001 \001(" +
      "\007\022\021\n\tchallenge\030\002 \001(\006\022\027\n\017client_steam_id\030" +
      "\003 \001(\006\022\024\n\014my_timestamp\030\005 \001(\006\022\023\n\013ping_est_" +
      "ms\030\006 \001(\r\0227\n\005crypt\030\007 \001(\0132(.CMsgSteamDatag" +
      "ramSessionCryptInfoSigned\0221\n\004cert\030\004 \001(\0132" +
      "#.CMsgSteamDatagramCertificateSigned\022\030\n\020" +
      "protocol_version\030\010 \001(\r\"\254\002\n\036CMsgSteamSock" +
      "ets_UDP_ConnectOK\022\034\n\024client_connection_i" +
      "d\030\001 \001(\007\022\034\n\024server_connection_id\030\005 \001(\007\022\027\n" +
      "\017server_steam_id\030\002 \001(\006\022\026\n\016your_timestamp" +
      "\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\0227\n\005crypt" +
      "\030\007 \001(\0132(.CMsgSteamDatagramSessionCryptIn" +
      "foSigned\0221\n\004cert\030\010 \001(\0132#.CMsgSteamDatagr" +
      "amCertificateSigned\022\030\n\020protocol_version\030" +
      "\t \001(\r\"\201\001\n%CMsgSteamSockets_UDP_Connectio" +
      "nClosed\022\030\n\020to_connection_id\030\004 \001(\007\022\032\n\022fro" +
      "m_connection_id\030\005 \001(\007\022\r\n\005debug\030\002 \001(\t\022\023\n\013" +
      "reason_code\030\003 \001(\r\"Y\n!CMsgSteamSockets_UD" +
      "P_NoConnection\022\032\n\022from_connection_id\030\002 \001" +
      "(\007\022\030\n\020to_connection_id\030\003 \001(\007\"\337\001\n\032CMsgSte" +
      "amSockets_UDP_Stats\0222\n\005stats\030\001 \001(\0132#.CMs" +
      "gSteamDatagramConnectionQuality\022\r\n\005flags" +
      "\030\003 \001(\r\022\030\n\020to_connection_id\030\t \001(\007\022\032\n\022from" +
      "_connection_id\030\n \001(\007\022\017\n\007seq_num\030\004 \001(\r\"7\n" +
      "\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUE" +
      "ST_IMMEDIATE\020\004*\245\002\n\030ESteamNetworkingUDPMs" +
      "gID\022-\n)k_ESteamNetworkingUDPMsg_Challeng" +
      "eRequest\020 \022+\n\'k_ESteamNetworkingUDPMsg_C" +
      "hallengeReply\020!\022+\n\'k_ESteamNetworkingUDP" +
      "Msg_ConnectRequest\020\"\022&\n\"k_ESteamNetworki" +
      "ngUDPMsg_ConnectOK\020#\022-\n)k_ESteamNetworki" +
      "ngUDPMsg_ConnectionClosed\020$\022)\n%k_ESteamN" +
      "etworkingUDPMsg_NoConnection\020%B8\n.com.va" +
      "lve.gamenetworkingsockets.proto.messages" +
      "B\003UDP\200\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.valve.gamenetworkingsockets.proto.messages.Certs.getDescriptor(),
          com.valve.gamenetworkingsockets.proto.Messages.getDescriptor(),
        }, assigner);
    internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_ChallengeRequest_descriptor,
        new java.lang.String[] { "ConnectionId", "MyTimestamp", "ProtocolVersion", });
    internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_ChallengeReply_descriptor,
        new java.lang.String[] { "ConnectionId", "Challenge", "YourTimestamp", "ProtocolVersion", });
    internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_ConnectRequest_descriptor,
        new java.lang.String[] { "ClientConnectionId", "Challenge", "ClientSteamId", "MyTimestamp", "PingEstMs", "Crypt", "Cert", "ProtocolVersion", });
    internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_ConnectOK_descriptor,
        new java.lang.String[] { "ClientConnectionId", "ServerConnectionId", "ServerSteamId", "YourTimestamp", "DelayTimeUsec", "Crypt", "Cert", "ProtocolVersion", });
    internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_ConnectionClosed_descriptor,
        new java.lang.String[] { "ToConnectionId", "FromConnectionId", "Debug", "ReasonCode", });
    internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_NoConnection_descriptor,
        new java.lang.String[] { "FromConnectionId", "ToConnectionId", });
    internal_static_CMsgSteamSockets_UDP_Stats_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_CMsgSteamSockets_UDP_Stats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamSockets_UDP_Stats_descriptor,
        new java.lang.String[] { "Stats", "Flags", "ToConnectionId", "FromConnectionId", "SeqNum", });
    com.valve.gamenetworkingsockets.proto.messages.Certs.getDescriptor();
    com.valve.gamenetworkingsockets.proto.Messages.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
