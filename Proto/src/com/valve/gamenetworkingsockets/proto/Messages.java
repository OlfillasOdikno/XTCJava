// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

package com.valve.gamenetworkingsockets.proto;

public final class Messages {
  private Messages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code ESteamDatagramMsgID}
   */
  public enum ESteamDatagramMsgID
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_ESteamDatagramMsg_Invalid = 0;</code>
     */
    k_ESteamDatagramMsg_Invalid(0),
    /**
     * <code>k_ESteamDatagramMsg_RouterPingRequest = 1;</code>
     */
    k_ESteamDatagramMsg_RouterPingRequest(1),
    /**
     * <code>k_ESteamDatagramMsg_RouterPingReply = 2;</code>
     */
    k_ESteamDatagramMsg_RouterPingReply(2),
    /**
     * <code>k_ESteamDatagramMsg_GameserverPingRequest = 3;</code>
     */
    k_ESteamDatagramMsg_GameserverPingRequest(3),
    /**
     * <code>k_ESteamDatagramMsg_GameserverPingReply = 4;</code>
     */
    k_ESteamDatagramMsg_GameserverPingReply(4),
    /**
     * <code>k_ESteamDatagramMsg_GameserverSessionRequest = 5;</code>
     */
    k_ESteamDatagramMsg_GameserverSessionRequest(5),
    /**
     * <code>k_ESteamDatagramMsg_GameserverSessionEstablished = 6;</code>
     */
    k_ESteamDatagramMsg_GameserverSessionEstablished(6),
    /**
     * <code>k_ESteamDatagramMsg_NoSession = 7;</code>
     */
    k_ESteamDatagramMsg_NoSession(7),
    /**
     * <code>k_ESteamDatagramMsg_Diagnostic = 8;</code>
     */
    k_ESteamDatagramMsg_Diagnostic(8),
    /**
     * <code>k_ESteamDatagramMsg_DataClientToRouter = 9;</code>
     */
    k_ESteamDatagramMsg_DataClientToRouter(9),
    /**
     * <code>k_ESteamDatagramMsg_DataRouterToServer = 10;</code>
     */
    k_ESteamDatagramMsg_DataRouterToServer(10),
    /**
     * <code>k_ESteamDatagramMsg_DataServerToRouter = 11;</code>
     */
    k_ESteamDatagramMsg_DataServerToRouter(11),
    /**
     * <code>k_ESteamDatagramMsg_DataRouterToClient = 12;</code>
     */
    k_ESteamDatagramMsg_DataRouterToClient(12),
    /**
     * <code>k_ESteamDatagramMsg_Stats = 13;</code>
     */
    k_ESteamDatagramMsg_Stats(13),
    /**
     * <code>k_ESteamDatagramMsg_ClientPingSampleRequest = 14;</code>
     */
    k_ESteamDatagramMsg_ClientPingSampleRequest(14),
    /**
     * <code>k_ESteamDatagramMsg_ClientPingSampleReply = 15;</code>
     */
    k_ESteamDatagramMsg_ClientPingSampleReply(15),
    /**
     * <code>k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16;</code>
     */
    k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary(16),
    /**
     * <code>k_ESteamDatagramMsg_RelayHealth = 17;</code>
     */
    k_ESteamDatagramMsg_RelayHealth(17),
    /**
     * <code>k_ESteamDatagramMsg_ConnectRequest = 18;</code>
     */
    k_ESteamDatagramMsg_ConnectRequest(18),
    /**
     * <code>k_ESteamDatagramMsg_ConnectOK = 19;</code>
     */
    k_ESteamDatagramMsg_ConnectOK(19),
    /**
     * <code>k_ESteamDatagramMsg_ConnectionClosed = 20;</code>
     */
    k_ESteamDatagramMsg_ConnectionClosed(20),
    /**
     * <code>k_ESteamDatagramMsg_NoConnection = 21;</code>
     */
    k_ESteamDatagramMsg_NoConnection(21),
    /**
     * <code>k_ESteamDatagramMsg_RelayToRelayPingRequest = 22;</code>
     */
    k_ESteamDatagramMsg_RelayToRelayPingRequest(22),
    /**
     * <code>k_ESteamDatagramMsg_RelayToRelayPingReply = 23;</code>
     */
    k_ESteamDatagramMsg_RelayToRelayPingReply(23),
    /**
     * <code>k_ESteamDatagramMsg_P2PSessionRequest = 24;</code>
     */
    k_ESteamDatagramMsg_P2PSessionRequest(24),
    /**
     * <code>k_ESteamDatagramMsg_P2PSessionEstablished = 25;</code>
     */
    k_ESteamDatagramMsg_P2PSessionEstablished(25),
    /**
     * <code>k_ESteamDatagramMsg_P2PStatsClient = 26;</code>
     */
    k_ESteamDatagramMsg_P2PStatsClient(26),
    /**
     * <code>k_ESteamDatagramMsg_P2PStatsRelay = 27;</code>
     */
    k_ESteamDatagramMsg_P2PStatsRelay(27),
    /**
     * <code>k_ESteamDatagramMsg_P2PBadRoute = 28;</code>
     */
    k_ESteamDatagramMsg_P2PBadRoute(28),
    ;

    /**
     * <code>k_ESteamDatagramMsg_Invalid = 0;</code>
     */
    public static final int k_ESteamDatagramMsg_Invalid_VALUE = 0;
    /**
     * <code>k_ESteamDatagramMsg_RouterPingRequest = 1;</code>
     */
    public static final int k_ESteamDatagramMsg_RouterPingRequest_VALUE = 1;
    /**
     * <code>k_ESteamDatagramMsg_RouterPingReply = 2;</code>
     */
    public static final int k_ESteamDatagramMsg_RouterPingReply_VALUE = 2;
    /**
     * <code>k_ESteamDatagramMsg_GameserverPingRequest = 3;</code>
     */
    public static final int k_ESteamDatagramMsg_GameserverPingRequest_VALUE = 3;
    /**
     * <code>k_ESteamDatagramMsg_GameserverPingReply = 4;</code>
     */
    public static final int k_ESteamDatagramMsg_GameserverPingReply_VALUE = 4;
    /**
     * <code>k_ESteamDatagramMsg_GameserverSessionRequest = 5;</code>
     */
    public static final int k_ESteamDatagramMsg_GameserverSessionRequest_VALUE = 5;
    /**
     * <code>k_ESteamDatagramMsg_GameserverSessionEstablished = 6;</code>
     */
    public static final int k_ESteamDatagramMsg_GameserverSessionEstablished_VALUE = 6;
    /**
     * <code>k_ESteamDatagramMsg_NoSession = 7;</code>
     */
    public static final int k_ESteamDatagramMsg_NoSession_VALUE = 7;
    /**
     * <code>k_ESteamDatagramMsg_Diagnostic = 8;</code>
     */
    public static final int k_ESteamDatagramMsg_Diagnostic_VALUE = 8;
    /**
     * <code>k_ESteamDatagramMsg_DataClientToRouter = 9;</code>
     */
    public static final int k_ESteamDatagramMsg_DataClientToRouter_VALUE = 9;
    /**
     * <code>k_ESteamDatagramMsg_DataRouterToServer = 10;</code>
     */
    public static final int k_ESteamDatagramMsg_DataRouterToServer_VALUE = 10;
    /**
     * <code>k_ESteamDatagramMsg_DataServerToRouter = 11;</code>
     */
    public static final int k_ESteamDatagramMsg_DataServerToRouter_VALUE = 11;
    /**
     * <code>k_ESteamDatagramMsg_DataRouterToClient = 12;</code>
     */
    public static final int k_ESteamDatagramMsg_DataRouterToClient_VALUE = 12;
    /**
     * <code>k_ESteamDatagramMsg_Stats = 13;</code>
     */
    public static final int k_ESteamDatagramMsg_Stats_VALUE = 13;
    /**
     * <code>k_ESteamDatagramMsg_ClientPingSampleRequest = 14;</code>
     */
    public static final int k_ESteamDatagramMsg_ClientPingSampleRequest_VALUE = 14;
    /**
     * <code>k_ESteamDatagramMsg_ClientPingSampleReply = 15;</code>
     */
    public static final int k_ESteamDatagramMsg_ClientPingSampleReply_VALUE = 15;
    /**
     * <code>k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16;</code>
     */
    public static final int k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary_VALUE = 16;
    /**
     * <code>k_ESteamDatagramMsg_RelayHealth = 17;</code>
     */
    public static final int k_ESteamDatagramMsg_RelayHealth_VALUE = 17;
    /**
     * <code>k_ESteamDatagramMsg_ConnectRequest = 18;</code>
     */
    public static final int k_ESteamDatagramMsg_ConnectRequest_VALUE = 18;
    /**
     * <code>k_ESteamDatagramMsg_ConnectOK = 19;</code>
     */
    public static final int k_ESteamDatagramMsg_ConnectOK_VALUE = 19;
    /**
     * <code>k_ESteamDatagramMsg_ConnectionClosed = 20;</code>
     */
    public static final int k_ESteamDatagramMsg_ConnectionClosed_VALUE = 20;
    /**
     * <code>k_ESteamDatagramMsg_NoConnection = 21;</code>
     */
    public static final int k_ESteamDatagramMsg_NoConnection_VALUE = 21;
    /**
     * <code>k_ESteamDatagramMsg_RelayToRelayPingRequest = 22;</code>
     */
    public static final int k_ESteamDatagramMsg_RelayToRelayPingRequest_VALUE = 22;
    /**
     * <code>k_ESteamDatagramMsg_RelayToRelayPingReply = 23;</code>
     */
    public static final int k_ESteamDatagramMsg_RelayToRelayPingReply_VALUE = 23;
    /**
     * <code>k_ESteamDatagramMsg_P2PSessionRequest = 24;</code>
     */
    public static final int k_ESteamDatagramMsg_P2PSessionRequest_VALUE = 24;
    /**
     * <code>k_ESteamDatagramMsg_P2PSessionEstablished = 25;</code>
     */
    public static final int k_ESteamDatagramMsg_P2PSessionEstablished_VALUE = 25;
    /**
     * <code>k_ESteamDatagramMsg_P2PStatsClient = 26;</code>
     */
    public static final int k_ESteamDatagramMsg_P2PStatsClient_VALUE = 26;
    /**
     * <code>k_ESteamDatagramMsg_P2PStatsRelay = 27;</code>
     */
    public static final int k_ESteamDatagramMsg_P2PStatsRelay_VALUE = 27;
    /**
     * <code>k_ESteamDatagramMsg_P2PBadRoute = 28;</code>
     */
    public static final int k_ESteamDatagramMsg_P2PBadRoute_VALUE = 28;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ESteamDatagramMsgID valueOf(int value) {
      return forNumber(value);
    }

    public static ESteamDatagramMsgID forNumber(int value) {
      switch (value) {
        case 0: return k_ESteamDatagramMsg_Invalid;
        case 1: return k_ESteamDatagramMsg_RouterPingRequest;
        case 2: return k_ESteamDatagramMsg_RouterPingReply;
        case 3: return k_ESteamDatagramMsg_GameserverPingRequest;
        case 4: return k_ESteamDatagramMsg_GameserverPingReply;
        case 5: return k_ESteamDatagramMsg_GameserverSessionRequest;
        case 6: return k_ESteamDatagramMsg_GameserverSessionEstablished;
        case 7: return k_ESteamDatagramMsg_NoSession;
        case 8: return k_ESteamDatagramMsg_Diagnostic;
        case 9: return k_ESteamDatagramMsg_DataClientToRouter;
        case 10: return k_ESteamDatagramMsg_DataRouterToServer;
        case 11: return k_ESteamDatagramMsg_DataServerToRouter;
        case 12: return k_ESteamDatagramMsg_DataRouterToClient;
        case 13: return k_ESteamDatagramMsg_Stats;
        case 14: return k_ESteamDatagramMsg_ClientPingSampleRequest;
        case 15: return k_ESteamDatagramMsg_ClientPingSampleReply;
        case 16: return k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary;
        case 17: return k_ESteamDatagramMsg_RelayHealth;
        case 18: return k_ESteamDatagramMsg_ConnectRequest;
        case 19: return k_ESteamDatagramMsg_ConnectOK;
        case 20: return k_ESteamDatagramMsg_ConnectionClosed;
        case 21: return k_ESteamDatagramMsg_NoConnection;
        case 22: return k_ESteamDatagramMsg_RelayToRelayPingRequest;
        case 23: return k_ESteamDatagramMsg_RelayToRelayPingReply;
        case 24: return k_ESteamDatagramMsg_P2PSessionRequest;
        case 25: return k_ESteamDatagramMsg_P2PSessionEstablished;
        case 26: return k_ESteamDatagramMsg_P2PStatsClient;
        case 27: return k_ESteamDatagramMsg_P2PStatsRelay;
        case 28: return k_ESteamDatagramMsg_P2PBadRoute;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ESteamDatagramMsgID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ESteamDatagramMsgID> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ESteamDatagramMsgID>() {
            public ESteamDatagramMsgID findValueByNumber(int number) {
              return ESteamDatagramMsgID.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.getDescriptor().getEnumTypes().get(0);
    }

    private static final ESteamDatagramMsgID[] VALUES = values();

    public static ESteamDatagramMsgID valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ESteamDatagramMsgID(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ESteamDatagramMsgID)
  }

  public interface CMsgSteamDatagramRouterPingReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramRouterPingReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 client_timestamp = 1;</code>
     */
    boolean hasClientTimestamp();
    /**
     * <code>optional fixed32 client_timestamp = 1;</code>
     */
    int getClientTimestamp();

    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getLatencyDatacenterIdsList();
    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    int getLatencyDatacenterIdsCount();
    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    int getLatencyDatacenterIds(int index);

    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getLatencyPingMsList();
    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    int getLatencyPingMsCount();
    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    int getLatencyPingMs(int index);

    /**
     * <code>optional fixed32 your_public_ip = 4;</code>
     */
    boolean hasYourPublicIp();
    /**
     * <code>optional fixed32 your_public_ip = 4;</code>
     */
    int getYourPublicIp();

    /**
     * <code>optional fixed32 server_time = 5;</code>
     */
    boolean hasServerTime();
    /**
     * <code>optional fixed32 server_time = 5;</code>
     */
    int getServerTime();

    /**
     * <code>optional fixed64 challenge = 6;</code>
     */
    boolean hasChallenge();
    /**
     * <code>optional fixed64 challenge = 6;</code>
     */
    long getChallenge();

    /**
     * <code>optional uint32 seconds_until_shutdown = 7;</code>
     */
    boolean hasSecondsUntilShutdown();
    /**
     * <code>optional uint32 seconds_until_shutdown = 7;</code>
     */
    int getSecondsUntilShutdown();

    /**
     * <code>optional fixed32 client_cookie = 8;</code>
     */
    boolean hasClientCookie();
    /**
     * <code>optional fixed32 client_cookie = 8;</code>
     */
    int getClientCookie();

    /**
     * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
     */
    boolean hasScoringPenaltyRelayCluster();
    /**
     * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
     */
    int getScoringPenaltyRelayCluster();

    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> 
        getRouteExceptionsList();
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getRouteExceptions(int index);
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    int getRouteExceptionsCount();
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    java.util.List<? extends com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder> 
        getRouteExceptionsOrBuilderList();
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder getRouteExceptionsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramRouterPingReply}
   */
  public  static final class CMsgSteamDatagramRouterPingReply extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramRouterPingReply)
      CMsgSteamDatagramRouterPingReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramRouterPingReply.newBuilder() to construct.
    private CMsgSteamDatagramRouterPingReply(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramRouterPingReply() {
      clientTimestamp_ = 0;
      latencyDatacenterIds_ = java.util.Collections.emptyList();
      latencyPingMs_ = java.util.Collections.emptyList();
      yourPublicIp_ = 0;
      serverTime_ = 0;
      challenge_ = 0L;
      secondsUntilShutdown_ = 0;
      clientCookie_ = 0;
      scoringPenaltyRelayCluster_ = 0;
      routeExceptions_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramRouterPingReply(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              clientTimestamp_ = input.readFixed32();
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                latencyDatacenterIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              latencyDatacenterIds_.add(input.readFixed32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                latencyDatacenterIds_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                latencyDatacenterIds_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                latencyPingMs_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              latencyPingMs_.add(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                latencyPingMs_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                latencyPingMs_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 37: {
              bitField0_ |= 0x00000002;
              yourPublicIp_ = input.readFixed32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000004;
              serverTime_ = input.readFixed32();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000008;
              challenge_ = input.readFixed64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              secondsUntilShutdown_ = input.readUInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000020;
              clientCookie_ = input.readFixed32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              scoringPenaltyRelayCluster_ = input.readUInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                routeExceptions_ = new java.util.ArrayList<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException>();
                mutable_bitField0_ |= 0x00000200;
              }
              routeExceptions_.add(
                  input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.PARSER, extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          latencyDatacenterIds_ = java.util.Collections.unmodifiableList(latencyDatacenterIds_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          latencyPingMs_ = java.util.Collections.unmodifiableList(latencyPingMs_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          routeExceptions_ = java.util.Collections.unmodifiableList(routeExceptions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.Builder.class);
    }

    public interface RouteExceptionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramRouterPingReply.RouteException)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional fixed32 data_center_id = 1;</code>
       */
      boolean hasDataCenterId();
      /**
       * <code>optional fixed32 data_center_id = 1;</code>
       */
      int getDataCenterId();

      /**
       * <code>optional uint32 flags = 2;</code>
       */
      boolean hasFlags();
      /**
       * <code>optional uint32 flags = 2;</code>
       */
      int getFlags();

      /**
       * <code>optional uint32 penalty = 3;</code>
       */
      boolean hasPenalty();
      /**
       * <code>optional uint32 penalty = 3;</code>
       */
      int getPenalty();
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramRouterPingReply.RouteException}
     */
    public  static final class RouteException extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:CMsgSteamDatagramRouterPingReply.RouteException)
        RouteExceptionOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use RouteException.newBuilder() to construct.
      private RouteException(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private RouteException() {
        dataCenterId_ = 0;
        flags_ = 0;
        penalty_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private RouteException(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                bitField0_ |= 0x00000001;
                dataCenterId_ = input.readFixed32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                flags_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                penalty_ = input.readUInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_RouteException_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder.class);
      }

      private int bitField0_;
      public static final int DATA_CENTER_ID_FIELD_NUMBER = 1;
      private int dataCenterId_;
      /**
       * <code>optional fixed32 data_center_id = 1;</code>
       */
      public boolean hasDataCenterId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 data_center_id = 1;</code>
       */
      public int getDataCenterId() {
        return dataCenterId_;
      }

      public static final int FLAGS_FIELD_NUMBER = 2;
      private int flags_;
      /**
       * <code>optional uint32 flags = 2;</code>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 flags = 2;</code>
       */
      public int getFlags() {
        return flags_;
      }

      public static final int PENALTY_FIELD_NUMBER = 3;
      private int penalty_;
      /**
       * <code>optional uint32 penalty = 3;</code>
       */
      public boolean hasPenalty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 penalty = 3;</code>
       */
      public int getPenalty() {
        return penalty_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeFixed32(1, dataCenterId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, flags_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, penalty_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFixed32Size(1, dataCenterId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, flags_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, penalty_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException)) {
          return super.equals(obj);
        }
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException) obj;

        boolean result = true;
        result = result && (hasDataCenterId() == other.hasDataCenterId());
        if (hasDataCenterId()) {
          result = result && (getDataCenterId()
              == other.getDataCenterId());
        }
        result = result && (hasFlags() == other.hasFlags());
        if (hasFlags()) {
          result = result && (getFlags()
              == other.getFlags());
        }
        result = result && (hasPenalty() == other.hasPenalty());
        if (hasPenalty()) {
          result = result && (getPenalty()
              == other.getPenalty());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasDataCenterId()) {
          hash = (37 * hash) + DATA_CENTER_ID_FIELD_NUMBER;
          hash = (53 * hash) + getDataCenterId();
        }
        if (hasFlags()) {
          hash = (37 * hash) + FLAGS_FIELD_NUMBER;
          hash = (53 * hash) + getFlags();
        }
        if (hasPenalty()) {
          hash = (37 * hash) + PENALTY_FIELD_NUMBER;
          hash = (53 * hash) + getPenalty();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code CMsgSteamDatagramRouterPingReply.RouteException}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramRouterPingReply.RouteException)
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_RouteException_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder.class);
        }

        // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          dataCenterId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          flags_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          penalty_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor;
        }

        @java.lang.Override
        public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getDefaultInstanceForType() {
          return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.getDefaultInstance();
        }

        @java.lang.Override
        public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException build() {
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException buildPartial() {
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.dataCenterId_ = dataCenterId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.flags_ = flags_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.penalty_ = penalty_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return (Builder) super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException) {
            return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException other) {
          if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.getDefaultInstance()) return this;
          if (other.hasDataCenterId()) {
            setDataCenterId(other.getDataCenterId());
          }
          if (other.hasFlags()) {
            setFlags(other.getFlags());
          }
          if (other.hasPenalty()) {
            setPenalty(other.getPenalty());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int dataCenterId_ ;
        /**
         * <code>optional fixed32 data_center_id = 1;</code>
         */
        public boolean hasDataCenterId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional fixed32 data_center_id = 1;</code>
         */
        public int getDataCenterId() {
          return dataCenterId_;
        }
        /**
         * <code>optional fixed32 data_center_id = 1;</code>
         */
        public Builder setDataCenterId(int value) {
          bitField0_ |= 0x00000001;
          dataCenterId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional fixed32 data_center_id = 1;</code>
         */
        public Builder clearDataCenterId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          dataCenterId_ = 0;
          onChanged();
          return this;
        }

        private int flags_ ;
        /**
         * <code>optional uint32 flags = 2;</code>
         */
        public boolean hasFlags() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 flags = 2;</code>
         */
        public int getFlags() {
          return flags_;
        }
        /**
         * <code>optional uint32 flags = 2;</code>
         */
        public Builder setFlags(int value) {
          bitField0_ |= 0x00000002;
          flags_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 flags = 2;</code>
         */
        public Builder clearFlags() {
          bitField0_ = (bitField0_ & ~0x00000002);
          flags_ = 0;
          onChanged();
          return this;
        }

        private int penalty_ ;
        /**
         * <code>optional uint32 penalty = 3;</code>
         */
        public boolean hasPenalty() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional uint32 penalty = 3;</code>
         */
        public int getPenalty() {
          return penalty_;
        }
        /**
         * <code>optional uint32 penalty = 3;</code>
         */
        public Builder setPenalty(int value) {
          bitField0_ |= 0x00000004;
          penalty_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 penalty = 3;</code>
         */
        public Builder clearPenalty() {
          bitField0_ = (bitField0_ & ~0x00000004);
          penalty_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramRouterPingReply.RouteException)
      }

      // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterPingReply.RouteException)
      private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException();
      }

      public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<RouteException>
          PARSER = new com.google.protobuf.AbstractParser<RouteException>() {
        @java.lang.Override
        public RouteException parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RouteException(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<RouteException> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<RouteException> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int CLIENT_TIMESTAMP_FIELD_NUMBER = 1;
    private int clientTimestamp_;
    /**
     * <code>optional fixed32 client_timestamp = 1;</code>
     */
    public boolean hasClientTimestamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional fixed32 client_timestamp = 1;</code>
     */
    public int getClientTimestamp() {
      return clientTimestamp_;
    }

    public static final int LATENCY_DATACENTER_IDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> latencyDatacenterIds_;
    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getLatencyDatacenterIdsList() {
      return latencyDatacenterIds_;
    }
    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    public int getLatencyDatacenterIdsCount() {
      return latencyDatacenterIds_.size();
    }
    /**
     * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
     */
    public int getLatencyDatacenterIds(int index) {
      return latencyDatacenterIds_.get(index);
    }
    private int latencyDatacenterIdsMemoizedSerializedSize = -1;

    public static final int LATENCY_PING_MS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> latencyPingMs_;
    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getLatencyPingMsList() {
      return latencyPingMs_;
    }
    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    public int getLatencyPingMsCount() {
      return latencyPingMs_.size();
    }
    /**
     * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
     */
    public int getLatencyPingMs(int index) {
      return latencyPingMs_.get(index);
    }
    private int latencyPingMsMemoizedSerializedSize = -1;

    public static final int YOUR_PUBLIC_IP_FIELD_NUMBER = 4;
    private int yourPublicIp_;
    /**
     * <code>optional fixed32 your_public_ip = 4;</code>
     */
    public boolean hasYourPublicIp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional fixed32 your_public_ip = 4;</code>
     */
    public int getYourPublicIp() {
      return yourPublicIp_;
    }

    public static final int SERVER_TIME_FIELD_NUMBER = 5;
    private int serverTime_;
    /**
     * <code>optional fixed32 server_time = 5;</code>
     */
    public boolean hasServerTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed32 server_time = 5;</code>
     */
    public int getServerTime() {
      return serverTime_;
    }

    public static final int CHALLENGE_FIELD_NUMBER = 6;
    private long challenge_;
    /**
     * <code>optional fixed64 challenge = 6;</code>
     */
    public boolean hasChallenge() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional fixed64 challenge = 6;</code>
     */
    public long getChallenge() {
      return challenge_;
    }

    public static final int SECONDS_UNTIL_SHUTDOWN_FIELD_NUMBER = 7;
    private int secondsUntilShutdown_;
    /**
     * <code>optional uint32 seconds_until_shutdown = 7;</code>
     */
    public boolean hasSecondsUntilShutdown() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 seconds_until_shutdown = 7;</code>
     */
    public int getSecondsUntilShutdown() {
      return secondsUntilShutdown_;
    }

    public static final int CLIENT_COOKIE_FIELD_NUMBER = 8;
    private int clientCookie_;
    /**
     * <code>optional fixed32 client_cookie = 8;</code>
     */
    public boolean hasClientCookie() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional fixed32 client_cookie = 8;</code>
     */
    public int getClientCookie() {
      return clientCookie_;
    }

    public static final int SCORING_PENALTY_RELAY_CLUSTER_FIELD_NUMBER = 9;
    private int scoringPenaltyRelayCluster_;
    /**
     * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
     */
    public boolean hasScoringPenaltyRelayCluster() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
     */
    public int getScoringPenaltyRelayCluster() {
      return scoringPenaltyRelayCluster_;
    }

    public static final int ROUTE_EXCEPTIONS_FIELD_NUMBER = 10;
    private java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> routeExceptions_;
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    public java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> getRouteExceptionsList() {
      return routeExceptions_;
    }
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    public java.util.List<? extends com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder> 
        getRouteExceptionsOrBuilderList() {
      return routeExceptions_;
    }
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    public int getRouteExceptionsCount() {
      return routeExceptions_.size();
    }
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getRouteExceptions(int index) {
      return routeExceptions_.get(index);
    }
    /**
     * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder getRouteExceptionsOrBuilder(
        int index) {
      return routeExceptions_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, clientTimestamp_);
      }
      if (getLatencyDatacenterIdsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(latencyDatacenterIdsMemoizedSerializedSize);
      }
      for (int i = 0; i < latencyDatacenterIds_.size(); i++) {
        output.writeFixed32NoTag(latencyDatacenterIds_.get(i));
      }
      if (getLatencyPingMsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(latencyPingMsMemoizedSerializedSize);
      }
      for (int i = 0; i < latencyPingMs_.size(); i++) {
        output.writeUInt32NoTag(latencyPingMs_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed32(4, yourPublicIp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed32(5, serverTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed64(6, challenge_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(7, secondsUntilShutdown_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFixed32(8, clientCookie_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(9, scoringPenaltyRelayCluster_);
      }
      for (int i = 0; i < routeExceptions_.size(); i++) {
        output.writeMessage(10, routeExceptions_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, clientTimestamp_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getLatencyDatacenterIdsList().size();
        size += dataSize;
        if (!getLatencyDatacenterIdsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        latencyDatacenterIdsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < latencyPingMs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(latencyPingMs_.get(i));
        }
        size += dataSize;
        if (!getLatencyPingMsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        latencyPingMsMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, yourPublicIp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, serverTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(6, challenge_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, secondsUntilShutdown_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(8, clientCookie_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, scoringPenaltyRelayCluster_);
      }
      for (int i = 0; i < routeExceptions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, routeExceptions_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply) obj;

      boolean result = true;
      result = result && (hasClientTimestamp() == other.hasClientTimestamp());
      if (hasClientTimestamp()) {
        result = result && (getClientTimestamp()
            == other.getClientTimestamp());
      }
      result = result && getLatencyDatacenterIdsList()
          .equals(other.getLatencyDatacenterIdsList());
      result = result && getLatencyPingMsList()
          .equals(other.getLatencyPingMsList());
      result = result && (hasYourPublicIp() == other.hasYourPublicIp());
      if (hasYourPublicIp()) {
        result = result && (getYourPublicIp()
            == other.getYourPublicIp());
      }
      result = result && (hasServerTime() == other.hasServerTime());
      if (hasServerTime()) {
        result = result && (getServerTime()
            == other.getServerTime());
      }
      result = result && (hasChallenge() == other.hasChallenge());
      if (hasChallenge()) {
        result = result && (getChallenge()
            == other.getChallenge());
      }
      result = result && (hasSecondsUntilShutdown() == other.hasSecondsUntilShutdown());
      if (hasSecondsUntilShutdown()) {
        result = result && (getSecondsUntilShutdown()
            == other.getSecondsUntilShutdown());
      }
      result = result && (hasClientCookie() == other.hasClientCookie());
      if (hasClientCookie()) {
        result = result && (getClientCookie()
            == other.getClientCookie());
      }
      result = result && (hasScoringPenaltyRelayCluster() == other.hasScoringPenaltyRelayCluster());
      if (hasScoringPenaltyRelayCluster()) {
        result = result && (getScoringPenaltyRelayCluster()
            == other.getScoringPenaltyRelayCluster());
      }
      result = result && getRouteExceptionsList()
          .equals(other.getRouteExceptionsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClientTimestamp()) {
        hash = (37 * hash) + CLIENT_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getClientTimestamp();
      }
      if (getLatencyDatacenterIdsCount() > 0) {
        hash = (37 * hash) + LATENCY_DATACENTER_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getLatencyDatacenterIdsList().hashCode();
      }
      if (getLatencyPingMsCount() > 0) {
        hash = (37 * hash) + LATENCY_PING_MS_FIELD_NUMBER;
        hash = (53 * hash) + getLatencyPingMsList().hashCode();
      }
      if (hasYourPublicIp()) {
        hash = (37 * hash) + YOUR_PUBLIC_IP_FIELD_NUMBER;
        hash = (53 * hash) + getYourPublicIp();
      }
      if (hasServerTime()) {
        hash = (37 * hash) + SERVER_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getServerTime();
      }
      if (hasChallenge()) {
        hash = (37 * hash) + CHALLENGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChallenge());
      }
      if (hasSecondsUntilShutdown()) {
        hash = (37 * hash) + SECONDS_UNTIL_SHUTDOWN_FIELD_NUMBER;
        hash = (53 * hash) + getSecondsUntilShutdown();
      }
      if (hasClientCookie()) {
        hash = (37 * hash) + CLIENT_COOKIE_FIELD_NUMBER;
        hash = (53 * hash) + getClientCookie();
      }
      if (hasScoringPenaltyRelayCluster()) {
        hash = (37 * hash) + SCORING_PENALTY_RELAY_CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getScoringPenaltyRelayCluster();
      }
      if (getRouteExceptionsCount() > 0) {
        hash = (37 * hash) + ROUTE_EXCEPTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getRouteExceptionsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramRouterPingReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramRouterPingReply)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRouteExceptionsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        clientTimestamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        latencyDatacenterIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        latencyPingMs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        yourPublicIp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        serverTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        challenge_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        secondsUntilShutdown_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        clientCookie_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        scoringPenaltyRelayCluster_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        if (routeExceptionsBuilder_ == null) {
          routeExceptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          routeExceptionsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramRouterPingReply_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.clientTimestamp_ = clientTimestamp_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          latencyDatacenterIds_ = java.util.Collections.unmodifiableList(latencyDatacenterIds_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.latencyDatacenterIds_ = latencyDatacenterIds_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          latencyPingMs_ = java.util.Collections.unmodifiableList(latencyPingMs_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.latencyPingMs_ = latencyPingMs_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.yourPublicIp_ = yourPublicIp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.serverTime_ = serverTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.challenge_ = challenge_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.secondsUntilShutdown_ = secondsUntilShutdown_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.clientCookie_ = clientCookie_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.scoringPenaltyRelayCluster_ = scoringPenaltyRelayCluster_;
        if (routeExceptionsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            routeExceptions_ = java.util.Collections.unmodifiableList(routeExceptions_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.routeExceptions_ = routeExceptions_;
        } else {
          result.routeExceptions_ = routeExceptionsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.getDefaultInstance()) return this;
        if (other.hasClientTimestamp()) {
          setClientTimestamp(other.getClientTimestamp());
        }
        if (!other.latencyDatacenterIds_.isEmpty()) {
          if (latencyDatacenterIds_.isEmpty()) {
            latencyDatacenterIds_ = other.latencyDatacenterIds_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLatencyDatacenterIdsIsMutable();
            latencyDatacenterIds_.addAll(other.latencyDatacenterIds_);
          }
          onChanged();
        }
        if (!other.latencyPingMs_.isEmpty()) {
          if (latencyPingMs_.isEmpty()) {
            latencyPingMs_ = other.latencyPingMs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLatencyPingMsIsMutable();
            latencyPingMs_.addAll(other.latencyPingMs_);
          }
          onChanged();
        }
        if (other.hasYourPublicIp()) {
          setYourPublicIp(other.getYourPublicIp());
        }
        if (other.hasServerTime()) {
          setServerTime(other.getServerTime());
        }
        if (other.hasChallenge()) {
          setChallenge(other.getChallenge());
        }
        if (other.hasSecondsUntilShutdown()) {
          setSecondsUntilShutdown(other.getSecondsUntilShutdown());
        }
        if (other.hasClientCookie()) {
          setClientCookie(other.getClientCookie());
        }
        if (other.hasScoringPenaltyRelayCluster()) {
          setScoringPenaltyRelayCluster(other.getScoringPenaltyRelayCluster());
        }
        if (routeExceptionsBuilder_ == null) {
          if (!other.routeExceptions_.isEmpty()) {
            if (routeExceptions_.isEmpty()) {
              routeExceptions_ = other.routeExceptions_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureRouteExceptionsIsMutable();
              routeExceptions_.addAll(other.routeExceptions_);
            }
            onChanged();
          }
        } else {
          if (!other.routeExceptions_.isEmpty()) {
            if (routeExceptionsBuilder_.isEmpty()) {
              routeExceptionsBuilder_.dispose();
              routeExceptionsBuilder_ = null;
              routeExceptions_ = other.routeExceptions_;
              bitField0_ = (bitField0_ & ~0x00000200);
              routeExceptionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRouteExceptionsFieldBuilder() : null;
            } else {
              routeExceptionsBuilder_.addAllMessages(other.routeExceptions_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int clientTimestamp_ ;
      /**
       * <code>optional fixed32 client_timestamp = 1;</code>
       */
      public boolean hasClientTimestamp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional fixed32 client_timestamp = 1;</code>
       */
      public int getClientTimestamp() {
        return clientTimestamp_;
      }
      /**
       * <code>optional fixed32 client_timestamp = 1;</code>
       */
      public Builder setClientTimestamp(int value) {
        bitField0_ |= 0x00000001;
        clientTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_timestamp = 1;</code>
       */
      public Builder clearClientTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientTimestamp_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> latencyDatacenterIds_ = java.util.Collections.emptyList();
      private void ensureLatencyDatacenterIdsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          latencyDatacenterIds_ = new java.util.ArrayList<java.lang.Integer>(latencyDatacenterIds_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getLatencyDatacenterIdsList() {
        return java.util.Collections.unmodifiableList(latencyDatacenterIds_);
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public int getLatencyDatacenterIdsCount() {
        return latencyDatacenterIds_.size();
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public int getLatencyDatacenterIds(int index) {
        return latencyDatacenterIds_.get(index);
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public Builder setLatencyDatacenterIds(
          int index, int value) {
        ensureLatencyDatacenterIdsIsMutable();
        latencyDatacenterIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public Builder addLatencyDatacenterIds(int value) {
        ensureLatencyDatacenterIdsIsMutable();
        latencyDatacenterIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public Builder addAllLatencyDatacenterIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLatencyDatacenterIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, latencyDatacenterIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 latency_datacenter_ids = 2 [packed = true];</code>
       */
      public Builder clearLatencyDatacenterIds() {
        latencyDatacenterIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> latencyPingMs_ = java.util.Collections.emptyList();
      private void ensureLatencyPingMsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          latencyPingMs_ = new java.util.ArrayList<java.lang.Integer>(latencyPingMs_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getLatencyPingMsList() {
        return java.util.Collections.unmodifiableList(latencyPingMs_);
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public int getLatencyPingMsCount() {
        return latencyPingMs_.size();
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public int getLatencyPingMs(int index) {
        return latencyPingMs_.get(index);
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public Builder setLatencyPingMs(
          int index, int value) {
        ensureLatencyPingMsIsMutable();
        latencyPingMs_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public Builder addLatencyPingMs(int value) {
        ensureLatencyPingMsIsMutable();
        latencyPingMs_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public Builder addAllLatencyPingMs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLatencyPingMsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, latencyPingMs_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 latency_ping_ms = 3 [packed = true];</code>
       */
      public Builder clearLatencyPingMs() {
        latencyPingMs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int yourPublicIp_ ;
      /**
       * <code>optional fixed32 your_public_ip = 4;</code>
       */
      public boolean hasYourPublicIp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional fixed32 your_public_ip = 4;</code>
       */
      public int getYourPublicIp() {
        return yourPublicIp_;
      }
      /**
       * <code>optional fixed32 your_public_ip = 4;</code>
       */
      public Builder setYourPublicIp(int value) {
        bitField0_ |= 0x00000008;
        yourPublicIp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 your_public_ip = 4;</code>
       */
      public Builder clearYourPublicIp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        yourPublicIp_ = 0;
        onChanged();
        return this;
      }

      private int serverTime_ ;
      /**
       * <code>optional fixed32 server_time = 5;</code>
       */
      public boolean hasServerTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional fixed32 server_time = 5;</code>
       */
      public int getServerTime() {
        return serverTime_;
      }
      /**
       * <code>optional fixed32 server_time = 5;</code>
       */
      public Builder setServerTime(int value) {
        bitField0_ |= 0x00000010;
        serverTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 server_time = 5;</code>
       */
      public Builder clearServerTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        serverTime_ = 0;
        onChanged();
        return this;
      }

      private long challenge_ ;
      /**
       * <code>optional fixed64 challenge = 6;</code>
       */
      public boolean hasChallenge() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional fixed64 challenge = 6;</code>
       */
      public long getChallenge() {
        return challenge_;
      }
      /**
       * <code>optional fixed64 challenge = 6;</code>
       */
      public Builder setChallenge(long value) {
        bitField0_ |= 0x00000020;
        challenge_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 challenge = 6;</code>
       */
      public Builder clearChallenge() {
        bitField0_ = (bitField0_ & ~0x00000020);
        challenge_ = 0L;
        onChanged();
        return this;
      }

      private int secondsUntilShutdown_ ;
      /**
       * <code>optional uint32 seconds_until_shutdown = 7;</code>
       */
      public boolean hasSecondsUntilShutdown() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 seconds_until_shutdown = 7;</code>
       */
      public int getSecondsUntilShutdown() {
        return secondsUntilShutdown_;
      }
      /**
       * <code>optional uint32 seconds_until_shutdown = 7;</code>
       */
      public Builder setSecondsUntilShutdown(int value) {
        bitField0_ |= 0x00000040;
        secondsUntilShutdown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 seconds_until_shutdown = 7;</code>
       */
      public Builder clearSecondsUntilShutdown() {
        bitField0_ = (bitField0_ & ~0x00000040);
        secondsUntilShutdown_ = 0;
        onChanged();
        return this;
      }

      private int clientCookie_ ;
      /**
       * <code>optional fixed32 client_cookie = 8;</code>
       */
      public boolean hasClientCookie() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional fixed32 client_cookie = 8;</code>
       */
      public int getClientCookie() {
        return clientCookie_;
      }
      /**
       * <code>optional fixed32 client_cookie = 8;</code>
       */
      public Builder setClientCookie(int value) {
        bitField0_ |= 0x00000080;
        clientCookie_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_cookie = 8;</code>
       */
      public Builder clearClientCookie() {
        bitField0_ = (bitField0_ & ~0x00000080);
        clientCookie_ = 0;
        onChanged();
        return this;
      }

      private int scoringPenaltyRelayCluster_ ;
      /**
       * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
       */
      public boolean hasScoringPenaltyRelayCluster() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
       */
      public int getScoringPenaltyRelayCluster() {
        return scoringPenaltyRelayCluster_;
      }
      /**
       * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
       */
      public Builder setScoringPenaltyRelayCluster(int value) {
        bitField0_ |= 0x00000100;
        scoringPenaltyRelayCluster_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 scoring_penalty_relay_cluster = 9;</code>
       */
      public Builder clearScoringPenaltyRelayCluster() {
        bitField0_ = (bitField0_ & ~0x00000100);
        scoringPenaltyRelayCluster_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> routeExceptions_ =
        java.util.Collections.emptyList();
      private void ensureRouteExceptionsIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          routeExceptions_ = new java.util.ArrayList<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException>(routeExceptions_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder> routeExceptionsBuilder_;

      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> getRouteExceptionsList() {
        if (routeExceptionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(routeExceptions_);
        } else {
          return routeExceptionsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public int getRouteExceptionsCount() {
        if (routeExceptionsBuilder_ == null) {
          return routeExceptions_.size();
        } else {
          return routeExceptionsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException getRouteExceptions(int index) {
        if (routeExceptionsBuilder_ == null) {
          return routeExceptions_.get(index);
        } else {
          return routeExceptionsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder setRouteExceptions(
          int index, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException value) {
        if (routeExceptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRouteExceptionsIsMutable();
          routeExceptions_.set(index, value);
          onChanged();
        } else {
          routeExceptionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder setRouteExceptions(
          int index, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder builderForValue) {
        if (routeExceptionsBuilder_ == null) {
          ensureRouteExceptionsIsMutable();
          routeExceptions_.set(index, builderForValue.build());
          onChanged();
        } else {
          routeExceptionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder addRouteExceptions(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException value) {
        if (routeExceptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRouteExceptionsIsMutable();
          routeExceptions_.add(value);
          onChanged();
        } else {
          routeExceptionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder addRouteExceptions(
          int index, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException value) {
        if (routeExceptionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRouteExceptionsIsMutable();
          routeExceptions_.add(index, value);
          onChanged();
        } else {
          routeExceptionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder addRouteExceptions(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder builderForValue) {
        if (routeExceptionsBuilder_ == null) {
          ensureRouteExceptionsIsMutable();
          routeExceptions_.add(builderForValue.build());
          onChanged();
        } else {
          routeExceptionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder addRouteExceptions(
          int index, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder builderForValue) {
        if (routeExceptionsBuilder_ == null) {
          ensureRouteExceptionsIsMutable();
          routeExceptions_.add(index, builderForValue.build());
          onChanged();
        } else {
          routeExceptionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder addAllRouteExceptions(
          java.lang.Iterable<? extends com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException> values) {
        if (routeExceptionsBuilder_ == null) {
          ensureRouteExceptionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, routeExceptions_);
          onChanged();
        } else {
          routeExceptionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder clearRouteExceptions() {
        if (routeExceptionsBuilder_ == null) {
          routeExceptions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          routeExceptionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public Builder removeRouteExceptions(int index) {
        if (routeExceptionsBuilder_ == null) {
          ensureRouteExceptionsIsMutable();
          routeExceptions_.remove(index);
          onChanged();
        } else {
          routeExceptionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder getRouteExceptionsBuilder(
          int index) {
        return getRouteExceptionsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder getRouteExceptionsOrBuilder(
          int index) {
        if (routeExceptionsBuilder_ == null) {
          return routeExceptions_.get(index);  } else {
          return routeExceptionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public java.util.List<? extends com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder> 
           getRouteExceptionsOrBuilderList() {
        if (routeExceptionsBuilder_ != null) {
          return routeExceptionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(routeExceptions_);
        }
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder addRouteExceptionsBuilder() {
        return getRouteExceptionsFieldBuilder().addBuilder(
            com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.getDefaultInstance());
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder addRouteExceptionsBuilder(
          int index) {
        return getRouteExceptionsFieldBuilder().addBuilder(
            index, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.getDefaultInstance());
      }
      /**
       * <code>repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;</code>
       */
      public java.util.List<com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder> 
           getRouteExceptionsBuilderList() {
        return getRouteExceptionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder> 
          getRouteExceptionsFieldBuilder() {
        if (routeExceptionsBuilder_ == null) {
          routeExceptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteException.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply.RouteExceptionOrBuilder>(
                  routeExceptions_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          routeExceptions_ = null;
        }
        return routeExceptionsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramRouterPingReply)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterPingReply)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramRouterPingReply>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramRouterPingReply>() {
      @java.lang.Override
      public CMsgSteamDatagramRouterPingReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramRouterPingReply(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramRouterPingReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramRouterPingReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramRouterPingReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramSessionCryptInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramSessionCryptInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
     */
    boolean hasKeyType();
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType getKeyType();

    /**
     * <code>optional bytes key_data = 2;</code>
     */
    boolean hasKeyData();
    /**
     * <code>optional bytes key_data = 2;</code>
     */
    com.google.protobuf.ByteString getKeyData();

    /**
     * <code>optional fixed64 nonce = 3;</code>
     */
    boolean hasNonce();
    /**
     * <code>optional fixed64 nonce = 3;</code>
     */
    long getNonce();

    /**
     * <code>optional bool is_snp = 4;</code>
     */
    boolean hasIsSnp();
    /**
     * <code>optional bool is_snp = 4;</code>
     */
    boolean getIsSnp();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramSessionCryptInfo}
   */
  public  static final class CMsgSteamDatagramSessionCryptInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramSessionCryptInfo)
      CMsgSteamDatagramSessionCryptInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramSessionCryptInfo.newBuilder() to construct.
    private CMsgSteamDatagramSessionCryptInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramSessionCryptInfo() {
      keyType_ = 0;
      keyData_ = com.google.protobuf.ByteString.EMPTY;
      nonce_ = 0L;
      isSnp_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramSessionCryptInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType value = com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                keyType_ = rawValue;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              keyData_ = input.readBytes();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              nonce_ = input.readFixed64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              isSnp_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.Builder.class);
    }

    /**
     * Protobuf enum {@code CMsgSteamDatagramSessionCryptInfo.EKeyType}
     */
    public enum EKeyType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INVALID = 0;</code>
       */
      INVALID(0),
      /**
       * <code>CURVE25519 = 1;</code>
       */
      CURVE25519(1),
      ;

      /**
       * <code>INVALID = 0;</code>
       */
      public static final int INVALID_VALUE = 0;
      /**
       * <code>CURVE25519 = 1;</code>
       */
      public static final int CURVE25519_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EKeyType valueOf(int value) {
        return forNumber(value);
      }

      public static EKeyType forNumber(int value) {
        switch (value) {
          case 0: return INVALID;
          case 1: return CURVE25519;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EKeyType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          EKeyType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EKeyType>() {
              public EKeyType findValueByNumber(int number) {
                return EKeyType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final EKeyType[] VALUES = values();

      public static EKeyType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private EKeyType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:CMsgSteamDatagramSessionCryptInfo.EKeyType)
    }

    private int bitField0_;
    public static final int KEY_TYPE_FIELD_NUMBER = 1;
    private int keyType_;
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
     */
    public boolean hasKeyType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType getKeyType() {
      @SuppressWarnings("deprecation")
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType result = com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType.valueOf(keyType_);
      return result == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType.INVALID : result;
    }

    public static final int KEY_DATA_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString keyData_;
    /**
     * <code>optional bytes key_data = 2;</code>
     */
    public boolean hasKeyData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes key_data = 2;</code>
     */
    public com.google.protobuf.ByteString getKeyData() {
      return keyData_;
    }

    public static final int NONCE_FIELD_NUMBER = 3;
    private long nonce_;
    /**
     * <code>optional fixed64 nonce = 3;</code>
     */
    public boolean hasNonce() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed64 nonce = 3;</code>
     */
    public long getNonce() {
      return nonce_;
    }

    public static final int IS_SNP_FIELD_NUMBER = 4;
    private boolean isSnp_;
    /**
     * <code>optional bool is_snp = 4;</code>
     */
    public boolean hasIsSnp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool is_snp = 4;</code>
     */
    public boolean getIsSnp() {
      return isSnp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, keyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, keyData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed64(3, nonce_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isSnp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, keyType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, keyData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, nonce_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isSnp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo) obj;

      boolean result = true;
      result = result && (hasKeyType() == other.hasKeyType());
      if (hasKeyType()) {
        result = result && keyType_ == other.keyType_;
      }
      result = result && (hasKeyData() == other.hasKeyData());
      if (hasKeyData()) {
        result = result && getKeyData()
            .equals(other.getKeyData());
      }
      result = result && (hasNonce() == other.hasNonce());
      if (hasNonce()) {
        result = result && (getNonce()
            == other.getNonce());
      }
      result = result && (hasIsSnp() == other.hasIsSnp());
      if (hasIsSnp()) {
        result = result && (getIsSnp()
            == other.getIsSnp());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKeyType()) {
        hash = (37 * hash) + KEY_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + keyType_;
      }
      if (hasKeyData()) {
        hash = (37 * hash) + KEY_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getKeyData().hashCode();
      }
      if (hasNonce()) {
        hash = (37 * hash) + NONCE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getNonce());
      }
      if (hasIsSnp()) {
        hash = (37 * hash) + IS_SNP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsSnp());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramSessionCryptInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramSessionCryptInfo)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        keyType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        keyData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        nonce_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        isSnp_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.keyType_ = keyType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.keyData_ = keyData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.nonce_ = nonce_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.isSnp_ = isSnp_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.getDefaultInstance()) return this;
        if (other.hasKeyType()) {
          setKeyType(other.getKeyType());
        }
        if (other.hasKeyData()) {
          setKeyData(other.getKeyData());
        }
        if (other.hasNonce()) {
          setNonce(other.getNonce());
        }
        if (other.hasIsSnp()) {
          setIsSnp(other.getIsSnp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int keyType_ = 0;
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
       */
      public boolean hasKeyType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType getKeyType() {
        @SuppressWarnings("deprecation")
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType result = com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType.valueOf(keyType_);
        return result == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType.INVALID : result;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
       */
      public Builder setKeyType(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo.EKeyType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        keyType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];</code>
       */
      public Builder clearKeyType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        keyType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString keyData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes key_data = 2;</code>
       */
      public boolean hasKeyData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes key_data = 2;</code>
       */
      public com.google.protobuf.ByteString getKeyData() {
        return keyData_;
      }
      /**
       * <code>optional bytes key_data = 2;</code>
       */
      public Builder setKeyData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        keyData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes key_data = 2;</code>
       */
      public Builder clearKeyData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        keyData_ = getDefaultInstance().getKeyData();
        onChanged();
        return this;
      }

      private long nonce_ ;
      /**
       * <code>optional fixed64 nonce = 3;</code>
       */
      public boolean hasNonce() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed64 nonce = 3;</code>
       */
      public long getNonce() {
        return nonce_;
      }
      /**
       * <code>optional fixed64 nonce = 3;</code>
       */
      public Builder setNonce(long value) {
        bitField0_ |= 0x00000004;
        nonce_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 nonce = 3;</code>
       */
      public Builder clearNonce() {
        bitField0_ = (bitField0_ & ~0x00000004);
        nonce_ = 0L;
        onChanged();
        return this;
      }

      private boolean isSnp_ ;
      /**
       * <code>optional bool is_snp = 4;</code>
       */
      public boolean hasIsSnp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool is_snp = 4;</code>
       */
      public boolean getIsSnp() {
        return isSnp_;
      }
      /**
       * <code>optional bool is_snp = 4;</code>
       */
      public Builder setIsSnp(boolean value) {
        bitField0_ |= 0x00000008;
        isSnp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_snp = 4;</code>
       */
      public Builder clearIsSnp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isSnp_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramSessionCryptInfo)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfo)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfo>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramSessionCryptInfo>() {
      @java.lang.Override
      public CMsgSteamDatagramSessionCryptInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramSessionCryptInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramSessionCryptInfoSignedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramSessionCryptInfoSigned)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bytes info = 1;</code>
     */
    boolean hasInfo();
    /**
     * <code>optional bytes info = 1;</code>
     */
    com.google.protobuf.ByteString getInfo();

    /**
     * <code>optional bytes signature = 2;</code>
     */
    boolean hasSignature();
    /**
     * <code>optional bytes signature = 2;</code>
     */
    com.google.protobuf.ByteString getSignature();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramSessionCryptInfoSigned}
   */
  public  static final class CMsgSteamDatagramSessionCryptInfoSigned extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramSessionCryptInfoSigned)
      CMsgSteamDatagramSessionCryptInfoSignedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramSessionCryptInfoSigned.newBuilder() to construct.
    private CMsgSteamDatagramSessionCryptInfoSigned(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramSessionCryptInfoSigned() {
      info_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramSessionCryptInfoSigned(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              bitField0_ |= 0x00000001;
              info_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              signature_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfoSigned_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder.class);
    }

    private int bitField0_;
    public static final int INFO_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString info_;
    /**
     * <code>optional bytes info = 1;</code>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes info = 1;</code>
     */
    public com.google.protobuf.ByteString getInfo() {
      return info_;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString signature_;
    /**
     * <code>optional bytes signature = 2;</code>
     */
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes signature = 2;</code>
     */
    public com.google.protobuf.ByteString getSignature() {
      return signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, signature_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, signature_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned) obj;

      boolean result = true;
      result = result && (hasInfo() == other.hasInfo());
      if (hasInfo()) {
        result = result && getInfo()
            .equals(other.getInfo());
      }
      result = result && (hasSignature() == other.hasSignature());
      if (hasSignature()) {
        result = result && getSignature()
            .equals(other.getSignature());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInfo()) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfo().hashCode();
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramSessionCryptInfoSigned}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramSessionCryptInfoSigned)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfoSigned_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        info_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        signature_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.info_ = info_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.signature_ = signature_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance()) return this;
        if (other.hasInfo()) {
          setInfo(other.getInfo());
        }
        if (other.hasSignature()) {
          setSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString info_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes info = 1;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes info = 1;</code>
       */
      public com.google.protobuf.ByteString getInfo() {
        return info_;
      }
      /**
       * <code>optional bytes info = 1;</code>
       */
      public Builder setInfo(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        info_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes info = 1;</code>
       */
      public Builder clearInfo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        info_ = getDefaultInstance().getInfo();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString signature_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes signature = 2;</code>
       */
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes signature = 2;</code>
       */
      public com.google.protobuf.ByteString getSignature() {
        return signature_;
      }
      /**
       * <code>optional bytes signature = 2;</code>
       */
      public Builder setSignature(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        signature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes signature = 2;</code>
       */
      public Builder clearSignature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        signature_ = getDefaultInstance().getSignature();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramSessionCryptInfoSigned)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfoSigned)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfoSigned>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramSessionCryptInfoSigned>() {
      @java.lang.Override
      public CMsgSteamDatagramSessionCryptInfoSigned parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramSessionCryptInfoSigned(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfoSigned> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramSessionCryptInfoSigned> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramSessionCryptInfoSigned getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramDiagnosticOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramDiagnostic)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 severity = 1;</code>
     */
    boolean hasSeverity();
    /**
     * <code>optional uint32 severity = 1;</code>
     */
    int getSeverity();

    /**
     * <code>optional string text = 2;</code>
     */
    boolean hasText();
    /**
     * <code>optional string text = 2;</code>
     */
    java.lang.String getText();
    /**
     * <code>optional string text = 2;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramDiagnostic}
   */
  public  static final class CMsgSteamDatagramDiagnostic extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramDiagnostic)
      CMsgSteamDatagramDiagnosticOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramDiagnostic.newBuilder() to construct.
    private CMsgSteamDatagramDiagnostic(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramDiagnostic() {
      severity_ = 0;
      text_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramDiagnostic(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              severity_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              text_ = bs;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramDiagnostic_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramDiagnostic_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.Builder.class);
    }

    private int bitField0_;
    public static final int SEVERITY_FIELD_NUMBER = 1;
    private int severity_;
    /**
     * <code>optional uint32 severity = 1;</code>
     */
    public boolean hasSeverity() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 severity = 1;</code>
     */
    public int getSeverity() {
      return severity_;
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private volatile java.lang.Object text_;
    /**
     * <code>optional string text = 2;</code>
     */
    public boolean hasText() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string text = 2;</code>
     */
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          text_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string text = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, severity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, text_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, severity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, text_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic) obj;

      boolean result = true;
      result = result && (hasSeverity() == other.hasSeverity());
      if (hasSeverity()) {
        result = result && (getSeverity()
            == other.getSeverity());
      }
      result = result && (hasText() == other.hasText());
      if (hasText()) {
        result = result && getText()
            .equals(other.getText());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSeverity()) {
        hash = (37 * hash) + SEVERITY_FIELD_NUMBER;
        hash = (53 * hash) + getSeverity();
      }
      if (hasText()) {
        hash = (37 * hash) + TEXT_FIELD_NUMBER;
        hash = (53 * hash) + getText().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramDiagnostic}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramDiagnostic)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnosticOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramDiagnostic_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramDiagnostic_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        severity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        text_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramDiagnostic_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.severity_ = severity_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.text_ = text_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic.getDefaultInstance()) return this;
        if (other.hasSeverity()) {
          setSeverity(other.getSeverity());
        }
        if (other.hasText()) {
          bitField0_ |= 0x00000002;
          text_ = other.text_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int severity_ ;
      /**
       * <code>optional uint32 severity = 1;</code>
       */
      public boolean hasSeverity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 severity = 1;</code>
       */
      public int getSeverity() {
        return severity_;
      }
      /**
       * <code>optional uint32 severity = 1;</code>
       */
      public Builder setSeverity(int value) {
        bitField0_ |= 0x00000001;
        severity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 severity = 1;</code>
       */
      public Builder clearSeverity() {
        bitField0_ = (bitField0_ & ~0x00000001);
        severity_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object text_ = "";
      /**
       * <code>optional string text = 2;</code>
       */
      public boolean hasText() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string text = 2;</code>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            text_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string text = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string text = 2;</code>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        text_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 2;</code>
       */
      public Builder clearText() {
        bitField0_ = (bitField0_ & ~0x00000002);
        text_ = getDefaultInstance().getText();
        onChanged();
        return this;
      }
      /**
       * <code>optional string text = 2;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        text_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramDiagnostic)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDiagnostic)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramDiagnostic>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramDiagnostic>() {
      @java.lang.Override
      public CMsgSteamDatagramDiagnostic parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramDiagnostic(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramDiagnostic> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramDiagnostic> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramDiagnostic getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramLinkInstantaneousStatsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramLinkInstantaneousStats)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
     */
    boolean hasOutPacketsPerSecX10();
    /**
     * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
     */
    int getOutPacketsPerSecX10();

    /**
     * <code>optional uint32 out_bytes_per_sec = 2;</code>
     */
    boolean hasOutBytesPerSec();
    /**
     * <code>optional uint32 out_bytes_per_sec = 2;</code>
     */
    int getOutBytesPerSec();

    /**
     * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
     */
    boolean hasInPacketsPerSecX10();
    /**
     * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
     */
    int getInPacketsPerSecX10();

    /**
     * <code>optional uint32 in_bytes_per_sec = 4;</code>
     */
    boolean hasInBytesPerSec();
    /**
     * <code>optional uint32 in_bytes_per_sec = 4;</code>
     */
    int getInBytesPerSec();

    /**
     * <code>optional uint32 ping_ms = 5;</code>
     */
    boolean hasPingMs();
    /**
     * <code>optional uint32 ping_ms = 5;</code>
     */
    int getPingMs();

    /**
     * <code>optional uint32 packets_dropped_pct = 6;</code>
     */
    boolean hasPacketsDroppedPct();
    /**
     * <code>optional uint32 packets_dropped_pct = 6;</code>
     */
    int getPacketsDroppedPct();

    /**
     * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
     */
    boolean hasPacketsWeirdSequencePct();
    /**
     * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
     */
    int getPacketsWeirdSequencePct();

    /**
     * <code>optional uint32 peak_jitter_usec = 8;</code>
     */
    boolean hasPeakJitterUsec();
    /**
     * <code>optional uint32 peak_jitter_usec = 8;</code>
     */
    int getPeakJitterUsec();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramLinkInstantaneousStats}
   */
  public  static final class CMsgSteamDatagramLinkInstantaneousStats extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramLinkInstantaneousStats)
      CMsgSteamDatagramLinkInstantaneousStatsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramLinkInstantaneousStats.newBuilder() to construct.
    private CMsgSteamDatagramLinkInstantaneousStats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramLinkInstantaneousStats() {
      outPacketsPerSecX10_ = 0;
      outBytesPerSec_ = 0;
      inPacketsPerSecX10_ = 0;
      inBytesPerSec_ = 0;
      pingMs_ = 0;
      packetsDroppedPct_ = 0;
      packetsWeirdSequencePct_ = 0;
      peakJitterUsec_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramLinkInstantaneousStats(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              outPacketsPerSecX10_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              outBytesPerSec_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              inPacketsPerSecX10_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              inBytesPerSec_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              pingMs_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              packetsDroppedPct_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              packetsWeirdSequencePct_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              peakJitterUsec_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkInstantaneousStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder.class);
    }

    private int bitField0_;
    public static final int OUT_PACKETS_PER_SEC_X10_FIELD_NUMBER = 1;
    private int outPacketsPerSecX10_;
    /**
     * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
     */
    public boolean hasOutPacketsPerSecX10() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
     */
    public int getOutPacketsPerSecX10() {
      return outPacketsPerSecX10_;
    }

    public static final int OUT_BYTES_PER_SEC_FIELD_NUMBER = 2;
    private int outBytesPerSec_;
    /**
     * <code>optional uint32 out_bytes_per_sec = 2;</code>
     */
    public boolean hasOutBytesPerSec() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 out_bytes_per_sec = 2;</code>
     */
    public int getOutBytesPerSec() {
      return outBytesPerSec_;
    }

    public static final int IN_PACKETS_PER_SEC_X10_FIELD_NUMBER = 3;
    private int inPacketsPerSecX10_;
    /**
     * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
     */
    public boolean hasInPacketsPerSecX10() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
     */
    public int getInPacketsPerSecX10() {
      return inPacketsPerSecX10_;
    }

    public static final int IN_BYTES_PER_SEC_FIELD_NUMBER = 4;
    private int inBytesPerSec_;
    /**
     * <code>optional uint32 in_bytes_per_sec = 4;</code>
     */
    public boolean hasInBytesPerSec() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 in_bytes_per_sec = 4;</code>
     */
    public int getInBytesPerSec() {
      return inBytesPerSec_;
    }

    public static final int PING_MS_FIELD_NUMBER = 5;
    private int pingMs_;
    /**
     * <code>optional uint32 ping_ms = 5;</code>
     */
    public boolean hasPingMs() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 ping_ms = 5;</code>
     */
    public int getPingMs() {
      return pingMs_;
    }

    public static final int PACKETS_DROPPED_PCT_FIELD_NUMBER = 6;
    private int packetsDroppedPct_;
    /**
     * <code>optional uint32 packets_dropped_pct = 6;</code>
     */
    public boolean hasPacketsDroppedPct() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 packets_dropped_pct = 6;</code>
     */
    public int getPacketsDroppedPct() {
      return packetsDroppedPct_;
    }

    public static final int PACKETS_WEIRD_SEQUENCE_PCT_FIELD_NUMBER = 7;
    private int packetsWeirdSequencePct_;
    /**
     * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
     */
    public boolean hasPacketsWeirdSequencePct() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
     */
    public int getPacketsWeirdSequencePct() {
      return packetsWeirdSequencePct_;
    }

    public static final int PEAK_JITTER_USEC_FIELD_NUMBER = 8;
    private int peakJitterUsec_;
    /**
     * <code>optional uint32 peak_jitter_usec = 8;</code>
     */
    public boolean hasPeakJitterUsec() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 peak_jitter_usec = 8;</code>
     */
    public int getPeakJitterUsec() {
      return peakJitterUsec_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, outPacketsPerSecX10_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, outBytesPerSec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, inPacketsPerSecX10_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, inBytesPerSec_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, pingMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, packetsDroppedPct_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, packetsWeirdSequencePct_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, peakJitterUsec_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, outPacketsPerSecX10_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, outBytesPerSec_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, inPacketsPerSecX10_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, inBytesPerSec_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, pingMs_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, packetsDroppedPct_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, packetsWeirdSequencePct_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, peakJitterUsec_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats) obj;

      boolean result = true;
      result = result && (hasOutPacketsPerSecX10() == other.hasOutPacketsPerSecX10());
      if (hasOutPacketsPerSecX10()) {
        result = result && (getOutPacketsPerSecX10()
            == other.getOutPacketsPerSecX10());
      }
      result = result && (hasOutBytesPerSec() == other.hasOutBytesPerSec());
      if (hasOutBytesPerSec()) {
        result = result && (getOutBytesPerSec()
            == other.getOutBytesPerSec());
      }
      result = result && (hasInPacketsPerSecX10() == other.hasInPacketsPerSecX10());
      if (hasInPacketsPerSecX10()) {
        result = result && (getInPacketsPerSecX10()
            == other.getInPacketsPerSecX10());
      }
      result = result && (hasInBytesPerSec() == other.hasInBytesPerSec());
      if (hasInBytesPerSec()) {
        result = result && (getInBytesPerSec()
            == other.getInBytesPerSec());
      }
      result = result && (hasPingMs() == other.hasPingMs());
      if (hasPingMs()) {
        result = result && (getPingMs()
            == other.getPingMs());
      }
      result = result && (hasPacketsDroppedPct() == other.hasPacketsDroppedPct());
      if (hasPacketsDroppedPct()) {
        result = result && (getPacketsDroppedPct()
            == other.getPacketsDroppedPct());
      }
      result = result && (hasPacketsWeirdSequencePct() == other.hasPacketsWeirdSequencePct());
      if (hasPacketsWeirdSequencePct()) {
        result = result && (getPacketsWeirdSequencePct()
            == other.getPacketsWeirdSequencePct());
      }
      result = result && (hasPeakJitterUsec() == other.hasPeakJitterUsec());
      if (hasPeakJitterUsec()) {
        result = result && (getPeakJitterUsec()
            == other.getPeakJitterUsec());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOutPacketsPerSecX10()) {
        hash = (37 * hash) + OUT_PACKETS_PER_SEC_X10_FIELD_NUMBER;
        hash = (53 * hash) + getOutPacketsPerSecX10();
      }
      if (hasOutBytesPerSec()) {
        hash = (37 * hash) + OUT_BYTES_PER_SEC_FIELD_NUMBER;
        hash = (53 * hash) + getOutBytesPerSec();
      }
      if (hasInPacketsPerSecX10()) {
        hash = (37 * hash) + IN_PACKETS_PER_SEC_X10_FIELD_NUMBER;
        hash = (53 * hash) + getInPacketsPerSecX10();
      }
      if (hasInBytesPerSec()) {
        hash = (37 * hash) + IN_BYTES_PER_SEC_FIELD_NUMBER;
        hash = (53 * hash) + getInBytesPerSec();
      }
      if (hasPingMs()) {
        hash = (37 * hash) + PING_MS_FIELD_NUMBER;
        hash = (53 * hash) + getPingMs();
      }
      if (hasPacketsDroppedPct()) {
        hash = (37 * hash) + PACKETS_DROPPED_PCT_FIELD_NUMBER;
        hash = (53 * hash) + getPacketsDroppedPct();
      }
      if (hasPacketsWeirdSequencePct()) {
        hash = (37 * hash) + PACKETS_WEIRD_SEQUENCE_PCT_FIELD_NUMBER;
        hash = (53 * hash) + getPacketsWeirdSequencePct();
      }
      if (hasPeakJitterUsec()) {
        hash = (37 * hash) + PEAK_JITTER_USEC_FIELD_NUMBER;
        hash = (53 * hash) + getPeakJitterUsec();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramLinkInstantaneousStats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramLinkInstantaneousStats)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkInstantaneousStats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        outPacketsPerSecX10_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        outBytesPerSec_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        inPacketsPerSecX10_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        inBytesPerSec_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        pingMs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        packetsDroppedPct_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        packetsWeirdSequencePct_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        peakJitterUsec_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.outPacketsPerSecX10_ = outPacketsPerSecX10_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.outBytesPerSec_ = outBytesPerSec_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.inPacketsPerSecX10_ = inPacketsPerSecX10_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.inBytesPerSec_ = inBytesPerSec_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pingMs_ = pingMs_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.packetsDroppedPct_ = packetsDroppedPct_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.packetsWeirdSequencePct_ = packetsWeirdSequencePct_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.peakJitterUsec_ = peakJitterUsec_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance()) return this;
        if (other.hasOutPacketsPerSecX10()) {
          setOutPacketsPerSecX10(other.getOutPacketsPerSecX10());
        }
        if (other.hasOutBytesPerSec()) {
          setOutBytesPerSec(other.getOutBytesPerSec());
        }
        if (other.hasInPacketsPerSecX10()) {
          setInPacketsPerSecX10(other.getInPacketsPerSecX10());
        }
        if (other.hasInBytesPerSec()) {
          setInBytesPerSec(other.getInBytesPerSec());
        }
        if (other.hasPingMs()) {
          setPingMs(other.getPingMs());
        }
        if (other.hasPacketsDroppedPct()) {
          setPacketsDroppedPct(other.getPacketsDroppedPct());
        }
        if (other.hasPacketsWeirdSequencePct()) {
          setPacketsWeirdSequencePct(other.getPacketsWeirdSequencePct());
        }
        if (other.hasPeakJitterUsec()) {
          setPeakJitterUsec(other.getPeakJitterUsec());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int outPacketsPerSecX10_ ;
      /**
       * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
       */
      public boolean hasOutPacketsPerSecX10() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
       */
      public int getOutPacketsPerSecX10() {
        return outPacketsPerSecX10_;
      }
      /**
       * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
       */
      public Builder setOutPacketsPerSecX10(int value) {
        bitField0_ |= 0x00000001;
        outPacketsPerSecX10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 out_packets_per_sec_x10 = 1;</code>
       */
      public Builder clearOutPacketsPerSecX10() {
        bitField0_ = (bitField0_ & ~0x00000001);
        outPacketsPerSecX10_ = 0;
        onChanged();
        return this;
      }

      private int outBytesPerSec_ ;
      /**
       * <code>optional uint32 out_bytes_per_sec = 2;</code>
       */
      public boolean hasOutBytesPerSec() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 out_bytes_per_sec = 2;</code>
       */
      public int getOutBytesPerSec() {
        return outBytesPerSec_;
      }
      /**
       * <code>optional uint32 out_bytes_per_sec = 2;</code>
       */
      public Builder setOutBytesPerSec(int value) {
        bitField0_ |= 0x00000002;
        outBytesPerSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 out_bytes_per_sec = 2;</code>
       */
      public Builder clearOutBytesPerSec() {
        bitField0_ = (bitField0_ & ~0x00000002);
        outBytesPerSec_ = 0;
        onChanged();
        return this;
      }

      private int inPacketsPerSecX10_ ;
      /**
       * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
       */
      public boolean hasInPacketsPerSecX10() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
       */
      public int getInPacketsPerSecX10() {
        return inPacketsPerSecX10_;
      }
      /**
       * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
       */
      public Builder setInPacketsPerSecX10(int value) {
        bitField0_ |= 0x00000004;
        inPacketsPerSecX10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 in_packets_per_sec_x10 = 3;</code>
       */
      public Builder clearInPacketsPerSecX10() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inPacketsPerSecX10_ = 0;
        onChanged();
        return this;
      }

      private int inBytesPerSec_ ;
      /**
       * <code>optional uint32 in_bytes_per_sec = 4;</code>
       */
      public boolean hasInBytesPerSec() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 in_bytes_per_sec = 4;</code>
       */
      public int getInBytesPerSec() {
        return inBytesPerSec_;
      }
      /**
       * <code>optional uint32 in_bytes_per_sec = 4;</code>
       */
      public Builder setInBytesPerSec(int value) {
        bitField0_ |= 0x00000008;
        inBytesPerSec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 in_bytes_per_sec = 4;</code>
       */
      public Builder clearInBytesPerSec() {
        bitField0_ = (bitField0_ & ~0x00000008);
        inBytesPerSec_ = 0;
        onChanged();
        return this;
      }

      private int pingMs_ ;
      /**
       * <code>optional uint32 ping_ms = 5;</code>
       */
      public boolean hasPingMs() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 ping_ms = 5;</code>
       */
      public int getPingMs() {
        return pingMs_;
      }
      /**
       * <code>optional uint32 ping_ms = 5;</code>
       */
      public Builder setPingMs(int value) {
        bitField0_ |= 0x00000010;
        pingMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ms = 5;</code>
       */
      public Builder clearPingMs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pingMs_ = 0;
        onChanged();
        return this;
      }

      private int packetsDroppedPct_ ;
      /**
       * <code>optional uint32 packets_dropped_pct = 6;</code>
       */
      public boolean hasPacketsDroppedPct() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 packets_dropped_pct = 6;</code>
       */
      public int getPacketsDroppedPct() {
        return packetsDroppedPct_;
      }
      /**
       * <code>optional uint32 packets_dropped_pct = 6;</code>
       */
      public Builder setPacketsDroppedPct(int value) {
        bitField0_ |= 0x00000020;
        packetsDroppedPct_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 packets_dropped_pct = 6;</code>
       */
      public Builder clearPacketsDroppedPct() {
        bitField0_ = (bitField0_ & ~0x00000020);
        packetsDroppedPct_ = 0;
        onChanged();
        return this;
      }

      private int packetsWeirdSequencePct_ ;
      /**
       * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
       */
      public boolean hasPacketsWeirdSequencePct() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
       */
      public int getPacketsWeirdSequencePct() {
        return packetsWeirdSequencePct_;
      }
      /**
       * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
       */
      public Builder setPacketsWeirdSequencePct(int value) {
        bitField0_ |= 0x00000040;
        packetsWeirdSequencePct_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 packets_weird_sequence_pct = 7;</code>
       */
      public Builder clearPacketsWeirdSequencePct() {
        bitField0_ = (bitField0_ & ~0x00000040);
        packetsWeirdSequencePct_ = 0;
        onChanged();
        return this;
      }

      private int peakJitterUsec_ ;
      /**
       * <code>optional uint32 peak_jitter_usec = 8;</code>
       */
      public boolean hasPeakJitterUsec() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 peak_jitter_usec = 8;</code>
       */
      public int getPeakJitterUsec() {
        return peakJitterUsec_;
      }
      /**
       * <code>optional uint32 peak_jitter_usec = 8;</code>
       */
      public Builder setPeakJitterUsec(int value) {
        bitField0_ |= 0x00000080;
        peakJitterUsec_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 peak_jitter_usec = 8;</code>
       */
      public Builder clearPeakJitterUsec() {
        bitField0_ = (bitField0_ & ~0x00000080);
        peakJitterUsec_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramLinkInstantaneousStats)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkInstantaneousStats)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramLinkInstantaneousStats>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramLinkInstantaneousStats>() {
      @java.lang.Override
      public CMsgSteamDatagramLinkInstantaneousStats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramLinkInstantaneousStats(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramLinkInstantaneousStats> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramLinkInstantaneousStats> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramLinkLifetimeStatsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramLinkLifetimeStats)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 packets_sent = 3;</code>
     */
    boolean hasPacketsSent();
    /**
     * <code>optional uint64 packets_sent = 3;</code>
     */
    long getPacketsSent();

    /**
     * <code>optional uint64 kb_sent = 4;</code>
     */
    boolean hasKbSent();
    /**
     * <code>optional uint64 kb_sent = 4;</code>
     */
    long getKbSent();

    /**
     * <code>optional uint64 packets_recv = 5;</code>
     */
    boolean hasPacketsRecv();
    /**
     * <code>optional uint64 packets_recv = 5;</code>
     */
    long getPacketsRecv();

    /**
     * <code>optional uint64 kb_recv = 6;</code>
     */
    boolean hasKbRecv();
    /**
     * <code>optional uint64 kb_recv = 6;</code>
     */
    long getKbRecv();

    /**
     * <code>optional uint64 packets_recv_sequenced = 7;</code>
     */
    boolean hasPacketsRecvSequenced();
    /**
     * <code>optional uint64 packets_recv_sequenced = 7;</code>
     */
    long getPacketsRecvSequenced();

    /**
     * <code>optional uint64 packets_recv_dropped = 8;</code>
     */
    boolean hasPacketsRecvDropped();
    /**
     * <code>optional uint64 packets_recv_dropped = 8;</code>
     */
    long getPacketsRecvDropped();

    /**
     * <code>optional uint64 packets_recv_out_of_order = 9;</code>
     */
    boolean hasPacketsRecvOutOfOrder();
    /**
     * <code>optional uint64 packets_recv_out_of_order = 9;</code>
     */
    long getPacketsRecvOutOfOrder();

    /**
     * <code>optional uint64 packets_recv_duplicate = 10;</code>
     */
    boolean hasPacketsRecvDuplicate();
    /**
     * <code>optional uint64 packets_recv_duplicate = 10;</code>
     */
    long getPacketsRecvDuplicate();

    /**
     * <code>optional uint64 packets_recv_lurch = 11;</code>
     */
    boolean hasPacketsRecvLurch();
    /**
     * <code>optional uint64 packets_recv_lurch = 11;</code>
     */
    long getPacketsRecvLurch();

    /**
     * <code>optional uint32 quality_histogram_100 = 21;</code>
     */
    boolean hasQualityHistogram100();
    /**
     * <code>optional uint32 quality_histogram_100 = 21;</code>
     */
    int getQualityHistogram100();

    /**
     * <code>optional uint32 quality_histogram_99 = 22;</code>
     */
    boolean hasQualityHistogram99();
    /**
     * <code>optional uint32 quality_histogram_99 = 22;</code>
     */
    int getQualityHistogram99();

    /**
     * <code>optional uint32 quality_histogram_97 = 23;</code>
     */
    boolean hasQualityHistogram97();
    /**
     * <code>optional uint32 quality_histogram_97 = 23;</code>
     */
    int getQualityHistogram97();

    /**
     * <code>optional uint32 quality_histogram_95 = 24;</code>
     */
    boolean hasQualityHistogram95();
    /**
     * <code>optional uint32 quality_histogram_95 = 24;</code>
     */
    int getQualityHistogram95();

    /**
     * <code>optional uint32 quality_histogram_90 = 25;</code>
     */
    boolean hasQualityHistogram90();
    /**
     * <code>optional uint32 quality_histogram_90 = 25;</code>
     */
    int getQualityHistogram90();

    /**
     * <code>optional uint32 quality_histogram_75 = 26;</code>
     */
    boolean hasQualityHistogram75();
    /**
     * <code>optional uint32 quality_histogram_75 = 26;</code>
     */
    int getQualityHistogram75();

    /**
     * <code>optional uint32 quality_histogram_50 = 27;</code>
     */
    boolean hasQualityHistogram50();
    /**
     * <code>optional uint32 quality_histogram_50 = 27;</code>
     */
    int getQualityHistogram50();

    /**
     * <code>optional uint32 quality_histogram_1 = 28;</code>
     */
    boolean hasQualityHistogram1();
    /**
     * <code>optional uint32 quality_histogram_1 = 28;</code>
     */
    int getQualityHistogram1();

    /**
     * <code>optional uint32 quality_histogram_dead = 29;</code>
     */
    boolean hasQualityHistogramDead();
    /**
     * <code>optional uint32 quality_histogram_dead = 29;</code>
     */
    int getQualityHistogramDead();

    /**
     * <code>optional uint32 quality_ntile_2nd = 30;</code>
     */
    boolean hasQualityNtile2Nd();
    /**
     * <code>optional uint32 quality_ntile_2nd = 30;</code>
     */
    int getQualityNtile2Nd();

    /**
     * <code>optional uint32 quality_ntile_5th = 31;</code>
     */
    boolean hasQualityNtile5Th();
    /**
     * <code>optional uint32 quality_ntile_5th = 31;</code>
     */
    int getQualityNtile5Th();

    /**
     * <code>optional uint32 quality_ntile_25th = 32;</code>
     */
    boolean hasQualityNtile25Th();
    /**
     * <code>optional uint32 quality_ntile_25th = 32;</code>
     */
    int getQualityNtile25Th();

    /**
     * <code>optional uint32 quality_ntile_50th = 33;</code>
     */
    boolean hasQualityNtile50Th();
    /**
     * <code>optional uint32 quality_ntile_50th = 33;</code>
     */
    int getQualityNtile50Th();

    /**
     * <code>optional uint32 ping_histogram_25 = 41;</code>
     */
    boolean hasPingHistogram25();
    /**
     * <code>optional uint32 ping_histogram_25 = 41;</code>
     */
    int getPingHistogram25();

    /**
     * <code>optional uint32 ping_histogram_50 = 42;</code>
     */
    boolean hasPingHistogram50();
    /**
     * <code>optional uint32 ping_histogram_50 = 42;</code>
     */
    int getPingHistogram50();

    /**
     * <code>optional uint32 ping_histogram_75 = 43;</code>
     */
    boolean hasPingHistogram75();
    /**
     * <code>optional uint32 ping_histogram_75 = 43;</code>
     */
    int getPingHistogram75();

    /**
     * <code>optional uint32 ping_histogram_100 = 44;</code>
     */
    boolean hasPingHistogram100();
    /**
     * <code>optional uint32 ping_histogram_100 = 44;</code>
     */
    int getPingHistogram100();

    /**
     * <code>optional uint32 ping_histogram_125 = 45;</code>
     */
    boolean hasPingHistogram125();
    /**
     * <code>optional uint32 ping_histogram_125 = 45;</code>
     */
    int getPingHistogram125();

    /**
     * <code>optional uint32 ping_histogram_150 = 46;</code>
     */
    boolean hasPingHistogram150();
    /**
     * <code>optional uint32 ping_histogram_150 = 46;</code>
     */
    int getPingHistogram150();

    /**
     * <code>optional uint32 ping_histogram_200 = 47;</code>
     */
    boolean hasPingHistogram200();
    /**
     * <code>optional uint32 ping_histogram_200 = 47;</code>
     */
    int getPingHistogram200();

    /**
     * <code>optional uint32 ping_histogram_300 = 48;</code>
     */
    boolean hasPingHistogram300();
    /**
     * <code>optional uint32 ping_histogram_300 = 48;</code>
     */
    int getPingHistogram300();

    /**
     * <code>optional uint32 ping_histogram_max = 49;</code>
     */
    boolean hasPingHistogramMax();
    /**
     * <code>optional uint32 ping_histogram_max = 49;</code>
     */
    int getPingHistogramMax();

    /**
     * <code>optional uint32 ping_ntile_5th = 50;</code>
     */
    boolean hasPingNtile5Th();
    /**
     * <code>optional uint32 ping_ntile_5th = 50;</code>
     */
    int getPingNtile5Th();

    /**
     * <code>optional uint32 ping_ntile_50th = 51;</code>
     */
    boolean hasPingNtile50Th();
    /**
     * <code>optional uint32 ping_ntile_50th = 51;</code>
     */
    int getPingNtile50Th();

    /**
     * <code>optional uint32 ping_ntile_75th = 52;</code>
     */
    boolean hasPingNtile75Th();
    /**
     * <code>optional uint32 ping_ntile_75th = 52;</code>
     */
    int getPingNtile75Th();

    /**
     * <code>optional uint32 ping_ntile_95th = 53;</code>
     */
    boolean hasPingNtile95Th();
    /**
     * <code>optional uint32 ping_ntile_95th = 53;</code>
     */
    int getPingNtile95Th();

    /**
     * <code>optional uint32 ping_ntile_98th = 54;</code>
     */
    boolean hasPingNtile98Th();
    /**
     * <code>optional uint32 ping_ntile_98th = 54;</code>
     */
    int getPingNtile98Th();

    /**
     * <code>optional uint32 jitter_histogram_negligible = 61;</code>
     */
    boolean hasJitterHistogramNegligible();
    /**
     * <code>optional uint32 jitter_histogram_negligible = 61;</code>
     */
    int getJitterHistogramNegligible();

    /**
     * <code>optional uint32 jitter_histogram_1 = 62;</code>
     */
    boolean hasJitterHistogram1();
    /**
     * <code>optional uint32 jitter_histogram_1 = 62;</code>
     */
    int getJitterHistogram1();

    /**
     * <code>optional uint32 jitter_histogram_2 = 63;</code>
     */
    boolean hasJitterHistogram2();
    /**
     * <code>optional uint32 jitter_histogram_2 = 63;</code>
     */
    int getJitterHistogram2();

    /**
     * <code>optional uint32 jitter_histogram_5 = 64;</code>
     */
    boolean hasJitterHistogram5();
    /**
     * <code>optional uint32 jitter_histogram_5 = 64;</code>
     */
    int getJitterHistogram5();

    /**
     * <code>optional uint32 jitter_histogram_10 = 65;</code>
     */
    boolean hasJitterHistogram10();
    /**
     * <code>optional uint32 jitter_histogram_10 = 65;</code>
     */
    int getJitterHistogram10();

    /**
     * <code>optional uint32 jitter_histogram_20 = 66;</code>
     */
    boolean hasJitterHistogram20();
    /**
     * <code>optional uint32 jitter_histogram_20 = 66;</code>
     */
    int getJitterHistogram20();

    /**
     * <code>optional uint32 txspeed_max = 67;</code>
     */
    boolean hasTxspeedMax();
    /**
     * <code>optional uint32 txspeed_max = 67;</code>
     */
    int getTxspeedMax();

    /**
     * <code>optional uint32 txspeed_histogram_16 = 68;</code>
     */
    boolean hasTxspeedHistogram16();
    /**
     * <code>optional uint32 txspeed_histogram_16 = 68;</code>
     */
    int getTxspeedHistogram16();

    /**
     * <code>optional uint32 txspeed_histogram_32 = 69;</code>
     */
    boolean hasTxspeedHistogram32();
    /**
     * <code>optional uint32 txspeed_histogram_32 = 69;</code>
     */
    int getTxspeedHistogram32();

    /**
     * <code>optional uint32 txspeed_histogram_64 = 70;</code>
     */
    boolean hasTxspeedHistogram64();
    /**
     * <code>optional uint32 txspeed_histogram_64 = 70;</code>
     */
    int getTxspeedHistogram64();

    /**
     * <code>optional uint32 txspeed_histogram_128 = 71;</code>
     */
    boolean hasTxspeedHistogram128();
    /**
     * <code>optional uint32 txspeed_histogram_128 = 71;</code>
     */
    int getTxspeedHistogram128();

    /**
     * <code>optional uint32 txspeed_histogram_256 = 72;</code>
     */
    boolean hasTxspeedHistogram256();
    /**
     * <code>optional uint32 txspeed_histogram_256 = 72;</code>
     */
    int getTxspeedHistogram256();

    /**
     * <code>optional uint32 txspeed_histogram_512 = 73;</code>
     */
    boolean hasTxspeedHistogram512();
    /**
     * <code>optional uint32 txspeed_histogram_512 = 73;</code>
     */
    int getTxspeedHistogram512();

    /**
     * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
     */
    boolean hasTxspeedHistogram1024();
    /**
     * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
     */
    int getTxspeedHistogram1024();

    /**
     * <code>optional uint32 txspeed_histogram_max = 75;</code>
     */
    boolean hasTxspeedHistogramMax();
    /**
     * <code>optional uint32 txspeed_histogram_max = 75;</code>
     */
    int getTxspeedHistogramMax();

    /**
     * <code>optional uint32 txspeed_ntile_5th = 76;</code>
     */
    boolean hasTxspeedNtile5Th();
    /**
     * <code>optional uint32 txspeed_ntile_5th = 76;</code>
     */
    int getTxspeedNtile5Th();

    /**
     * <code>optional uint32 txspeed_ntile_50th = 77;</code>
     */
    boolean hasTxspeedNtile50Th();
    /**
     * <code>optional uint32 txspeed_ntile_50th = 77;</code>
     */
    int getTxspeedNtile50Th();

    /**
     * <code>optional uint32 txspeed_ntile_75th = 78;</code>
     */
    boolean hasTxspeedNtile75Th();
    /**
     * <code>optional uint32 txspeed_ntile_75th = 78;</code>
     */
    int getTxspeedNtile75Th();

    /**
     * <code>optional uint32 txspeed_ntile_95th = 79;</code>
     */
    boolean hasTxspeedNtile95Th();
    /**
     * <code>optional uint32 txspeed_ntile_95th = 79;</code>
     */
    int getTxspeedNtile95Th();

    /**
     * <code>optional uint32 txspeed_ntile_98th = 80;</code>
     */
    boolean hasTxspeedNtile98Th();
    /**
     * <code>optional uint32 txspeed_ntile_98th = 80;</code>
     */
    int getTxspeedNtile98Th();

    /**
     * <code>optional uint32 rxspeed_max = 81;</code>
     */
    boolean hasRxspeedMax();
    /**
     * <code>optional uint32 rxspeed_max = 81;</code>
     */
    int getRxspeedMax();

    /**
     * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
     */
    boolean hasRxspeedHistogram16();
    /**
     * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
     */
    int getRxspeedHistogram16();

    /**
     * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
     */
    boolean hasRxspeedHistogram32();
    /**
     * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
     */
    int getRxspeedHistogram32();

    /**
     * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
     */
    boolean hasRxspeedHistogram64();
    /**
     * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
     */
    int getRxspeedHistogram64();

    /**
     * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
     */
    boolean hasRxspeedHistogram128();
    /**
     * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
     */
    int getRxspeedHistogram128();

    /**
     * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
     */
    boolean hasRxspeedHistogram256();
    /**
     * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
     */
    int getRxspeedHistogram256();

    /**
     * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
     */
    boolean hasRxspeedHistogram512();
    /**
     * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
     */
    int getRxspeedHistogram512();

    /**
     * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
     */
    boolean hasRxspeedHistogram1024();
    /**
     * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
     */
    int getRxspeedHistogram1024();

    /**
     * <code>optional uint32 rxspeed_histogram_max = 89;</code>
     */
    boolean hasRxspeedHistogramMax();
    /**
     * <code>optional uint32 rxspeed_histogram_max = 89;</code>
     */
    int getRxspeedHistogramMax();

    /**
     * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
     */
    boolean hasRxspeedNtile5Th();
    /**
     * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
     */
    int getRxspeedNtile5Th();

    /**
     * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
     */
    boolean hasRxspeedNtile50Th();
    /**
     * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
     */
    int getRxspeedNtile50Th();

    /**
     * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
     */
    boolean hasRxspeedNtile75Th();
    /**
     * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
     */
    int getRxspeedNtile75Th();

    /**
     * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
     */
    boolean hasRxspeedNtile95Th();
    /**
     * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
     */
    int getRxspeedNtile95Th();

    /**
     * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
     */
    boolean hasRxspeedNtile98Th();
    /**
     * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
     */
    int getRxspeedNtile98Th();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramLinkLifetimeStats}
   */
  public  static final class CMsgSteamDatagramLinkLifetimeStats extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramLinkLifetimeStats)
      CMsgSteamDatagramLinkLifetimeStatsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramLinkLifetimeStats.newBuilder() to construct.
    private CMsgSteamDatagramLinkLifetimeStats(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramLinkLifetimeStats() {
      packetsSent_ = 0L;
      kbSent_ = 0L;
      packetsRecv_ = 0L;
      kbRecv_ = 0L;
      packetsRecvSequenced_ = 0L;
      packetsRecvDropped_ = 0L;
      packetsRecvOutOfOrder_ = 0L;
      packetsRecvDuplicate_ = 0L;
      packetsRecvLurch_ = 0L;
      qualityHistogram100_ = 0;
      qualityHistogram99_ = 0;
      qualityHistogram97_ = 0;
      qualityHistogram95_ = 0;
      qualityHistogram90_ = 0;
      qualityHistogram75_ = 0;
      qualityHistogram50_ = 0;
      qualityHistogram1_ = 0;
      qualityHistogramDead_ = 0;
      qualityNtile2Nd_ = 0;
      qualityNtile5Th_ = 0;
      qualityNtile25Th_ = 0;
      qualityNtile50Th_ = 0;
      pingHistogram25_ = 0;
      pingHistogram50_ = 0;
      pingHistogram75_ = 0;
      pingHistogram100_ = 0;
      pingHistogram125_ = 0;
      pingHistogram150_ = 0;
      pingHistogram200_ = 0;
      pingHistogram300_ = 0;
      pingHistogramMax_ = 0;
      pingNtile5Th_ = 0;
      pingNtile50Th_ = 0;
      pingNtile75Th_ = 0;
      pingNtile95Th_ = 0;
      pingNtile98Th_ = 0;
      jitterHistogramNegligible_ = 0;
      jitterHistogram1_ = 0;
      jitterHistogram2_ = 0;
      jitterHistogram5_ = 0;
      jitterHistogram10_ = 0;
      jitterHistogram20_ = 0;
      txspeedMax_ = 0;
      txspeedHistogram16_ = 0;
      txspeedHistogram32_ = 0;
      txspeedHistogram64_ = 0;
      txspeedHistogram128_ = 0;
      txspeedHistogram256_ = 0;
      txspeedHistogram512_ = 0;
      txspeedHistogram1024_ = 0;
      txspeedHistogramMax_ = 0;
      txspeedNtile5Th_ = 0;
      txspeedNtile50Th_ = 0;
      txspeedNtile75Th_ = 0;
      txspeedNtile95Th_ = 0;
      txspeedNtile98Th_ = 0;
      rxspeedMax_ = 0;
      rxspeedHistogram16_ = 0;
      rxspeedHistogram32_ = 0;
      rxspeedHistogram64_ = 0;
      rxspeedHistogram128_ = 0;
      rxspeedHistogram256_ = 0;
      rxspeedHistogram512_ = 0;
      rxspeedHistogram1024_ = 0;
      rxspeedHistogramMax_ = 0;
      rxspeedNtile5Th_ = 0;
      rxspeedNtile50Th_ = 0;
      rxspeedNtile75Th_ = 0;
      rxspeedNtile95Th_ = 0;
      rxspeedNtile98Th_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramLinkLifetimeStats(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 24: {
              bitField0_ |= 0x00000001;
              packetsSent_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              kbSent_ = input.readUInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              packetsRecv_ = input.readUInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              kbRecv_ = input.readUInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000010;
              packetsRecvSequenced_ = input.readUInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000020;
              packetsRecvDropped_ = input.readUInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              packetsRecvOutOfOrder_ = input.readUInt64();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              packetsRecvDuplicate_ = input.readUInt64();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000100;
              packetsRecvLurch_ = input.readUInt64();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000200;
              qualityHistogram100_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00000400;
              qualityHistogram99_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00000800;
              qualityHistogram97_ = input.readUInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00001000;
              qualityHistogram95_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x00002000;
              qualityHistogram90_ = input.readUInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x00004000;
              qualityHistogram75_ = input.readUInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x00008000;
              qualityHistogram50_ = input.readUInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x00010000;
              qualityHistogram1_ = input.readUInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x00020000;
              qualityHistogramDead_ = input.readUInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x00040000;
              qualityNtile2Nd_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00080000;
              qualityNtile5Th_ = input.readUInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x00100000;
              qualityNtile25Th_ = input.readUInt32();
              break;
            }
            case 264: {
              bitField0_ |= 0x00200000;
              qualityNtile50Th_ = input.readUInt32();
              break;
            }
            case 328: {
              bitField0_ |= 0x00400000;
              pingHistogram25_ = input.readUInt32();
              break;
            }
            case 336: {
              bitField0_ |= 0x00800000;
              pingHistogram50_ = input.readUInt32();
              break;
            }
            case 344: {
              bitField0_ |= 0x01000000;
              pingHistogram75_ = input.readUInt32();
              break;
            }
            case 352: {
              bitField0_ |= 0x02000000;
              pingHistogram100_ = input.readUInt32();
              break;
            }
            case 360: {
              bitField0_ |= 0x04000000;
              pingHistogram125_ = input.readUInt32();
              break;
            }
            case 368: {
              bitField0_ |= 0x08000000;
              pingHistogram150_ = input.readUInt32();
              break;
            }
            case 376: {
              bitField0_ |= 0x10000000;
              pingHistogram200_ = input.readUInt32();
              break;
            }
            case 384: {
              bitField0_ |= 0x20000000;
              pingHistogram300_ = input.readUInt32();
              break;
            }
            case 392: {
              bitField0_ |= 0x40000000;
              pingHistogramMax_ = input.readUInt32();
              break;
            }
            case 400: {
              bitField0_ |= 0x80000000;
              pingNtile5Th_ = input.readUInt32();
              break;
            }
            case 408: {
              bitField1_ |= 0x00000001;
              pingNtile50Th_ = input.readUInt32();
              break;
            }
            case 416: {
              bitField1_ |= 0x00000002;
              pingNtile75Th_ = input.readUInt32();
              break;
            }
            case 424: {
              bitField1_ |= 0x00000004;
              pingNtile95Th_ = input.readUInt32();
              break;
            }
            case 432: {
              bitField1_ |= 0x00000008;
              pingNtile98Th_ = input.readUInt32();
              break;
            }
            case 488: {
              bitField1_ |= 0x00000010;
              jitterHistogramNegligible_ = input.readUInt32();
              break;
            }
            case 496: {
              bitField1_ |= 0x00000020;
              jitterHistogram1_ = input.readUInt32();
              break;
            }
            case 504: {
              bitField1_ |= 0x00000040;
              jitterHistogram2_ = input.readUInt32();
              break;
            }
            case 512: {
              bitField1_ |= 0x00000080;
              jitterHistogram5_ = input.readUInt32();
              break;
            }
            case 520: {
              bitField1_ |= 0x00000100;
              jitterHistogram10_ = input.readUInt32();
              break;
            }
            case 528: {
              bitField1_ |= 0x00000200;
              jitterHistogram20_ = input.readUInt32();
              break;
            }
            case 536: {
              bitField1_ |= 0x00000400;
              txspeedMax_ = input.readUInt32();
              break;
            }
            case 544: {
              bitField1_ |= 0x00000800;
              txspeedHistogram16_ = input.readUInt32();
              break;
            }
            case 552: {
              bitField1_ |= 0x00001000;
              txspeedHistogram32_ = input.readUInt32();
              break;
            }
            case 560: {
              bitField1_ |= 0x00002000;
              txspeedHistogram64_ = input.readUInt32();
              break;
            }
            case 568: {
              bitField1_ |= 0x00004000;
              txspeedHistogram128_ = input.readUInt32();
              break;
            }
            case 576: {
              bitField1_ |= 0x00008000;
              txspeedHistogram256_ = input.readUInt32();
              break;
            }
            case 584: {
              bitField1_ |= 0x00010000;
              txspeedHistogram512_ = input.readUInt32();
              break;
            }
            case 592: {
              bitField1_ |= 0x00020000;
              txspeedHistogram1024_ = input.readUInt32();
              break;
            }
            case 600: {
              bitField1_ |= 0x00040000;
              txspeedHistogramMax_ = input.readUInt32();
              break;
            }
            case 608: {
              bitField1_ |= 0x00080000;
              txspeedNtile5Th_ = input.readUInt32();
              break;
            }
            case 616: {
              bitField1_ |= 0x00100000;
              txspeedNtile50Th_ = input.readUInt32();
              break;
            }
            case 624: {
              bitField1_ |= 0x00200000;
              txspeedNtile75Th_ = input.readUInt32();
              break;
            }
            case 632: {
              bitField1_ |= 0x00400000;
              txspeedNtile95Th_ = input.readUInt32();
              break;
            }
            case 640: {
              bitField1_ |= 0x00800000;
              txspeedNtile98Th_ = input.readUInt32();
              break;
            }
            case 648: {
              bitField1_ |= 0x01000000;
              rxspeedMax_ = input.readUInt32();
              break;
            }
            case 656: {
              bitField1_ |= 0x02000000;
              rxspeedHistogram16_ = input.readUInt32();
              break;
            }
            case 664: {
              bitField1_ |= 0x04000000;
              rxspeedHistogram32_ = input.readUInt32();
              break;
            }
            case 672: {
              bitField1_ |= 0x08000000;
              rxspeedHistogram64_ = input.readUInt32();
              break;
            }
            case 680: {
              bitField1_ |= 0x10000000;
              rxspeedHistogram128_ = input.readUInt32();
              break;
            }
            case 688: {
              bitField1_ |= 0x20000000;
              rxspeedHistogram256_ = input.readUInt32();
              break;
            }
            case 696: {
              bitField1_ |= 0x40000000;
              rxspeedHistogram512_ = input.readUInt32();
              break;
            }
            case 704: {
              bitField1_ |= 0x80000000;
              rxspeedHistogram1024_ = input.readUInt32();
              break;
            }
            case 712: {
              bitField2_ |= 0x00000001;
              rxspeedHistogramMax_ = input.readUInt32();
              break;
            }
            case 720: {
              bitField2_ |= 0x00000002;
              rxspeedNtile5Th_ = input.readUInt32();
              break;
            }
            case 728: {
              bitField2_ |= 0x00000004;
              rxspeedNtile50Th_ = input.readUInt32();
              break;
            }
            case 736: {
              bitField2_ |= 0x00000008;
              rxspeedNtile75Th_ = input.readUInt32();
              break;
            }
            case 744: {
              bitField2_ |= 0x00000010;
              rxspeedNtile95Th_ = input.readUInt32();
              break;
            }
            case 752: {
              bitField2_ |= 0x00000020;
              rxspeedNtile98Th_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkLifetimeStats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder.class);
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    public static final int PACKETS_SENT_FIELD_NUMBER = 3;
    private long packetsSent_;
    /**
     * <code>optional uint64 packets_sent = 3;</code>
     */
    public boolean hasPacketsSent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 packets_sent = 3;</code>
     */
    public long getPacketsSent() {
      return packetsSent_;
    }

    public static final int KB_SENT_FIELD_NUMBER = 4;
    private long kbSent_;
    /**
     * <code>optional uint64 kb_sent = 4;</code>
     */
    public boolean hasKbSent() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 kb_sent = 4;</code>
     */
    public long getKbSent() {
      return kbSent_;
    }

    public static final int PACKETS_RECV_FIELD_NUMBER = 5;
    private long packetsRecv_;
    /**
     * <code>optional uint64 packets_recv = 5;</code>
     */
    public boolean hasPacketsRecv() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 packets_recv = 5;</code>
     */
    public long getPacketsRecv() {
      return packetsRecv_;
    }

    public static final int KB_RECV_FIELD_NUMBER = 6;
    private long kbRecv_;
    /**
     * <code>optional uint64 kb_recv = 6;</code>
     */
    public boolean hasKbRecv() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 kb_recv = 6;</code>
     */
    public long getKbRecv() {
      return kbRecv_;
    }

    public static final int PACKETS_RECV_SEQUENCED_FIELD_NUMBER = 7;
    private long packetsRecvSequenced_;
    /**
     * <code>optional uint64 packets_recv_sequenced = 7;</code>
     */
    public boolean hasPacketsRecvSequenced() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint64 packets_recv_sequenced = 7;</code>
     */
    public long getPacketsRecvSequenced() {
      return packetsRecvSequenced_;
    }

    public static final int PACKETS_RECV_DROPPED_FIELD_NUMBER = 8;
    private long packetsRecvDropped_;
    /**
     * <code>optional uint64 packets_recv_dropped = 8;</code>
     */
    public boolean hasPacketsRecvDropped() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint64 packets_recv_dropped = 8;</code>
     */
    public long getPacketsRecvDropped() {
      return packetsRecvDropped_;
    }

    public static final int PACKETS_RECV_OUT_OF_ORDER_FIELD_NUMBER = 9;
    private long packetsRecvOutOfOrder_;
    /**
     * <code>optional uint64 packets_recv_out_of_order = 9;</code>
     */
    public boolean hasPacketsRecvOutOfOrder() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint64 packets_recv_out_of_order = 9;</code>
     */
    public long getPacketsRecvOutOfOrder() {
      return packetsRecvOutOfOrder_;
    }

    public static final int PACKETS_RECV_DUPLICATE_FIELD_NUMBER = 10;
    private long packetsRecvDuplicate_;
    /**
     * <code>optional uint64 packets_recv_duplicate = 10;</code>
     */
    public boolean hasPacketsRecvDuplicate() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint64 packets_recv_duplicate = 10;</code>
     */
    public long getPacketsRecvDuplicate() {
      return packetsRecvDuplicate_;
    }

    public static final int PACKETS_RECV_LURCH_FIELD_NUMBER = 11;
    private long packetsRecvLurch_;
    /**
     * <code>optional uint64 packets_recv_lurch = 11;</code>
     */
    public boolean hasPacketsRecvLurch() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint64 packets_recv_lurch = 11;</code>
     */
    public long getPacketsRecvLurch() {
      return packetsRecvLurch_;
    }

    public static final int QUALITY_HISTOGRAM_100_FIELD_NUMBER = 21;
    private int qualityHistogram100_;
    /**
     * <code>optional uint32 quality_histogram_100 = 21;</code>
     */
    public boolean hasQualityHistogram100() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 quality_histogram_100 = 21;</code>
     */
    public int getQualityHistogram100() {
      return qualityHistogram100_;
    }

    public static final int QUALITY_HISTOGRAM_99_FIELD_NUMBER = 22;
    private int qualityHistogram99_;
    /**
     * <code>optional uint32 quality_histogram_99 = 22;</code>
     */
    public boolean hasQualityHistogram99() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 quality_histogram_99 = 22;</code>
     */
    public int getQualityHistogram99() {
      return qualityHistogram99_;
    }

    public static final int QUALITY_HISTOGRAM_97_FIELD_NUMBER = 23;
    private int qualityHistogram97_;
    /**
     * <code>optional uint32 quality_histogram_97 = 23;</code>
     */
    public boolean hasQualityHistogram97() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 quality_histogram_97 = 23;</code>
     */
    public int getQualityHistogram97() {
      return qualityHistogram97_;
    }

    public static final int QUALITY_HISTOGRAM_95_FIELD_NUMBER = 24;
    private int qualityHistogram95_;
    /**
     * <code>optional uint32 quality_histogram_95 = 24;</code>
     */
    public boolean hasQualityHistogram95() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 quality_histogram_95 = 24;</code>
     */
    public int getQualityHistogram95() {
      return qualityHistogram95_;
    }

    public static final int QUALITY_HISTOGRAM_90_FIELD_NUMBER = 25;
    private int qualityHistogram90_;
    /**
     * <code>optional uint32 quality_histogram_90 = 25;</code>
     */
    public boolean hasQualityHistogram90() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 quality_histogram_90 = 25;</code>
     */
    public int getQualityHistogram90() {
      return qualityHistogram90_;
    }

    public static final int QUALITY_HISTOGRAM_75_FIELD_NUMBER = 26;
    private int qualityHistogram75_;
    /**
     * <code>optional uint32 quality_histogram_75 = 26;</code>
     */
    public boolean hasQualityHistogram75() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 quality_histogram_75 = 26;</code>
     */
    public int getQualityHistogram75() {
      return qualityHistogram75_;
    }

    public static final int QUALITY_HISTOGRAM_50_FIELD_NUMBER = 27;
    private int qualityHistogram50_;
    /**
     * <code>optional uint32 quality_histogram_50 = 27;</code>
     */
    public boolean hasQualityHistogram50() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 quality_histogram_50 = 27;</code>
     */
    public int getQualityHistogram50() {
      return qualityHistogram50_;
    }

    public static final int QUALITY_HISTOGRAM_1_FIELD_NUMBER = 28;
    private int qualityHistogram1_;
    /**
     * <code>optional uint32 quality_histogram_1 = 28;</code>
     */
    public boolean hasQualityHistogram1() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 quality_histogram_1 = 28;</code>
     */
    public int getQualityHistogram1() {
      return qualityHistogram1_;
    }

    public static final int QUALITY_HISTOGRAM_DEAD_FIELD_NUMBER = 29;
    private int qualityHistogramDead_;
    /**
     * <code>optional uint32 quality_histogram_dead = 29;</code>
     */
    public boolean hasQualityHistogramDead() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 quality_histogram_dead = 29;</code>
     */
    public int getQualityHistogramDead() {
      return qualityHistogramDead_;
    }

    public static final int QUALITY_NTILE_2ND_FIELD_NUMBER = 30;
    private int qualityNtile2Nd_;
    /**
     * <code>optional uint32 quality_ntile_2nd = 30;</code>
     */
    public boolean hasQualityNtile2Nd() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 quality_ntile_2nd = 30;</code>
     */
    public int getQualityNtile2Nd() {
      return qualityNtile2Nd_;
    }

    public static final int QUALITY_NTILE_5TH_FIELD_NUMBER = 31;
    private int qualityNtile5Th_;
    /**
     * <code>optional uint32 quality_ntile_5th = 31;</code>
     */
    public boolean hasQualityNtile5Th() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 quality_ntile_5th = 31;</code>
     */
    public int getQualityNtile5Th() {
      return qualityNtile5Th_;
    }

    public static final int QUALITY_NTILE_25TH_FIELD_NUMBER = 32;
    private int qualityNtile25Th_;
    /**
     * <code>optional uint32 quality_ntile_25th = 32;</code>
     */
    public boolean hasQualityNtile25Th() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 quality_ntile_25th = 32;</code>
     */
    public int getQualityNtile25Th() {
      return qualityNtile25Th_;
    }

    public static final int QUALITY_NTILE_50TH_FIELD_NUMBER = 33;
    private int qualityNtile50Th_;
    /**
     * <code>optional uint32 quality_ntile_50th = 33;</code>
     */
    public boolean hasQualityNtile50Th() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 quality_ntile_50th = 33;</code>
     */
    public int getQualityNtile50Th() {
      return qualityNtile50Th_;
    }

    public static final int PING_HISTOGRAM_25_FIELD_NUMBER = 41;
    private int pingHistogram25_;
    /**
     * <code>optional uint32 ping_histogram_25 = 41;</code>
     */
    public boolean hasPingHistogram25() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 ping_histogram_25 = 41;</code>
     */
    public int getPingHistogram25() {
      return pingHistogram25_;
    }

    public static final int PING_HISTOGRAM_50_FIELD_NUMBER = 42;
    private int pingHistogram50_;
    /**
     * <code>optional uint32 ping_histogram_50 = 42;</code>
     */
    public boolean hasPingHistogram50() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 ping_histogram_50 = 42;</code>
     */
    public int getPingHistogram50() {
      return pingHistogram50_;
    }

    public static final int PING_HISTOGRAM_75_FIELD_NUMBER = 43;
    private int pingHistogram75_;
    /**
     * <code>optional uint32 ping_histogram_75 = 43;</code>
     */
    public boolean hasPingHistogram75() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 ping_histogram_75 = 43;</code>
     */
    public int getPingHistogram75() {
      return pingHistogram75_;
    }

    public static final int PING_HISTOGRAM_100_FIELD_NUMBER = 44;
    private int pingHistogram100_;
    /**
     * <code>optional uint32 ping_histogram_100 = 44;</code>
     */
    public boolean hasPingHistogram100() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 ping_histogram_100 = 44;</code>
     */
    public int getPingHistogram100() {
      return pingHistogram100_;
    }

    public static final int PING_HISTOGRAM_125_FIELD_NUMBER = 45;
    private int pingHistogram125_;
    /**
     * <code>optional uint32 ping_histogram_125 = 45;</code>
     */
    public boolean hasPingHistogram125() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 ping_histogram_125 = 45;</code>
     */
    public int getPingHistogram125() {
      return pingHistogram125_;
    }

    public static final int PING_HISTOGRAM_150_FIELD_NUMBER = 46;
    private int pingHistogram150_;
    /**
     * <code>optional uint32 ping_histogram_150 = 46;</code>
     */
    public boolean hasPingHistogram150() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 ping_histogram_150 = 46;</code>
     */
    public int getPingHistogram150() {
      return pingHistogram150_;
    }

    public static final int PING_HISTOGRAM_200_FIELD_NUMBER = 47;
    private int pingHistogram200_;
    /**
     * <code>optional uint32 ping_histogram_200 = 47;</code>
     */
    public boolean hasPingHistogram200() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 ping_histogram_200 = 47;</code>
     */
    public int getPingHistogram200() {
      return pingHistogram200_;
    }

    public static final int PING_HISTOGRAM_300_FIELD_NUMBER = 48;
    private int pingHistogram300_;
    /**
     * <code>optional uint32 ping_histogram_300 = 48;</code>
     */
    public boolean hasPingHistogram300() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 ping_histogram_300 = 48;</code>
     */
    public int getPingHistogram300() {
      return pingHistogram300_;
    }

    public static final int PING_HISTOGRAM_MAX_FIELD_NUMBER = 49;
    private int pingHistogramMax_;
    /**
     * <code>optional uint32 ping_histogram_max = 49;</code>
     */
    public boolean hasPingHistogramMax() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 ping_histogram_max = 49;</code>
     */
    public int getPingHistogramMax() {
      return pingHistogramMax_;
    }

    public static final int PING_NTILE_5TH_FIELD_NUMBER = 50;
    private int pingNtile5Th_;
    /**
     * <code>optional uint32 ping_ntile_5th = 50;</code>
     */
    public boolean hasPingNtile5Th() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional uint32 ping_ntile_5th = 50;</code>
     */
    public int getPingNtile5Th() {
      return pingNtile5Th_;
    }

    public static final int PING_NTILE_50TH_FIELD_NUMBER = 51;
    private int pingNtile50Th_;
    /**
     * <code>optional uint32 ping_ntile_50th = 51;</code>
     */
    public boolean hasPingNtile50Th() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 ping_ntile_50th = 51;</code>
     */
    public int getPingNtile50Th() {
      return pingNtile50Th_;
    }

    public static final int PING_NTILE_75TH_FIELD_NUMBER = 52;
    private int pingNtile75Th_;
    /**
     * <code>optional uint32 ping_ntile_75th = 52;</code>
     */
    public boolean hasPingNtile75Th() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 ping_ntile_75th = 52;</code>
     */
    public int getPingNtile75Th() {
      return pingNtile75Th_;
    }

    public static final int PING_NTILE_95TH_FIELD_NUMBER = 53;
    private int pingNtile95Th_;
    /**
     * <code>optional uint32 ping_ntile_95th = 53;</code>
     */
    public boolean hasPingNtile95Th() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 ping_ntile_95th = 53;</code>
     */
    public int getPingNtile95Th() {
      return pingNtile95Th_;
    }

    public static final int PING_NTILE_98TH_FIELD_NUMBER = 54;
    private int pingNtile98Th_;
    /**
     * <code>optional uint32 ping_ntile_98th = 54;</code>
     */
    public boolean hasPingNtile98Th() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 ping_ntile_98th = 54;</code>
     */
    public int getPingNtile98Th() {
      return pingNtile98Th_;
    }

    public static final int JITTER_HISTOGRAM_NEGLIGIBLE_FIELD_NUMBER = 61;
    private int jitterHistogramNegligible_;
    /**
     * <code>optional uint32 jitter_histogram_negligible = 61;</code>
     */
    public boolean hasJitterHistogramNegligible() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 jitter_histogram_negligible = 61;</code>
     */
    public int getJitterHistogramNegligible() {
      return jitterHistogramNegligible_;
    }

    public static final int JITTER_HISTOGRAM_1_FIELD_NUMBER = 62;
    private int jitterHistogram1_;
    /**
     * <code>optional uint32 jitter_histogram_1 = 62;</code>
     */
    public boolean hasJitterHistogram1() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 jitter_histogram_1 = 62;</code>
     */
    public int getJitterHistogram1() {
      return jitterHistogram1_;
    }

    public static final int JITTER_HISTOGRAM_2_FIELD_NUMBER = 63;
    private int jitterHistogram2_;
    /**
     * <code>optional uint32 jitter_histogram_2 = 63;</code>
     */
    public boolean hasJitterHistogram2() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 jitter_histogram_2 = 63;</code>
     */
    public int getJitterHistogram2() {
      return jitterHistogram2_;
    }

    public static final int JITTER_HISTOGRAM_5_FIELD_NUMBER = 64;
    private int jitterHistogram5_;
    /**
     * <code>optional uint32 jitter_histogram_5 = 64;</code>
     */
    public boolean hasJitterHistogram5() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 jitter_histogram_5 = 64;</code>
     */
    public int getJitterHistogram5() {
      return jitterHistogram5_;
    }

    public static final int JITTER_HISTOGRAM_10_FIELD_NUMBER = 65;
    private int jitterHistogram10_;
    /**
     * <code>optional uint32 jitter_histogram_10 = 65;</code>
     */
    public boolean hasJitterHistogram10() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 jitter_histogram_10 = 65;</code>
     */
    public int getJitterHistogram10() {
      return jitterHistogram10_;
    }

    public static final int JITTER_HISTOGRAM_20_FIELD_NUMBER = 66;
    private int jitterHistogram20_;
    /**
     * <code>optional uint32 jitter_histogram_20 = 66;</code>
     */
    public boolean hasJitterHistogram20() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 jitter_histogram_20 = 66;</code>
     */
    public int getJitterHistogram20() {
      return jitterHistogram20_;
    }

    public static final int TXSPEED_MAX_FIELD_NUMBER = 67;
    private int txspeedMax_;
    /**
     * <code>optional uint32 txspeed_max = 67;</code>
     */
    public boolean hasTxspeedMax() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 txspeed_max = 67;</code>
     */
    public int getTxspeedMax() {
      return txspeedMax_;
    }

    public static final int TXSPEED_HISTOGRAM_16_FIELD_NUMBER = 68;
    private int txspeedHistogram16_;
    /**
     * <code>optional uint32 txspeed_histogram_16 = 68;</code>
     */
    public boolean hasTxspeedHistogram16() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 txspeed_histogram_16 = 68;</code>
     */
    public int getTxspeedHistogram16() {
      return txspeedHistogram16_;
    }

    public static final int TXSPEED_HISTOGRAM_32_FIELD_NUMBER = 69;
    private int txspeedHistogram32_;
    /**
     * <code>optional uint32 txspeed_histogram_32 = 69;</code>
     */
    public boolean hasTxspeedHistogram32() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_32 = 69;</code>
     */
    public int getTxspeedHistogram32() {
      return txspeedHistogram32_;
    }

    public static final int TXSPEED_HISTOGRAM_64_FIELD_NUMBER = 70;
    private int txspeedHistogram64_;
    /**
     * <code>optional uint32 txspeed_histogram_64 = 70;</code>
     */
    public boolean hasTxspeedHistogram64() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_64 = 70;</code>
     */
    public int getTxspeedHistogram64() {
      return txspeedHistogram64_;
    }

    public static final int TXSPEED_HISTOGRAM_128_FIELD_NUMBER = 71;
    private int txspeedHistogram128_;
    /**
     * <code>optional uint32 txspeed_histogram_128 = 71;</code>
     */
    public boolean hasTxspeedHistogram128() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_128 = 71;</code>
     */
    public int getTxspeedHistogram128() {
      return txspeedHistogram128_;
    }

    public static final int TXSPEED_HISTOGRAM_256_FIELD_NUMBER = 72;
    private int txspeedHistogram256_;
    /**
     * <code>optional uint32 txspeed_histogram_256 = 72;</code>
     */
    public boolean hasTxspeedHistogram256() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_256 = 72;</code>
     */
    public int getTxspeedHistogram256() {
      return txspeedHistogram256_;
    }

    public static final int TXSPEED_HISTOGRAM_512_FIELD_NUMBER = 73;
    private int txspeedHistogram512_;
    /**
     * <code>optional uint32 txspeed_histogram_512 = 73;</code>
     */
    public boolean hasTxspeedHistogram512() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_512 = 73;</code>
     */
    public int getTxspeedHistogram512() {
      return txspeedHistogram512_;
    }

    public static final int TXSPEED_HISTOGRAM_1024_FIELD_NUMBER = 74;
    private int txspeedHistogram1024_;
    /**
     * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
     */
    public boolean hasTxspeedHistogram1024() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
     */
    public int getTxspeedHistogram1024() {
      return txspeedHistogram1024_;
    }

    public static final int TXSPEED_HISTOGRAM_MAX_FIELD_NUMBER = 75;
    private int txspeedHistogramMax_;
    /**
     * <code>optional uint32 txspeed_histogram_max = 75;</code>
     */
    public boolean hasTxspeedHistogramMax() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 txspeed_histogram_max = 75;</code>
     */
    public int getTxspeedHistogramMax() {
      return txspeedHistogramMax_;
    }

    public static final int TXSPEED_NTILE_5TH_FIELD_NUMBER = 76;
    private int txspeedNtile5Th_;
    /**
     * <code>optional uint32 txspeed_ntile_5th = 76;</code>
     */
    public boolean hasTxspeedNtile5Th() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 txspeed_ntile_5th = 76;</code>
     */
    public int getTxspeedNtile5Th() {
      return txspeedNtile5Th_;
    }

    public static final int TXSPEED_NTILE_50TH_FIELD_NUMBER = 77;
    private int txspeedNtile50Th_;
    /**
     * <code>optional uint32 txspeed_ntile_50th = 77;</code>
     */
    public boolean hasTxspeedNtile50Th() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 txspeed_ntile_50th = 77;</code>
     */
    public int getTxspeedNtile50Th() {
      return txspeedNtile50Th_;
    }

    public static final int TXSPEED_NTILE_75TH_FIELD_NUMBER = 78;
    private int txspeedNtile75Th_;
    /**
     * <code>optional uint32 txspeed_ntile_75th = 78;</code>
     */
    public boolean hasTxspeedNtile75Th() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 txspeed_ntile_75th = 78;</code>
     */
    public int getTxspeedNtile75Th() {
      return txspeedNtile75Th_;
    }

    public static final int TXSPEED_NTILE_95TH_FIELD_NUMBER = 79;
    private int txspeedNtile95Th_;
    /**
     * <code>optional uint32 txspeed_ntile_95th = 79;</code>
     */
    public boolean hasTxspeedNtile95Th() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 txspeed_ntile_95th = 79;</code>
     */
    public int getTxspeedNtile95Th() {
      return txspeedNtile95Th_;
    }

    public static final int TXSPEED_NTILE_98TH_FIELD_NUMBER = 80;
    private int txspeedNtile98Th_;
    /**
     * <code>optional uint32 txspeed_ntile_98th = 80;</code>
     */
    public boolean hasTxspeedNtile98Th() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 txspeed_ntile_98th = 80;</code>
     */
    public int getTxspeedNtile98Th() {
      return txspeedNtile98Th_;
    }

    public static final int RXSPEED_MAX_FIELD_NUMBER = 81;
    private int rxspeedMax_;
    /**
     * <code>optional uint32 rxspeed_max = 81;</code>
     */
    public boolean hasRxspeedMax() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 rxspeed_max = 81;</code>
     */
    public int getRxspeedMax() {
      return rxspeedMax_;
    }

    public static final int RXSPEED_HISTOGRAM_16_FIELD_NUMBER = 82;
    private int rxspeedHistogram16_;
    /**
     * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
     */
    public boolean hasRxspeedHistogram16() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
     */
    public int getRxspeedHistogram16() {
      return rxspeedHistogram16_;
    }

    public static final int RXSPEED_HISTOGRAM_32_FIELD_NUMBER = 83;
    private int rxspeedHistogram32_;
    /**
     * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
     */
    public boolean hasRxspeedHistogram32() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
     */
    public int getRxspeedHistogram32() {
      return rxspeedHistogram32_;
    }

    public static final int RXSPEED_HISTOGRAM_64_FIELD_NUMBER = 84;
    private int rxspeedHistogram64_;
    /**
     * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
     */
    public boolean hasRxspeedHistogram64() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
     */
    public int getRxspeedHistogram64() {
      return rxspeedHistogram64_;
    }

    public static final int RXSPEED_HISTOGRAM_128_FIELD_NUMBER = 85;
    private int rxspeedHistogram128_;
    /**
     * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
     */
    public boolean hasRxspeedHistogram128() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
     */
    public int getRxspeedHistogram128() {
      return rxspeedHistogram128_;
    }

    public static final int RXSPEED_HISTOGRAM_256_FIELD_NUMBER = 86;
    private int rxspeedHistogram256_;
    /**
     * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
     */
    public boolean hasRxspeedHistogram256() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
     */
    public int getRxspeedHistogram256() {
      return rxspeedHistogram256_;
    }

    public static final int RXSPEED_HISTOGRAM_512_FIELD_NUMBER = 87;
    private int rxspeedHistogram512_;
    /**
     * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
     */
    public boolean hasRxspeedHistogram512() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
     */
    public int getRxspeedHistogram512() {
      return rxspeedHistogram512_;
    }

    public static final int RXSPEED_HISTOGRAM_1024_FIELD_NUMBER = 88;
    private int rxspeedHistogram1024_;
    /**
     * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
     */
    public boolean hasRxspeedHistogram1024() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
     */
    public int getRxspeedHistogram1024() {
      return rxspeedHistogram1024_;
    }

    public static final int RXSPEED_HISTOGRAM_MAX_FIELD_NUMBER = 89;
    private int rxspeedHistogramMax_;
    /**
     * <code>optional uint32 rxspeed_histogram_max = 89;</code>
     */
    public boolean hasRxspeedHistogramMax() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 rxspeed_histogram_max = 89;</code>
     */
    public int getRxspeedHistogramMax() {
      return rxspeedHistogramMax_;
    }

    public static final int RXSPEED_NTILE_5TH_FIELD_NUMBER = 90;
    private int rxspeedNtile5Th_;
    /**
     * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
     */
    public boolean hasRxspeedNtile5Th() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
     */
    public int getRxspeedNtile5Th() {
      return rxspeedNtile5Th_;
    }

    public static final int RXSPEED_NTILE_50TH_FIELD_NUMBER = 91;
    private int rxspeedNtile50Th_;
    /**
     * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
     */
    public boolean hasRxspeedNtile50Th() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
     */
    public int getRxspeedNtile50Th() {
      return rxspeedNtile50Th_;
    }

    public static final int RXSPEED_NTILE_75TH_FIELD_NUMBER = 92;
    private int rxspeedNtile75Th_;
    /**
     * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
     */
    public boolean hasRxspeedNtile75Th() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
     */
    public int getRxspeedNtile75Th() {
      return rxspeedNtile75Th_;
    }

    public static final int RXSPEED_NTILE_95TH_FIELD_NUMBER = 93;
    private int rxspeedNtile95Th_;
    /**
     * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
     */
    public boolean hasRxspeedNtile95Th() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
     */
    public int getRxspeedNtile95Th() {
      return rxspeedNtile95Th_;
    }

    public static final int RXSPEED_NTILE_98TH_FIELD_NUMBER = 94;
    private int rxspeedNtile98Th_;
    /**
     * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
     */
    public boolean hasRxspeedNtile98Th() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
     */
    public int getRxspeedNtile98Th() {
      return rxspeedNtile98Th_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(3, packetsSent_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(4, kbSent_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(5, packetsRecv_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(6, kbRecv_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt64(7, packetsRecvSequenced_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(8, packetsRecvDropped_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt64(9, packetsRecvOutOfOrder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt64(10, packetsRecvDuplicate_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt64(11, packetsRecvLurch_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(21, qualityHistogram100_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(22, qualityHistogram99_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(23, qualityHistogram97_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(24, qualityHistogram95_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(25, qualityHistogram90_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(26, qualityHistogram75_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(27, qualityHistogram50_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(28, qualityHistogram1_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(29, qualityHistogramDead_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(30, qualityNtile2Nd_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(31, qualityNtile5Th_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(32, qualityNtile25Th_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(33, qualityNtile50Th_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(41, pingHistogram25_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(42, pingHistogram50_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(43, pingHistogram75_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(44, pingHistogram100_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(45, pingHistogram125_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(46, pingHistogram150_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(47, pingHistogram200_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(48, pingHistogram300_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(49, pingHistogramMax_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeUInt32(50, pingNtile5Th_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(51, pingNtile50Th_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(52, pingNtile75Th_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(53, pingNtile95Th_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(54, pingNtile98Th_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(61, jitterHistogramNegligible_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(62, jitterHistogram1_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(63, jitterHistogram2_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(64, jitterHistogram5_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(65, jitterHistogram10_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(66, jitterHistogram20_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(67, txspeedMax_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(68, txspeedHistogram16_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(69, txspeedHistogram32_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(70, txspeedHistogram64_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(71, txspeedHistogram128_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(72, txspeedHistogram256_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(73, txspeedHistogram512_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(74, txspeedHistogram1024_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(75, txspeedHistogramMax_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(76, txspeedNtile5Th_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(77, txspeedNtile50Th_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(78, txspeedNtile75Th_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(79, txspeedNtile95Th_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(80, txspeedNtile98Th_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(81, rxspeedMax_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(82, rxspeedHistogram16_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(83, rxspeedHistogram32_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(84, rxspeedHistogram64_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(85, rxspeedHistogram128_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(86, rxspeedHistogram256_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(87, rxspeedHistogram512_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeUInt32(88, rxspeedHistogram1024_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(89, rxspeedHistogramMax_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(90, rxspeedNtile5Th_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(91, rxspeedNtile50Th_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(92, rxspeedNtile75Th_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(93, rxspeedNtile95Th_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(94, rxspeedNtile98Th_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, packetsSent_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, kbSent_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, packetsRecv_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, kbRecv_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, packetsRecvSequenced_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, packetsRecvDropped_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, packetsRecvOutOfOrder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(10, packetsRecvDuplicate_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(11, packetsRecvLurch_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, qualityHistogram100_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, qualityHistogram99_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, qualityHistogram97_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, qualityHistogram95_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, qualityHistogram90_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, qualityHistogram75_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, qualityHistogram50_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(28, qualityHistogram1_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, qualityHistogramDead_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, qualityNtile2Nd_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, qualityNtile5Th_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, qualityNtile25Th_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, qualityNtile50Th_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(41, pingHistogram25_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(42, pingHistogram50_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(43, pingHistogram75_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(44, pingHistogram100_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(45, pingHistogram125_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(46, pingHistogram150_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(47, pingHistogram200_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(48, pingHistogram300_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(49, pingHistogramMax_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(50, pingNtile5Th_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(51, pingNtile50Th_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(52, pingNtile75Th_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(53, pingNtile95Th_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(54, pingNtile98Th_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(61, jitterHistogramNegligible_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(62, jitterHistogram1_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(63, jitterHistogram2_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(64, jitterHistogram5_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(65, jitterHistogram10_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(66, jitterHistogram20_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(67, txspeedMax_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(68, txspeedHistogram16_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(69, txspeedHistogram32_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(70, txspeedHistogram64_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(71, txspeedHistogram128_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(72, txspeedHistogram256_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(73, txspeedHistogram512_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(74, txspeedHistogram1024_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(75, txspeedHistogramMax_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(76, txspeedNtile5Th_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(77, txspeedNtile50Th_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(78, txspeedNtile75Th_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(79, txspeedNtile95Th_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(80, txspeedNtile98Th_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(81, rxspeedMax_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(82, rxspeedHistogram16_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(83, rxspeedHistogram32_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(84, rxspeedHistogram64_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(85, rxspeedHistogram128_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(86, rxspeedHistogram256_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(87, rxspeedHistogram512_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(88, rxspeedHistogram1024_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(89, rxspeedHistogramMax_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(90, rxspeedNtile5Th_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(91, rxspeedNtile50Th_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(92, rxspeedNtile75Th_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(93, rxspeedNtile95Th_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(94, rxspeedNtile98Th_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats) obj;

      boolean result = true;
      result = result && (hasPacketsSent() == other.hasPacketsSent());
      if (hasPacketsSent()) {
        result = result && (getPacketsSent()
            == other.getPacketsSent());
      }
      result = result && (hasKbSent() == other.hasKbSent());
      if (hasKbSent()) {
        result = result && (getKbSent()
            == other.getKbSent());
      }
      result = result && (hasPacketsRecv() == other.hasPacketsRecv());
      if (hasPacketsRecv()) {
        result = result && (getPacketsRecv()
            == other.getPacketsRecv());
      }
      result = result && (hasKbRecv() == other.hasKbRecv());
      if (hasKbRecv()) {
        result = result && (getKbRecv()
            == other.getKbRecv());
      }
      result = result && (hasPacketsRecvSequenced() == other.hasPacketsRecvSequenced());
      if (hasPacketsRecvSequenced()) {
        result = result && (getPacketsRecvSequenced()
            == other.getPacketsRecvSequenced());
      }
      result = result && (hasPacketsRecvDropped() == other.hasPacketsRecvDropped());
      if (hasPacketsRecvDropped()) {
        result = result && (getPacketsRecvDropped()
            == other.getPacketsRecvDropped());
      }
      result = result && (hasPacketsRecvOutOfOrder() == other.hasPacketsRecvOutOfOrder());
      if (hasPacketsRecvOutOfOrder()) {
        result = result && (getPacketsRecvOutOfOrder()
            == other.getPacketsRecvOutOfOrder());
      }
      result = result && (hasPacketsRecvDuplicate() == other.hasPacketsRecvDuplicate());
      if (hasPacketsRecvDuplicate()) {
        result = result && (getPacketsRecvDuplicate()
            == other.getPacketsRecvDuplicate());
      }
      result = result && (hasPacketsRecvLurch() == other.hasPacketsRecvLurch());
      if (hasPacketsRecvLurch()) {
        result = result && (getPacketsRecvLurch()
            == other.getPacketsRecvLurch());
      }
      result = result && (hasQualityHistogram100() == other.hasQualityHistogram100());
      if (hasQualityHistogram100()) {
        result = result && (getQualityHistogram100()
            == other.getQualityHistogram100());
      }
      result = result && (hasQualityHistogram99() == other.hasQualityHistogram99());
      if (hasQualityHistogram99()) {
        result = result && (getQualityHistogram99()
            == other.getQualityHistogram99());
      }
      result = result && (hasQualityHistogram97() == other.hasQualityHistogram97());
      if (hasQualityHistogram97()) {
        result = result && (getQualityHistogram97()
            == other.getQualityHistogram97());
      }
      result = result && (hasQualityHistogram95() == other.hasQualityHistogram95());
      if (hasQualityHistogram95()) {
        result = result && (getQualityHistogram95()
            == other.getQualityHistogram95());
      }
      result = result && (hasQualityHistogram90() == other.hasQualityHistogram90());
      if (hasQualityHistogram90()) {
        result = result && (getQualityHistogram90()
            == other.getQualityHistogram90());
      }
      result = result && (hasQualityHistogram75() == other.hasQualityHistogram75());
      if (hasQualityHistogram75()) {
        result = result && (getQualityHistogram75()
            == other.getQualityHistogram75());
      }
      result = result && (hasQualityHistogram50() == other.hasQualityHistogram50());
      if (hasQualityHistogram50()) {
        result = result && (getQualityHistogram50()
            == other.getQualityHistogram50());
      }
      result = result && (hasQualityHistogram1() == other.hasQualityHistogram1());
      if (hasQualityHistogram1()) {
        result = result && (getQualityHistogram1()
            == other.getQualityHistogram1());
      }
      result = result && (hasQualityHistogramDead() == other.hasQualityHistogramDead());
      if (hasQualityHistogramDead()) {
        result = result && (getQualityHistogramDead()
            == other.getQualityHistogramDead());
      }
      result = result && (hasQualityNtile2Nd() == other.hasQualityNtile2Nd());
      if (hasQualityNtile2Nd()) {
        result = result && (getQualityNtile2Nd()
            == other.getQualityNtile2Nd());
      }
      result = result && (hasQualityNtile5Th() == other.hasQualityNtile5Th());
      if (hasQualityNtile5Th()) {
        result = result && (getQualityNtile5Th()
            == other.getQualityNtile5Th());
      }
      result = result && (hasQualityNtile25Th() == other.hasQualityNtile25Th());
      if (hasQualityNtile25Th()) {
        result = result && (getQualityNtile25Th()
            == other.getQualityNtile25Th());
      }
      result = result && (hasQualityNtile50Th() == other.hasQualityNtile50Th());
      if (hasQualityNtile50Th()) {
        result = result && (getQualityNtile50Th()
            == other.getQualityNtile50Th());
      }
      result = result && (hasPingHistogram25() == other.hasPingHistogram25());
      if (hasPingHistogram25()) {
        result = result && (getPingHistogram25()
            == other.getPingHistogram25());
      }
      result = result && (hasPingHistogram50() == other.hasPingHistogram50());
      if (hasPingHistogram50()) {
        result = result && (getPingHistogram50()
            == other.getPingHistogram50());
      }
      result = result && (hasPingHistogram75() == other.hasPingHistogram75());
      if (hasPingHistogram75()) {
        result = result && (getPingHistogram75()
            == other.getPingHistogram75());
      }
      result = result && (hasPingHistogram100() == other.hasPingHistogram100());
      if (hasPingHistogram100()) {
        result = result && (getPingHistogram100()
            == other.getPingHistogram100());
      }
      result = result && (hasPingHistogram125() == other.hasPingHistogram125());
      if (hasPingHistogram125()) {
        result = result && (getPingHistogram125()
            == other.getPingHistogram125());
      }
      result = result && (hasPingHistogram150() == other.hasPingHistogram150());
      if (hasPingHistogram150()) {
        result = result && (getPingHistogram150()
            == other.getPingHistogram150());
      }
      result = result && (hasPingHistogram200() == other.hasPingHistogram200());
      if (hasPingHistogram200()) {
        result = result && (getPingHistogram200()
            == other.getPingHistogram200());
      }
      result = result && (hasPingHistogram300() == other.hasPingHistogram300());
      if (hasPingHistogram300()) {
        result = result && (getPingHistogram300()
            == other.getPingHistogram300());
      }
      result = result && (hasPingHistogramMax() == other.hasPingHistogramMax());
      if (hasPingHistogramMax()) {
        result = result && (getPingHistogramMax()
            == other.getPingHistogramMax());
      }
      result = result && (hasPingNtile5Th() == other.hasPingNtile5Th());
      if (hasPingNtile5Th()) {
        result = result && (getPingNtile5Th()
            == other.getPingNtile5Th());
      }
      result = result && (hasPingNtile50Th() == other.hasPingNtile50Th());
      if (hasPingNtile50Th()) {
        result = result && (getPingNtile50Th()
            == other.getPingNtile50Th());
      }
      result = result && (hasPingNtile75Th() == other.hasPingNtile75Th());
      if (hasPingNtile75Th()) {
        result = result && (getPingNtile75Th()
            == other.getPingNtile75Th());
      }
      result = result && (hasPingNtile95Th() == other.hasPingNtile95Th());
      if (hasPingNtile95Th()) {
        result = result && (getPingNtile95Th()
            == other.getPingNtile95Th());
      }
      result = result && (hasPingNtile98Th() == other.hasPingNtile98Th());
      if (hasPingNtile98Th()) {
        result = result && (getPingNtile98Th()
            == other.getPingNtile98Th());
      }
      result = result && (hasJitterHistogramNegligible() == other.hasJitterHistogramNegligible());
      if (hasJitterHistogramNegligible()) {
        result = result && (getJitterHistogramNegligible()
            == other.getJitterHistogramNegligible());
      }
      result = result && (hasJitterHistogram1() == other.hasJitterHistogram1());
      if (hasJitterHistogram1()) {
        result = result && (getJitterHistogram1()
            == other.getJitterHistogram1());
      }
      result = result && (hasJitterHistogram2() == other.hasJitterHistogram2());
      if (hasJitterHistogram2()) {
        result = result && (getJitterHistogram2()
            == other.getJitterHistogram2());
      }
      result = result && (hasJitterHistogram5() == other.hasJitterHistogram5());
      if (hasJitterHistogram5()) {
        result = result && (getJitterHistogram5()
            == other.getJitterHistogram5());
      }
      result = result && (hasJitterHistogram10() == other.hasJitterHistogram10());
      if (hasJitterHistogram10()) {
        result = result && (getJitterHistogram10()
            == other.getJitterHistogram10());
      }
      result = result && (hasJitterHistogram20() == other.hasJitterHistogram20());
      if (hasJitterHistogram20()) {
        result = result && (getJitterHistogram20()
            == other.getJitterHistogram20());
      }
      result = result && (hasTxspeedMax() == other.hasTxspeedMax());
      if (hasTxspeedMax()) {
        result = result && (getTxspeedMax()
            == other.getTxspeedMax());
      }
      result = result && (hasTxspeedHistogram16() == other.hasTxspeedHistogram16());
      if (hasTxspeedHistogram16()) {
        result = result && (getTxspeedHistogram16()
            == other.getTxspeedHistogram16());
      }
      result = result && (hasTxspeedHistogram32() == other.hasTxspeedHistogram32());
      if (hasTxspeedHistogram32()) {
        result = result && (getTxspeedHistogram32()
            == other.getTxspeedHistogram32());
      }
      result = result && (hasTxspeedHistogram64() == other.hasTxspeedHistogram64());
      if (hasTxspeedHistogram64()) {
        result = result && (getTxspeedHistogram64()
            == other.getTxspeedHistogram64());
      }
      result = result && (hasTxspeedHistogram128() == other.hasTxspeedHistogram128());
      if (hasTxspeedHistogram128()) {
        result = result && (getTxspeedHistogram128()
            == other.getTxspeedHistogram128());
      }
      result = result && (hasTxspeedHistogram256() == other.hasTxspeedHistogram256());
      if (hasTxspeedHistogram256()) {
        result = result && (getTxspeedHistogram256()
            == other.getTxspeedHistogram256());
      }
      result = result && (hasTxspeedHistogram512() == other.hasTxspeedHistogram512());
      if (hasTxspeedHistogram512()) {
        result = result && (getTxspeedHistogram512()
            == other.getTxspeedHistogram512());
      }
      result = result && (hasTxspeedHistogram1024() == other.hasTxspeedHistogram1024());
      if (hasTxspeedHistogram1024()) {
        result = result && (getTxspeedHistogram1024()
            == other.getTxspeedHistogram1024());
      }
      result = result && (hasTxspeedHistogramMax() == other.hasTxspeedHistogramMax());
      if (hasTxspeedHistogramMax()) {
        result = result && (getTxspeedHistogramMax()
            == other.getTxspeedHistogramMax());
      }
      result = result && (hasTxspeedNtile5Th() == other.hasTxspeedNtile5Th());
      if (hasTxspeedNtile5Th()) {
        result = result && (getTxspeedNtile5Th()
            == other.getTxspeedNtile5Th());
      }
      result = result && (hasTxspeedNtile50Th() == other.hasTxspeedNtile50Th());
      if (hasTxspeedNtile50Th()) {
        result = result && (getTxspeedNtile50Th()
            == other.getTxspeedNtile50Th());
      }
      result = result && (hasTxspeedNtile75Th() == other.hasTxspeedNtile75Th());
      if (hasTxspeedNtile75Th()) {
        result = result && (getTxspeedNtile75Th()
            == other.getTxspeedNtile75Th());
      }
      result = result && (hasTxspeedNtile95Th() == other.hasTxspeedNtile95Th());
      if (hasTxspeedNtile95Th()) {
        result = result && (getTxspeedNtile95Th()
            == other.getTxspeedNtile95Th());
      }
      result = result && (hasTxspeedNtile98Th() == other.hasTxspeedNtile98Th());
      if (hasTxspeedNtile98Th()) {
        result = result && (getTxspeedNtile98Th()
            == other.getTxspeedNtile98Th());
      }
      result = result && (hasRxspeedMax() == other.hasRxspeedMax());
      if (hasRxspeedMax()) {
        result = result && (getRxspeedMax()
            == other.getRxspeedMax());
      }
      result = result && (hasRxspeedHistogram16() == other.hasRxspeedHistogram16());
      if (hasRxspeedHistogram16()) {
        result = result && (getRxspeedHistogram16()
            == other.getRxspeedHistogram16());
      }
      result = result && (hasRxspeedHistogram32() == other.hasRxspeedHistogram32());
      if (hasRxspeedHistogram32()) {
        result = result && (getRxspeedHistogram32()
            == other.getRxspeedHistogram32());
      }
      result = result && (hasRxspeedHistogram64() == other.hasRxspeedHistogram64());
      if (hasRxspeedHistogram64()) {
        result = result && (getRxspeedHistogram64()
            == other.getRxspeedHistogram64());
      }
      result = result && (hasRxspeedHistogram128() == other.hasRxspeedHistogram128());
      if (hasRxspeedHistogram128()) {
        result = result && (getRxspeedHistogram128()
            == other.getRxspeedHistogram128());
      }
      result = result && (hasRxspeedHistogram256() == other.hasRxspeedHistogram256());
      if (hasRxspeedHistogram256()) {
        result = result && (getRxspeedHistogram256()
            == other.getRxspeedHistogram256());
      }
      result = result && (hasRxspeedHistogram512() == other.hasRxspeedHistogram512());
      if (hasRxspeedHistogram512()) {
        result = result && (getRxspeedHistogram512()
            == other.getRxspeedHistogram512());
      }
      result = result && (hasRxspeedHistogram1024() == other.hasRxspeedHistogram1024());
      if (hasRxspeedHistogram1024()) {
        result = result && (getRxspeedHistogram1024()
            == other.getRxspeedHistogram1024());
      }
      result = result && (hasRxspeedHistogramMax() == other.hasRxspeedHistogramMax());
      if (hasRxspeedHistogramMax()) {
        result = result && (getRxspeedHistogramMax()
            == other.getRxspeedHistogramMax());
      }
      result = result && (hasRxspeedNtile5Th() == other.hasRxspeedNtile5Th());
      if (hasRxspeedNtile5Th()) {
        result = result && (getRxspeedNtile5Th()
            == other.getRxspeedNtile5Th());
      }
      result = result && (hasRxspeedNtile50Th() == other.hasRxspeedNtile50Th());
      if (hasRxspeedNtile50Th()) {
        result = result && (getRxspeedNtile50Th()
            == other.getRxspeedNtile50Th());
      }
      result = result && (hasRxspeedNtile75Th() == other.hasRxspeedNtile75Th());
      if (hasRxspeedNtile75Th()) {
        result = result && (getRxspeedNtile75Th()
            == other.getRxspeedNtile75Th());
      }
      result = result && (hasRxspeedNtile95Th() == other.hasRxspeedNtile95Th());
      if (hasRxspeedNtile95Th()) {
        result = result && (getRxspeedNtile95Th()
            == other.getRxspeedNtile95Th());
      }
      result = result && (hasRxspeedNtile98Th() == other.hasRxspeedNtile98Th());
      if (hasRxspeedNtile98Th()) {
        result = result && (getRxspeedNtile98Th()
            == other.getRxspeedNtile98Th());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPacketsSent()) {
        hash = (37 * hash) + PACKETS_SENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsSent());
      }
      if (hasKbSent()) {
        hash = (37 * hash) + KB_SENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getKbSent());
      }
      if (hasPacketsRecv()) {
        hash = (37 * hash) + PACKETS_RECV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecv());
      }
      if (hasKbRecv()) {
        hash = (37 * hash) + KB_RECV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getKbRecv());
      }
      if (hasPacketsRecvSequenced()) {
        hash = (37 * hash) + PACKETS_RECV_SEQUENCED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecvSequenced());
      }
      if (hasPacketsRecvDropped()) {
        hash = (37 * hash) + PACKETS_RECV_DROPPED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecvDropped());
      }
      if (hasPacketsRecvOutOfOrder()) {
        hash = (37 * hash) + PACKETS_RECV_OUT_OF_ORDER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecvOutOfOrder());
      }
      if (hasPacketsRecvDuplicate()) {
        hash = (37 * hash) + PACKETS_RECV_DUPLICATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecvDuplicate());
      }
      if (hasPacketsRecvLurch()) {
        hash = (37 * hash) + PACKETS_RECV_LURCH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPacketsRecvLurch());
      }
      if (hasQualityHistogram100()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_100_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram100();
      }
      if (hasQualityHistogram99()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_99_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram99();
      }
      if (hasQualityHistogram97()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_97_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram97();
      }
      if (hasQualityHistogram95()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_95_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram95();
      }
      if (hasQualityHistogram90()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_90_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram90();
      }
      if (hasQualityHistogram75()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_75_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram75();
      }
      if (hasQualityHistogram50()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_50_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram50();
      }
      if (hasQualityHistogram1()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_1_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogram1();
      }
      if (hasQualityHistogramDead()) {
        hash = (37 * hash) + QUALITY_HISTOGRAM_DEAD_FIELD_NUMBER;
        hash = (53 * hash) + getQualityHistogramDead();
      }
      if (hasQualityNtile2Nd()) {
        hash = (37 * hash) + QUALITY_NTILE_2ND_FIELD_NUMBER;
        hash = (53 * hash) + getQualityNtile2Nd();
      }
      if (hasQualityNtile5Th()) {
        hash = (37 * hash) + QUALITY_NTILE_5TH_FIELD_NUMBER;
        hash = (53 * hash) + getQualityNtile5Th();
      }
      if (hasQualityNtile25Th()) {
        hash = (37 * hash) + QUALITY_NTILE_25TH_FIELD_NUMBER;
        hash = (53 * hash) + getQualityNtile25Th();
      }
      if (hasQualityNtile50Th()) {
        hash = (37 * hash) + QUALITY_NTILE_50TH_FIELD_NUMBER;
        hash = (53 * hash) + getQualityNtile50Th();
      }
      if (hasPingHistogram25()) {
        hash = (37 * hash) + PING_HISTOGRAM_25_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram25();
      }
      if (hasPingHistogram50()) {
        hash = (37 * hash) + PING_HISTOGRAM_50_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram50();
      }
      if (hasPingHistogram75()) {
        hash = (37 * hash) + PING_HISTOGRAM_75_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram75();
      }
      if (hasPingHistogram100()) {
        hash = (37 * hash) + PING_HISTOGRAM_100_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram100();
      }
      if (hasPingHistogram125()) {
        hash = (37 * hash) + PING_HISTOGRAM_125_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram125();
      }
      if (hasPingHistogram150()) {
        hash = (37 * hash) + PING_HISTOGRAM_150_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram150();
      }
      if (hasPingHistogram200()) {
        hash = (37 * hash) + PING_HISTOGRAM_200_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram200();
      }
      if (hasPingHistogram300()) {
        hash = (37 * hash) + PING_HISTOGRAM_300_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogram300();
      }
      if (hasPingHistogramMax()) {
        hash = (37 * hash) + PING_HISTOGRAM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getPingHistogramMax();
      }
      if (hasPingNtile5Th()) {
        hash = (37 * hash) + PING_NTILE_5TH_FIELD_NUMBER;
        hash = (53 * hash) + getPingNtile5Th();
      }
      if (hasPingNtile50Th()) {
        hash = (37 * hash) + PING_NTILE_50TH_FIELD_NUMBER;
        hash = (53 * hash) + getPingNtile50Th();
      }
      if (hasPingNtile75Th()) {
        hash = (37 * hash) + PING_NTILE_75TH_FIELD_NUMBER;
        hash = (53 * hash) + getPingNtile75Th();
      }
      if (hasPingNtile95Th()) {
        hash = (37 * hash) + PING_NTILE_95TH_FIELD_NUMBER;
        hash = (53 * hash) + getPingNtile95Th();
      }
      if (hasPingNtile98Th()) {
        hash = (37 * hash) + PING_NTILE_98TH_FIELD_NUMBER;
        hash = (53 * hash) + getPingNtile98Th();
      }
      if (hasJitterHistogramNegligible()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_NEGLIGIBLE_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogramNegligible();
      }
      if (hasJitterHistogram1()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_1_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogram1();
      }
      if (hasJitterHistogram2()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_2_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogram2();
      }
      if (hasJitterHistogram5()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_5_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogram5();
      }
      if (hasJitterHistogram10()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_10_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogram10();
      }
      if (hasJitterHistogram20()) {
        hash = (37 * hash) + JITTER_HISTOGRAM_20_FIELD_NUMBER;
        hash = (53 * hash) + getJitterHistogram20();
      }
      if (hasTxspeedMax()) {
        hash = (37 * hash) + TXSPEED_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedMax();
      }
      if (hasTxspeedHistogram16()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_16_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram16();
      }
      if (hasTxspeedHistogram32()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_32_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram32();
      }
      if (hasTxspeedHistogram64()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_64_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram64();
      }
      if (hasTxspeedHistogram128()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_128_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram128();
      }
      if (hasTxspeedHistogram256()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_256_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram256();
      }
      if (hasTxspeedHistogram512()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_512_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram512();
      }
      if (hasTxspeedHistogram1024()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_1024_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogram1024();
      }
      if (hasTxspeedHistogramMax()) {
        hash = (37 * hash) + TXSPEED_HISTOGRAM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedHistogramMax();
      }
      if (hasTxspeedNtile5Th()) {
        hash = (37 * hash) + TXSPEED_NTILE_5TH_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedNtile5Th();
      }
      if (hasTxspeedNtile50Th()) {
        hash = (37 * hash) + TXSPEED_NTILE_50TH_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedNtile50Th();
      }
      if (hasTxspeedNtile75Th()) {
        hash = (37 * hash) + TXSPEED_NTILE_75TH_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedNtile75Th();
      }
      if (hasTxspeedNtile95Th()) {
        hash = (37 * hash) + TXSPEED_NTILE_95TH_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedNtile95Th();
      }
      if (hasTxspeedNtile98Th()) {
        hash = (37 * hash) + TXSPEED_NTILE_98TH_FIELD_NUMBER;
        hash = (53 * hash) + getTxspeedNtile98Th();
      }
      if (hasRxspeedMax()) {
        hash = (37 * hash) + RXSPEED_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedMax();
      }
      if (hasRxspeedHistogram16()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_16_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram16();
      }
      if (hasRxspeedHistogram32()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_32_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram32();
      }
      if (hasRxspeedHistogram64()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_64_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram64();
      }
      if (hasRxspeedHistogram128()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_128_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram128();
      }
      if (hasRxspeedHistogram256()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_256_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram256();
      }
      if (hasRxspeedHistogram512()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_512_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram512();
      }
      if (hasRxspeedHistogram1024()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_1024_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogram1024();
      }
      if (hasRxspeedHistogramMax()) {
        hash = (37 * hash) + RXSPEED_HISTOGRAM_MAX_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedHistogramMax();
      }
      if (hasRxspeedNtile5Th()) {
        hash = (37 * hash) + RXSPEED_NTILE_5TH_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedNtile5Th();
      }
      if (hasRxspeedNtile50Th()) {
        hash = (37 * hash) + RXSPEED_NTILE_50TH_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedNtile50Th();
      }
      if (hasRxspeedNtile75Th()) {
        hash = (37 * hash) + RXSPEED_NTILE_75TH_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedNtile75Th();
      }
      if (hasRxspeedNtile95Th()) {
        hash = (37 * hash) + RXSPEED_NTILE_95TH_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedNtile95Th();
      }
      if (hasRxspeedNtile98Th()) {
        hash = (37 * hash) + RXSPEED_NTILE_98TH_FIELD_NUMBER;
        hash = (53 * hash) + getRxspeedNtile98Th();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramLinkLifetimeStats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramLinkLifetimeStats)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkLifetimeStats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        packetsSent_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        kbSent_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        packetsRecv_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        kbRecv_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        packetsRecvSequenced_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        packetsRecvDropped_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        packetsRecvOutOfOrder_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        packetsRecvDuplicate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        packetsRecvLurch_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        qualityHistogram100_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        qualityHistogram99_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        qualityHistogram97_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        qualityHistogram95_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        qualityHistogram90_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        qualityHistogram75_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        qualityHistogram50_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        qualityHistogram1_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        qualityHistogramDead_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        qualityNtile2Nd_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        qualityNtile5Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        qualityNtile25Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        qualityNtile50Th_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        pingHistogram25_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        pingHistogram50_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        pingHistogram75_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        pingHistogram100_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        pingHistogram125_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        pingHistogram150_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        pingHistogram200_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        pingHistogram300_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        pingHistogramMax_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        pingNtile5Th_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        pingNtile50Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        pingNtile75Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        pingNtile95Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        pingNtile98Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        jitterHistogramNegligible_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        jitterHistogram1_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        jitterHistogram2_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        jitterHistogram5_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        jitterHistogram10_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        jitterHistogram20_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        txspeedMax_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        txspeedHistogram16_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        txspeedHistogram32_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        txspeedHistogram64_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        txspeedHistogram128_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        txspeedHistogram256_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        txspeedHistogram512_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        txspeedHistogram1024_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        txspeedHistogramMax_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        txspeedNtile5Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        txspeedNtile50Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        txspeedNtile75Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        txspeedNtile95Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        txspeedNtile98Th_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        rxspeedMax_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        rxspeedHistogram16_ = 0;
        bitField1_ = (bitField1_ & ~0x02000000);
        rxspeedHistogram32_ = 0;
        bitField1_ = (bitField1_ & ~0x04000000);
        rxspeedHistogram64_ = 0;
        bitField1_ = (bitField1_ & ~0x08000000);
        rxspeedHistogram128_ = 0;
        bitField1_ = (bitField1_ & ~0x10000000);
        rxspeedHistogram256_ = 0;
        bitField1_ = (bitField1_ & ~0x20000000);
        rxspeedHistogram512_ = 0;
        bitField1_ = (bitField1_ & ~0x40000000);
        rxspeedHistogram1024_ = 0;
        bitField1_ = (bitField1_ & ~0x80000000);
        rxspeedHistogramMax_ = 0;
        bitField2_ = (bitField2_ & ~0x00000001);
        rxspeedNtile5Th_ = 0;
        bitField2_ = (bitField2_ & ~0x00000002);
        rxspeedNtile50Th_ = 0;
        bitField2_ = (bitField2_ & ~0x00000004);
        rxspeedNtile75Th_ = 0;
        bitField2_ = (bitField2_ & ~0x00000008);
        rxspeedNtile95Th_ = 0;
        bitField2_ = (bitField2_ & ~0x00000010);
        rxspeedNtile98Th_ = 0;
        bitField2_ = (bitField2_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.packetsSent_ = packetsSent_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.kbSent_ = kbSent_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.packetsRecv_ = packetsRecv_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.kbRecv_ = kbRecv_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.packetsRecvSequenced_ = packetsRecvSequenced_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.packetsRecvDropped_ = packetsRecvDropped_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.packetsRecvOutOfOrder_ = packetsRecvOutOfOrder_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.packetsRecvDuplicate_ = packetsRecvDuplicate_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.packetsRecvLurch_ = packetsRecvLurch_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.qualityHistogram100_ = qualityHistogram100_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.qualityHistogram99_ = qualityHistogram99_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.qualityHistogram97_ = qualityHistogram97_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.qualityHistogram95_ = qualityHistogram95_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.qualityHistogram90_ = qualityHistogram90_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.qualityHistogram75_ = qualityHistogram75_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.qualityHistogram50_ = qualityHistogram50_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.qualityHistogram1_ = qualityHistogram1_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.qualityHistogramDead_ = qualityHistogramDead_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.qualityNtile2Nd_ = qualityNtile2Nd_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.qualityNtile5Th_ = qualityNtile5Th_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.qualityNtile25Th_ = qualityNtile25Th_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.qualityNtile50Th_ = qualityNtile50Th_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.pingHistogram25_ = pingHistogram25_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.pingHistogram50_ = pingHistogram50_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.pingHistogram75_ = pingHistogram75_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.pingHistogram100_ = pingHistogram100_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.pingHistogram125_ = pingHistogram125_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.pingHistogram150_ = pingHistogram150_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.pingHistogram200_ = pingHistogram200_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.pingHistogram300_ = pingHistogram300_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.pingHistogramMax_ = pingHistogramMax_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.pingNtile5Th_ = pingNtile5Th_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.pingNtile50Th_ = pingNtile50Th_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.pingNtile75Th_ = pingNtile75Th_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.pingNtile95Th_ = pingNtile95Th_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.pingNtile98Th_ = pingNtile98Th_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.jitterHistogramNegligible_ = jitterHistogramNegligible_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.jitterHistogram1_ = jitterHistogram1_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.jitterHistogram2_ = jitterHistogram2_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.jitterHistogram5_ = jitterHistogram5_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.jitterHistogram10_ = jitterHistogram10_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.jitterHistogram20_ = jitterHistogram20_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.txspeedMax_ = txspeedMax_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.txspeedHistogram16_ = txspeedHistogram16_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.txspeedHistogram32_ = txspeedHistogram32_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.txspeedHistogram64_ = txspeedHistogram64_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.txspeedHistogram128_ = txspeedHistogram128_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.txspeedHistogram256_ = txspeedHistogram256_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.txspeedHistogram512_ = txspeedHistogram512_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.txspeedHistogram1024_ = txspeedHistogram1024_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.txspeedHistogramMax_ = txspeedHistogramMax_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.txspeedNtile5Th_ = txspeedNtile5Th_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.txspeedNtile50Th_ = txspeedNtile50Th_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.txspeedNtile75Th_ = txspeedNtile75Th_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.txspeedNtile95Th_ = txspeedNtile95Th_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.txspeedNtile98Th_ = txspeedNtile98Th_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.rxspeedMax_ = rxspeedMax_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.rxspeedHistogram16_ = rxspeedHistogram16_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.rxspeedHistogram32_ = rxspeedHistogram32_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.rxspeedHistogram64_ = rxspeedHistogram64_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.rxspeedHistogram128_ = rxspeedHistogram128_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.rxspeedHistogram256_ = rxspeedHistogram256_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.rxspeedHistogram512_ = rxspeedHistogram512_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.rxspeedHistogram1024_ = rxspeedHistogram1024_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.rxspeedHistogramMax_ = rxspeedHistogramMax_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.rxspeedNtile5Th_ = rxspeedNtile5Th_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.rxspeedNtile50Th_ = rxspeedNtile50Th_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.rxspeedNtile75Th_ = rxspeedNtile75Th_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000010;
        }
        result.rxspeedNtile95Th_ = rxspeedNtile95Th_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000020;
        }
        result.rxspeedNtile98Th_ = rxspeedNtile98Th_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance()) return this;
        if (other.hasPacketsSent()) {
          setPacketsSent(other.getPacketsSent());
        }
        if (other.hasKbSent()) {
          setKbSent(other.getKbSent());
        }
        if (other.hasPacketsRecv()) {
          setPacketsRecv(other.getPacketsRecv());
        }
        if (other.hasKbRecv()) {
          setKbRecv(other.getKbRecv());
        }
        if (other.hasPacketsRecvSequenced()) {
          setPacketsRecvSequenced(other.getPacketsRecvSequenced());
        }
        if (other.hasPacketsRecvDropped()) {
          setPacketsRecvDropped(other.getPacketsRecvDropped());
        }
        if (other.hasPacketsRecvOutOfOrder()) {
          setPacketsRecvOutOfOrder(other.getPacketsRecvOutOfOrder());
        }
        if (other.hasPacketsRecvDuplicate()) {
          setPacketsRecvDuplicate(other.getPacketsRecvDuplicate());
        }
        if (other.hasPacketsRecvLurch()) {
          setPacketsRecvLurch(other.getPacketsRecvLurch());
        }
        if (other.hasQualityHistogram100()) {
          setQualityHistogram100(other.getQualityHistogram100());
        }
        if (other.hasQualityHistogram99()) {
          setQualityHistogram99(other.getQualityHistogram99());
        }
        if (other.hasQualityHistogram97()) {
          setQualityHistogram97(other.getQualityHistogram97());
        }
        if (other.hasQualityHistogram95()) {
          setQualityHistogram95(other.getQualityHistogram95());
        }
        if (other.hasQualityHistogram90()) {
          setQualityHistogram90(other.getQualityHistogram90());
        }
        if (other.hasQualityHistogram75()) {
          setQualityHistogram75(other.getQualityHistogram75());
        }
        if (other.hasQualityHistogram50()) {
          setQualityHistogram50(other.getQualityHistogram50());
        }
        if (other.hasQualityHistogram1()) {
          setQualityHistogram1(other.getQualityHistogram1());
        }
        if (other.hasQualityHistogramDead()) {
          setQualityHistogramDead(other.getQualityHistogramDead());
        }
        if (other.hasQualityNtile2Nd()) {
          setQualityNtile2Nd(other.getQualityNtile2Nd());
        }
        if (other.hasQualityNtile5Th()) {
          setQualityNtile5Th(other.getQualityNtile5Th());
        }
        if (other.hasQualityNtile25Th()) {
          setQualityNtile25Th(other.getQualityNtile25Th());
        }
        if (other.hasQualityNtile50Th()) {
          setQualityNtile50Th(other.getQualityNtile50Th());
        }
        if (other.hasPingHistogram25()) {
          setPingHistogram25(other.getPingHistogram25());
        }
        if (other.hasPingHistogram50()) {
          setPingHistogram50(other.getPingHistogram50());
        }
        if (other.hasPingHistogram75()) {
          setPingHistogram75(other.getPingHistogram75());
        }
        if (other.hasPingHistogram100()) {
          setPingHistogram100(other.getPingHistogram100());
        }
        if (other.hasPingHistogram125()) {
          setPingHistogram125(other.getPingHistogram125());
        }
        if (other.hasPingHistogram150()) {
          setPingHistogram150(other.getPingHistogram150());
        }
        if (other.hasPingHistogram200()) {
          setPingHistogram200(other.getPingHistogram200());
        }
        if (other.hasPingHistogram300()) {
          setPingHistogram300(other.getPingHistogram300());
        }
        if (other.hasPingHistogramMax()) {
          setPingHistogramMax(other.getPingHistogramMax());
        }
        if (other.hasPingNtile5Th()) {
          setPingNtile5Th(other.getPingNtile5Th());
        }
        if (other.hasPingNtile50Th()) {
          setPingNtile50Th(other.getPingNtile50Th());
        }
        if (other.hasPingNtile75Th()) {
          setPingNtile75Th(other.getPingNtile75Th());
        }
        if (other.hasPingNtile95Th()) {
          setPingNtile95Th(other.getPingNtile95Th());
        }
        if (other.hasPingNtile98Th()) {
          setPingNtile98Th(other.getPingNtile98Th());
        }
        if (other.hasJitterHistogramNegligible()) {
          setJitterHistogramNegligible(other.getJitterHistogramNegligible());
        }
        if (other.hasJitterHistogram1()) {
          setJitterHistogram1(other.getJitterHistogram1());
        }
        if (other.hasJitterHistogram2()) {
          setJitterHistogram2(other.getJitterHistogram2());
        }
        if (other.hasJitterHistogram5()) {
          setJitterHistogram5(other.getJitterHistogram5());
        }
        if (other.hasJitterHistogram10()) {
          setJitterHistogram10(other.getJitterHistogram10());
        }
        if (other.hasJitterHistogram20()) {
          setJitterHistogram20(other.getJitterHistogram20());
        }
        if (other.hasTxspeedMax()) {
          setTxspeedMax(other.getTxspeedMax());
        }
        if (other.hasTxspeedHistogram16()) {
          setTxspeedHistogram16(other.getTxspeedHistogram16());
        }
        if (other.hasTxspeedHistogram32()) {
          setTxspeedHistogram32(other.getTxspeedHistogram32());
        }
        if (other.hasTxspeedHistogram64()) {
          setTxspeedHistogram64(other.getTxspeedHistogram64());
        }
        if (other.hasTxspeedHistogram128()) {
          setTxspeedHistogram128(other.getTxspeedHistogram128());
        }
        if (other.hasTxspeedHistogram256()) {
          setTxspeedHistogram256(other.getTxspeedHistogram256());
        }
        if (other.hasTxspeedHistogram512()) {
          setTxspeedHistogram512(other.getTxspeedHistogram512());
        }
        if (other.hasTxspeedHistogram1024()) {
          setTxspeedHistogram1024(other.getTxspeedHistogram1024());
        }
        if (other.hasTxspeedHistogramMax()) {
          setTxspeedHistogramMax(other.getTxspeedHistogramMax());
        }
        if (other.hasTxspeedNtile5Th()) {
          setTxspeedNtile5Th(other.getTxspeedNtile5Th());
        }
        if (other.hasTxspeedNtile50Th()) {
          setTxspeedNtile50Th(other.getTxspeedNtile50Th());
        }
        if (other.hasTxspeedNtile75Th()) {
          setTxspeedNtile75Th(other.getTxspeedNtile75Th());
        }
        if (other.hasTxspeedNtile95Th()) {
          setTxspeedNtile95Th(other.getTxspeedNtile95Th());
        }
        if (other.hasTxspeedNtile98Th()) {
          setTxspeedNtile98Th(other.getTxspeedNtile98Th());
        }
        if (other.hasRxspeedMax()) {
          setRxspeedMax(other.getRxspeedMax());
        }
        if (other.hasRxspeedHistogram16()) {
          setRxspeedHistogram16(other.getRxspeedHistogram16());
        }
        if (other.hasRxspeedHistogram32()) {
          setRxspeedHistogram32(other.getRxspeedHistogram32());
        }
        if (other.hasRxspeedHistogram64()) {
          setRxspeedHistogram64(other.getRxspeedHistogram64());
        }
        if (other.hasRxspeedHistogram128()) {
          setRxspeedHistogram128(other.getRxspeedHistogram128());
        }
        if (other.hasRxspeedHistogram256()) {
          setRxspeedHistogram256(other.getRxspeedHistogram256());
        }
        if (other.hasRxspeedHistogram512()) {
          setRxspeedHistogram512(other.getRxspeedHistogram512());
        }
        if (other.hasRxspeedHistogram1024()) {
          setRxspeedHistogram1024(other.getRxspeedHistogram1024());
        }
        if (other.hasRxspeedHistogramMax()) {
          setRxspeedHistogramMax(other.getRxspeedHistogramMax());
        }
        if (other.hasRxspeedNtile5Th()) {
          setRxspeedNtile5Th(other.getRxspeedNtile5Th());
        }
        if (other.hasRxspeedNtile50Th()) {
          setRxspeedNtile50Th(other.getRxspeedNtile50Th());
        }
        if (other.hasRxspeedNtile75Th()) {
          setRxspeedNtile75Th(other.getRxspeedNtile75Th());
        }
        if (other.hasRxspeedNtile95Th()) {
          setRxspeedNtile95Th(other.getRxspeedNtile95Th());
        }
        if (other.hasRxspeedNtile98Th()) {
          setRxspeedNtile98Th(other.getRxspeedNtile98Th());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      private long packetsSent_ ;
      /**
       * <code>optional uint64 packets_sent = 3;</code>
       */
      public boolean hasPacketsSent() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 packets_sent = 3;</code>
       */
      public long getPacketsSent() {
        return packetsSent_;
      }
      /**
       * <code>optional uint64 packets_sent = 3;</code>
       */
      public Builder setPacketsSent(long value) {
        bitField0_ |= 0x00000001;
        packetsSent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_sent = 3;</code>
       */
      public Builder clearPacketsSent() {
        bitField0_ = (bitField0_ & ~0x00000001);
        packetsSent_ = 0L;
        onChanged();
        return this;
      }

      private long kbSent_ ;
      /**
       * <code>optional uint64 kb_sent = 4;</code>
       */
      public boolean hasKbSent() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 kb_sent = 4;</code>
       */
      public long getKbSent() {
        return kbSent_;
      }
      /**
       * <code>optional uint64 kb_sent = 4;</code>
       */
      public Builder setKbSent(long value) {
        bitField0_ |= 0x00000002;
        kbSent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 kb_sent = 4;</code>
       */
      public Builder clearKbSent() {
        bitField0_ = (bitField0_ & ~0x00000002);
        kbSent_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecv_ ;
      /**
       * <code>optional uint64 packets_recv = 5;</code>
       */
      public boolean hasPacketsRecv() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 packets_recv = 5;</code>
       */
      public long getPacketsRecv() {
        return packetsRecv_;
      }
      /**
       * <code>optional uint64 packets_recv = 5;</code>
       */
      public Builder setPacketsRecv(long value) {
        bitField0_ |= 0x00000004;
        packetsRecv_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv = 5;</code>
       */
      public Builder clearPacketsRecv() {
        bitField0_ = (bitField0_ & ~0x00000004);
        packetsRecv_ = 0L;
        onChanged();
        return this;
      }

      private long kbRecv_ ;
      /**
       * <code>optional uint64 kb_recv = 6;</code>
       */
      public boolean hasKbRecv() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 kb_recv = 6;</code>
       */
      public long getKbRecv() {
        return kbRecv_;
      }
      /**
       * <code>optional uint64 kb_recv = 6;</code>
       */
      public Builder setKbRecv(long value) {
        bitField0_ |= 0x00000008;
        kbRecv_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 kb_recv = 6;</code>
       */
      public Builder clearKbRecv() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kbRecv_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecvSequenced_ ;
      /**
       * <code>optional uint64 packets_recv_sequenced = 7;</code>
       */
      public boolean hasPacketsRecvSequenced() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint64 packets_recv_sequenced = 7;</code>
       */
      public long getPacketsRecvSequenced() {
        return packetsRecvSequenced_;
      }
      /**
       * <code>optional uint64 packets_recv_sequenced = 7;</code>
       */
      public Builder setPacketsRecvSequenced(long value) {
        bitField0_ |= 0x00000010;
        packetsRecvSequenced_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv_sequenced = 7;</code>
       */
      public Builder clearPacketsRecvSequenced() {
        bitField0_ = (bitField0_ & ~0x00000010);
        packetsRecvSequenced_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecvDropped_ ;
      /**
       * <code>optional uint64 packets_recv_dropped = 8;</code>
       */
      public boolean hasPacketsRecvDropped() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint64 packets_recv_dropped = 8;</code>
       */
      public long getPacketsRecvDropped() {
        return packetsRecvDropped_;
      }
      /**
       * <code>optional uint64 packets_recv_dropped = 8;</code>
       */
      public Builder setPacketsRecvDropped(long value) {
        bitField0_ |= 0x00000020;
        packetsRecvDropped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv_dropped = 8;</code>
       */
      public Builder clearPacketsRecvDropped() {
        bitField0_ = (bitField0_ & ~0x00000020);
        packetsRecvDropped_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecvOutOfOrder_ ;
      /**
       * <code>optional uint64 packets_recv_out_of_order = 9;</code>
       */
      public boolean hasPacketsRecvOutOfOrder() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint64 packets_recv_out_of_order = 9;</code>
       */
      public long getPacketsRecvOutOfOrder() {
        return packetsRecvOutOfOrder_;
      }
      /**
       * <code>optional uint64 packets_recv_out_of_order = 9;</code>
       */
      public Builder setPacketsRecvOutOfOrder(long value) {
        bitField0_ |= 0x00000040;
        packetsRecvOutOfOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv_out_of_order = 9;</code>
       */
      public Builder clearPacketsRecvOutOfOrder() {
        bitField0_ = (bitField0_ & ~0x00000040);
        packetsRecvOutOfOrder_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecvDuplicate_ ;
      /**
       * <code>optional uint64 packets_recv_duplicate = 10;</code>
       */
      public boolean hasPacketsRecvDuplicate() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint64 packets_recv_duplicate = 10;</code>
       */
      public long getPacketsRecvDuplicate() {
        return packetsRecvDuplicate_;
      }
      /**
       * <code>optional uint64 packets_recv_duplicate = 10;</code>
       */
      public Builder setPacketsRecvDuplicate(long value) {
        bitField0_ |= 0x00000080;
        packetsRecvDuplicate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv_duplicate = 10;</code>
       */
      public Builder clearPacketsRecvDuplicate() {
        bitField0_ = (bitField0_ & ~0x00000080);
        packetsRecvDuplicate_ = 0L;
        onChanged();
        return this;
      }

      private long packetsRecvLurch_ ;
      /**
       * <code>optional uint64 packets_recv_lurch = 11;</code>
       */
      public boolean hasPacketsRecvLurch() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint64 packets_recv_lurch = 11;</code>
       */
      public long getPacketsRecvLurch() {
        return packetsRecvLurch_;
      }
      /**
       * <code>optional uint64 packets_recv_lurch = 11;</code>
       */
      public Builder setPacketsRecvLurch(long value) {
        bitField0_ |= 0x00000100;
        packetsRecvLurch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 packets_recv_lurch = 11;</code>
       */
      public Builder clearPacketsRecvLurch() {
        bitField0_ = (bitField0_ & ~0x00000100);
        packetsRecvLurch_ = 0L;
        onChanged();
        return this;
      }

      private int qualityHistogram100_ ;
      /**
       * <code>optional uint32 quality_histogram_100 = 21;</code>
       */
      public boolean hasQualityHistogram100() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 quality_histogram_100 = 21;</code>
       */
      public int getQualityHistogram100() {
        return qualityHistogram100_;
      }
      /**
       * <code>optional uint32 quality_histogram_100 = 21;</code>
       */
      public Builder setQualityHistogram100(int value) {
        bitField0_ |= 0x00000200;
        qualityHistogram100_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_100 = 21;</code>
       */
      public Builder clearQualityHistogram100() {
        bitField0_ = (bitField0_ & ~0x00000200);
        qualityHistogram100_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram99_ ;
      /**
       * <code>optional uint32 quality_histogram_99 = 22;</code>
       */
      public boolean hasQualityHistogram99() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 quality_histogram_99 = 22;</code>
       */
      public int getQualityHistogram99() {
        return qualityHistogram99_;
      }
      /**
       * <code>optional uint32 quality_histogram_99 = 22;</code>
       */
      public Builder setQualityHistogram99(int value) {
        bitField0_ |= 0x00000400;
        qualityHistogram99_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_99 = 22;</code>
       */
      public Builder clearQualityHistogram99() {
        bitField0_ = (bitField0_ & ~0x00000400);
        qualityHistogram99_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram97_ ;
      /**
       * <code>optional uint32 quality_histogram_97 = 23;</code>
       */
      public boolean hasQualityHistogram97() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 quality_histogram_97 = 23;</code>
       */
      public int getQualityHistogram97() {
        return qualityHistogram97_;
      }
      /**
       * <code>optional uint32 quality_histogram_97 = 23;</code>
       */
      public Builder setQualityHistogram97(int value) {
        bitField0_ |= 0x00000800;
        qualityHistogram97_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_97 = 23;</code>
       */
      public Builder clearQualityHistogram97() {
        bitField0_ = (bitField0_ & ~0x00000800);
        qualityHistogram97_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram95_ ;
      /**
       * <code>optional uint32 quality_histogram_95 = 24;</code>
       */
      public boolean hasQualityHistogram95() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 quality_histogram_95 = 24;</code>
       */
      public int getQualityHistogram95() {
        return qualityHistogram95_;
      }
      /**
       * <code>optional uint32 quality_histogram_95 = 24;</code>
       */
      public Builder setQualityHistogram95(int value) {
        bitField0_ |= 0x00001000;
        qualityHistogram95_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_95 = 24;</code>
       */
      public Builder clearQualityHistogram95() {
        bitField0_ = (bitField0_ & ~0x00001000);
        qualityHistogram95_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram90_ ;
      /**
       * <code>optional uint32 quality_histogram_90 = 25;</code>
       */
      public boolean hasQualityHistogram90() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 quality_histogram_90 = 25;</code>
       */
      public int getQualityHistogram90() {
        return qualityHistogram90_;
      }
      /**
       * <code>optional uint32 quality_histogram_90 = 25;</code>
       */
      public Builder setQualityHistogram90(int value) {
        bitField0_ |= 0x00002000;
        qualityHistogram90_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_90 = 25;</code>
       */
      public Builder clearQualityHistogram90() {
        bitField0_ = (bitField0_ & ~0x00002000);
        qualityHistogram90_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram75_ ;
      /**
       * <code>optional uint32 quality_histogram_75 = 26;</code>
       */
      public boolean hasQualityHistogram75() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 quality_histogram_75 = 26;</code>
       */
      public int getQualityHistogram75() {
        return qualityHistogram75_;
      }
      /**
       * <code>optional uint32 quality_histogram_75 = 26;</code>
       */
      public Builder setQualityHistogram75(int value) {
        bitField0_ |= 0x00004000;
        qualityHistogram75_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_75 = 26;</code>
       */
      public Builder clearQualityHistogram75() {
        bitField0_ = (bitField0_ & ~0x00004000);
        qualityHistogram75_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram50_ ;
      /**
       * <code>optional uint32 quality_histogram_50 = 27;</code>
       */
      public boolean hasQualityHistogram50() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 quality_histogram_50 = 27;</code>
       */
      public int getQualityHistogram50() {
        return qualityHistogram50_;
      }
      /**
       * <code>optional uint32 quality_histogram_50 = 27;</code>
       */
      public Builder setQualityHistogram50(int value) {
        bitField0_ |= 0x00008000;
        qualityHistogram50_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_50 = 27;</code>
       */
      public Builder clearQualityHistogram50() {
        bitField0_ = (bitField0_ & ~0x00008000);
        qualityHistogram50_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogram1_ ;
      /**
       * <code>optional uint32 quality_histogram_1 = 28;</code>
       */
      public boolean hasQualityHistogram1() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 quality_histogram_1 = 28;</code>
       */
      public int getQualityHistogram1() {
        return qualityHistogram1_;
      }
      /**
       * <code>optional uint32 quality_histogram_1 = 28;</code>
       */
      public Builder setQualityHistogram1(int value) {
        bitField0_ |= 0x00010000;
        qualityHistogram1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_1 = 28;</code>
       */
      public Builder clearQualityHistogram1() {
        bitField0_ = (bitField0_ & ~0x00010000);
        qualityHistogram1_ = 0;
        onChanged();
        return this;
      }

      private int qualityHistogramDead_ ;
      /**
       * <code>optional uint32 quality_histogram_dead = 29;</code>
       */
      public boolean hasQualityHistogramDead() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 quality_histogram_dead = 29;</code>
       */
      public int getQualityHistogramDead() {
        return qualityHistogramDead_;
      }
      /**
       * <code>optional uint32 quality_histogram_dead = 29;</code>
       */
      public Builder setQualityHistogramDead(int value) {
        bitField0_ |= 0x00020000;
        qualityHistogramDead_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_histogram_dead = 29;</code>
       */
      public Builder clearQualityHistogramDead() {
        bitField0_ = (bitField0_ & ~0x00020000);
        qualityHistogramDead_ = 0;
        onChanged();
        return this;
      }

      private int qualityNtile2Nd_ ;
      /**
       * <code>optional uint32 quality_ntile_2nd = 30;</code>
       */
      public boolean hasQualityNtile2Nd() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 quality_ntile_2nd = 30;</code>
       */
      public int getQualityNtile2Nd() {
        return qualityNtile2Nd_;
      }
      /**
       * <code>optional uint32 quality_ntile_2nd = 30;</code>
       */
      public Builder setQualityNtile2Nd(int value) {
        bitField0_ |= 0x00040000;
        qualityNtile2Nd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_ntile_2nd = 30;</code>
       */
      public Builder clearQualityNtile2Nd() {
        bitField0_ = (bitField0_ & ~0x00040000);
        qualityNtile2Nd_ = 0;
        onChanged();
        return this;
      }

      private int qualityNtile5Th_ ;
      /**
       * <code>optional uint32 quality_ntile_5th = 31;</code>
       */
      public boolean hasQualityNtile5Th() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 quality_ntile_5th = 31;</code>
       */
      public int getQualityNtile5Th() {
        return qualityNtile5Th_;
      }
      /**
       * <code>optional uint32 quality_ntile_5th = 31;</code>
       */
      public Builder setQualityNtile5Th(int value) {
        bitField0_ |= 0x00080000;
        qualityNtile5Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_ntile_5th = 31;</code>
       */
      public Builder clearQualityNtile5Th() {
        bitField0_ = (bitField0_ & ~0x00080000);
        qualityNtile5Th_ = 0;
        onChanged();
        return this;
      }

      private int qualityNtile25Th_ ;
      /**
       * <code>optional uint32 quality_ntile_25th = 32;</code>
       */
      public boolean hasQualityNtile25Th() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 quality_ntile_25th = 32;</code>
       */
      public int getQualityNtile25Th() {
        return qualityNtile25Th_;
      }
      /**
       * <code>optional uint32 quality_ntile_25th = 32;</code>
       */
      public Builder setQualityNtile25Th(int value) {
        bitField0_ |= 0x00100000;
        qualityNtile25Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_ntile_25th = 32;</code>
       */
      public Builder clearQualityNtile25Th() {
        bitField0_ = (bitField0_ & ~0x00100000);
        qualityNtile25Th_ = 0;
        onChanged();
        return this;
      }

      private int qualityNtile50Th_ ;
      /**
       * <code>optional uint32 quality_ntile_50th = 33;</code>
       */
      public boolean hasQualityNtile50Th() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 quality_ntile_50th = 33;</code>
       */
      public int getQualityNtile50Th() {
        return qualityNtile50Th_;
      }
      /**
       * <code>optional uint32 quality_ntile_50th = 33;</code>
       */
      public Builder setQualityNtile50Th(int value) {
        bitField0_ |= 0x00200000;
        qualityNtile50Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 quality_ntile_50th = 33;</code>
       */
      public Builder clearQualityNtile50Th() {
        bitField0_ = (bitField0_ & ~0x00200000);
        qualityNtile50Th_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram25_ ;
      /**
       * <code>optional uint32 ping_histogram_25 = 41;</code>
       */
      public boolean hasPingHistogram25() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 ping_histogram_25 = 41;</code>
       */
      public int getPingHistogram25() {
        return pingHistogram25_;
      }
      /**
       * <code>optional uint32 ping_histogram_25 = 41;</code>
       */
      public Builder setPingHistogram25(int value) {
        bitField0_ |= 0x00400000;
        pingHistogram25_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_25 = 41;</code>
       */
      public Builder clearPingHistogram25() {
        bitField0_ = (bitField0_ & ~0x00400000);
        pingHistogram25_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram50_ ;
      /**
       * <code>optional uint32 ping_histogram_50 = 42;</code>
       */
      public boolean hasPingHistogram50() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 ping_histogram_50 = 42;</code>
       */
      public int getPingHistogram50() {
        return pingHistogram50_;
      }
      /**
       * <code>optional uint32 ping_histogram_50 = 42;</code>
       */
      public Builder setPingHistogram50(int value) {
        bitField0_ |= 0x00800000;
        pingHistogram50_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_50 = 42;</code>
       */
      public Builder clearPingHistogram50() {
        bitField0_ = (bitField0_ & ~0x00800000);
        pingHistogram50_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram75_ ;
      /**
       * <code>optional uint32 ping_histogram_75 = 43;</code>
       */
      public boolean hasPingHistogram75() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 ping_histogram_75 = 43;</code>
       */
      public int getPingHistogram75() {
        return pingHistogram75_;
      }
      /**
       * <code>optional uint32 ping_histogram_75 = 43;</code>
       */
      public Builder setPingHistogram75(int value) {
        bitField0_ |= 0x01000000;
        pingHistogram75_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_75 = 43;</code>
       */
      public Builder clearPingHistogram75() {
        bitField0_ = (bitField0_ & ~0x01000000);
        pingHistogram75_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram100_ ;
      /**
       * <code>optional uint32 ping_histogram_100 = 44;</code>
       */
      public boolean hasPingHistogram100() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 ping_histogram_100 = 44;</code>
       */
      public int getPingHistogram100() {
        return pingHistogram100_;
      }
      /**
       * <code>optional uint32 ping_histogram_100 = 44;</code>
       */
      public Builder setPingHistogram100(int value) {
        bitField0_ |= 0x02000000;
        pingHistogram100_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_100 = 44;</code>
       */
      public Builder clearPingHistogram100() {
        bitField0_ = (bitField0_ & ~0x02000000);
        pingHistogram100_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram125_ ;
      /**
       * <code>optional uint32 ping_histogram_125 = 45;</code>
       */
      public boolean hasPingHistogram125() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 ping_histogram_125 = 45;</code>
       */
      public int getPingHistogram125() {
        return pingHistogram125_;
      }
      /**
       * <code>optional uint32 ping_histogram_125 = 45;</code>
       */
      public Builder setPingHistogram125(int value) {
        bitField0_ |= 0x04000000;
        pingHistogram125_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_125 = 45;</code>
       */
      public Builder clearPingHistogram125() {
        bitField0_ = (bitField0_ & ~0x04000000);
        pingHistogram125_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram150_ ;
      /**
       * <code>optional uint32 ping_histogram_150 = 46;</code>
       */
      public boolean hasPingHistogram150() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 ping_histogram_150 = 46;</code>
       */
      public int getPingHistogram150() {
        return pingHistogram150_;
      }
      /**
       * <code>optional uint32 ping_histogram_150 = 46;</code>
       */
      public Builder setPingHistogram150(int value) {
        bitField0_ |= 0x08000000;
        pingHistogram150_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_150 = 46;</code>
       */
      public Builder clearPingHistogram150() {
        bitField0_ = (bitField0_ & ~0x08000000);
        pingHistogram150_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram200_ ;
      /**
       * <code>optional uint32 ping_histogram_200 = 47;</code>
       */
      public boolean hasPingHistogram200() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 ping_histogram_200 = 47;</code>
       */
      public int getPingHistogram200() {
        return pingHistogram200_;
      }
      /**
       * <code>optional uint32 ping_histogram_200 = 47;</code>
       */
      public Builder setPingHistogram200(int value) {
        bitField0_ |= 0x10000000;
        pingHistogram200_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_200 = 47;</code>
       */
      public Builder clearPingHistogram200() {
        bitField0_ = (bitField0_ & ~0x10000000);
        pingHistogram200_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogram300_ ;
      /**
       * <code>optional uint32 ping_histogram_300 = 48;</code>
       */
      public boolean hasPingHistogram300() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 ping_histogram_300 = 48;</code>
       */
      public int getPingHistogram300() {
        return pingHistogram300_;
      }
      /**
       * <code>optional uint32 ping_histogram_300 = 48;</code>
       */
      public Builder setPingHistogram300(int value) {
        bitField0_ |= 0x20000000;
        pingHistogram300_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_300 = 48;</code>
       */
      public Builder clearPingHistogram300() {
        bitField0_ = (bitField0_ & ~0x20000000);
        pingHistogram300_ = 0;
        onChanged();
        return this;
      }

      private int pingHistogramMax_ ;
      /**
       * <code>optional uint32 ping_histogram_max = 49;</code>
       */
      public boolean hasPingHistogramMax() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 ping_histogram_max = 49;</code>
       */
      public int getPingHistogramMax() {
        return pingHistogramMax_;
      }
      /**
       * <code>optional uint32 ping_histogram_max = 49;</code>
       */
      public Builder setPingHistogramMax(int value) {
        bitField0_ |= 0x40000000;
        pingHistogramMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_histogram_max = 49;</code>
       */
      public Builder clearPingHistogramMax() {
        bitField0_ = (bitField0_ & ~0x40000000);
        pingHistogramMax_ = 0;
        onChanged();
        return this;
      }

      private int pingNtile5Th_ ;
      /**
       * <code>optional uint32 ping_ntile_5th = 50;</code>
       */
      public boolean hasPingNtile5Th() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 ping_ntile_5th = 50;</code>
       */
      public int getPingNtile5Th() {
        return pingNtile5Th_;
      }
      /**
       * <code>optional uint32 ping_ntile_5th = 50;</code>
       */
      public Builder setPingNtile5Th(int value) {
        bitField0_ |= 0x80000000;
        pingNtile5Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ntile_5th = 50;</code>
       */
      public Builder clearPingNtile5Th() {
        bitField0_ = (bitField0_ & ~0x80000000);
        pingNtile5Th_ = 0;
        onChanged();
        return this;
      }

      private int pingNtile50Th_ ;
      /**
       * <code>optional uint32 ping_ntile_50th = 51;</code>
       */
      public boolean hasPingNtile50Th() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 ping_ntile_50th = 51;</code>
       */
      public int getPingNtile50Th() {
        return pingNtile50Th_;
      }
      /**
       * <code>optional uint32 ping_ntile_50th = 51;</code>
       */
      public Builder setPingNtile50Th(int value) {
        bitField1_ |= 0x00000001;
        pingNtile50Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ntile_50th = 51;</code>
       */
      public Builder clearPingNtile50Th() {
        bitField1_ = (bitField1_ & ~0x00000001);
        pingNtile50Th_ = 0;
        onChanged();
        return this;
      }

      private int pingNtile75Th_ ;
      /**
       * <code>optional uint32 ping_ntile_75th = 52;</code>
       */
      public boolean hasPingNtile75Th() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 ping_ntile_75th = 52;</code>
       */
      public int getPingNtile75Th() {
        return pingNtile75Th_;
      }
      /**
       * <code>optional uint32 ping_ntile_75th = 52;</code>
       */
      public Builder setPingNtile75Th(int value) {
        bitField1_ |= 0x00000002;
        pingNtile75Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ntile_75th = 52;</code>
       */
      public Builder clearPingNtile75Th() {
        bitField1_ = (bitField1_ & ~0x00000002);
        pingNtile75Th_ = 0;
        onChanged();
        return this;
      }

      private int pingNtile95Th_ ;
      /**
       * <code>optional uint32 ping_ntile_95th = 53;</code>
       */
      public boolean hasPingNtile95Th() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 ping_ntile_95th = 53;</code>
       */
      public int getPingNtile95Th() {
        return pingNtile95Th_;
      }
      /**
       * <code>optional uint32 ping_ntile_95th = 53;</code>
       */
      public Builder setPingNtile95Th(int value) {
        bitField1_ |= 0x00000004;
        pingNtile95Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ntile_95th = 53;</code>
       */
      public Builder clearPingNtile95Th() {
        bitField1_ = (bitField1_ & ~0x00000004);
        pingNtile95Th_ = 0;
        onChanged();
        return this;
      }

      private int pingNtile98Th_ ;
      /**
       * <code>optional uint32 ping_ntile_98th = 54;</code>
       */
      public boolean hasPingNtile98Th() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 ping_ntile_98th = 54;</code>
       */
      public int getPingNtile98Th() {
        return pingNtile98Th_;
      }
      /**
       * <code>optional uint32 ping_ntile_98th = 54;</code>
       */
      public Builder setPingNtile98Th(int value) {
        bitField1_ |= 0x00000008;
        pingNtile98Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_ntile_98th = 54;</code>
       */
      public Builder clearPingNtile98Th() {
        bitField1_ = (bitField1_ & ~0x00000008);
        pingNtile98Th_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogramNegligible_ ;
      /**
       * <code>optional uint32 jitter_histogram_negligible = 61;</code>
       */
      public boolean hasJitterHistogramNegligible() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 jitter_histogram_negligible = 61;</code>
       */
      public int getJitterHistogramNegligible() {
        return jitterHistogramNegligible_;
      }
      /**
       * <code>optional uint32 jitter_histogram_negligible = 61;</code>
       */
      public Builder setJitterHistogramNegligible(int value) {
        bitField1_ |= 0x00000010;
        jitterHistogramNegligible_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_negligible = 61;</code>
       */
      public Builder clearJitterHistogramNegligible() {
        bitField1_ = (bitField1_ & ~0x00000010);
        jitterHistogramNegligible_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogram1_ ;
      /**
       * <code>optional uint32 jitter_histogram_1 = 62;</code>
       */
      public boolean hasJitterHistogram1() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 jitter_histogram_1 = 62;</code>
       */
      public int getJitterHistogram1() {
        return jitterHistogram1_;
      }
      /**
       * <code>optional uint32 jitter_histogram_1 = 62;</code>
       */
      public Builder setJitterHistogram1(int value) {
        bitField1_ |= 0x00000020;
        jitterHistogram1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_1 = 62;</code>
       */
      public Builder clearJitterHistogram1() {
        bitField1_ = (bitField1_ & ~0x00000020);
        jitterHistogram1_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogram2_ ;
      /**
       * <code>optional uint32 jitter_histogram_2 = 63;</code>
       */
      public boolean hasJitterHistogram2() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 jitter_histogram_2 = 63;</code>
       */
      public int getJitterHistogram2() {
        return jitterHistogram2_;
      }
      /**
       * <code>optional uint32 jitter_histogram_2 = 63;</code>
       */
      public Builder setJitterHistogram2(int value) {
        bitField1_ |= 0x00000040;
        jitterHistogram2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_2 = 63;</code>
       */
      public Builder clearJitterHistogram2() {
        bitField1_ = (bitField1_ & ~0x00000040);
        jitterHistogram2_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogram5_ ;
      /**
       * <code>optional uint32 jitter_histogram_5 = 64;</code>
       */
      public boolean hasJitterHistogram5() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 jitter_histogram_5 = 64;</code>
       */
      public int getJitterHistogram5() {
        return jitterHistogram5_;
      }
      /**
       * <code>optional uint32 jitter_histogram_5 = 64;</code>
       */
      public Builder setJitterHistogram5(int value) {
        bitField1_ |= 0x00000080;
        jitterHistogram5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_5 = 64;</code>
       */
      public Builder clearJitterHistogram5() {
        bitField1_ = (bitField1_ & ~0x00000080);
        jitterHistogram5_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogram10_ ;
      /**
       * <code>optional uint32 jitter_histogram_10 = 65;</code>
       */
      public boolean hasJitterHistogram10() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 jitter_histogram_10 = 65;</code>
       */
      public int getJitterHistogram10() {
        return jitterHistogram10_;
      }
      /**
       * <code>optional uint32 jitter_histogram_10 = 65;</code>
       */
      public Builder setJitterHistogram10(int value) {
        bitField1_ |= 0x00000100;
        jitterHistogram10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_10 = 65;</code>
       */
      public Builder clearJitterHistogram10() {
        bitField1_ = (bitField1_ & ~0x00000100);
        jitterHistogram10_ = 0;
        onChanged();
        return this;
      }

      private int jitterHistogram20_ ;
      /**
       * <code>optional uint32 jitter_histogram_20 = 66;</code>
       */
      public boolean hasJitterHistogram20() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 jitter_histogram_20 = 66;</code>
       */
      public int getJitterHistogram20() {
        return jitterHistogram20_;
      }
      /**
       * <code>optional uint32 jitter_histogram_20 = 66;</code>
       */
      public Builder setJitterHistogram20(int value) {
        bitField1_ |= 0x00000200;
        jitterHistogram20_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jitter_histogram_20 = 66;</code>
       */
      public Builder clearJitterHistogram20() {
        bitField1_ = (bitField1_ & ~0x00000200);
        jitterHistogram20_ = 0;
        onChanged();
        return this;
      }

      private int txspeedMax_ ;
      /**
       * <code>optional uint32 txspeed_max = 67;</code>
       */
      public boolean hasTxspeedMax() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 txspeed_max = 67;</code>
       */
      public int getTxspeedMax() {
        return txspeedMax_;
      }
      /**
       * <code>optional uint32 txspeed_max = 67;</code>
       */
      public Builder setTxspeedMax(int value) {
        bitField1_ |= 0x00000400;
        txspeedMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_max = 67;</code>
       */
      public Builder clearTxspeedMax() {
        bitField1_ = (bitField1_ & ~0x00000400);
        txspeedMax_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram16_ ;
      /**
       * <code>optional uint32 txspeed_histogram_16 = 68;</code>
       */
      public boolean hasTxspeedHistogram16() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 txspeed_histogram_16 = 68;</code>
       */
      public int getTxspeedHistogram16() {
        return txspeedHistogram16_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_16 = 68;</code>
       */
      public Builder setTxspeedHistogram16(int value) {
        bitField1_ |= 0x00000800;
        txspeedHistogram16_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_16 = 68;</code>
       */
      public Builder clearTxspeedHistogram16() {
        bitField1_ = (bitField1_ & ~0x00000800);
        txspeedHistogram16_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram32_ ;
      /**
       * <code>optional uint32 txspeed_histogram_32 = 69;</code>
       */
      public boolean hasTxspeedHistogram32() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_32 = 69;</code>
       */
      public int getTxspeedHistogram32() {
        return txspeedHistogram32_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_32 = 69;</code>
       */
      public Builder setTxspeedHistogram32(int value) {
        bitField1_ |= 0x00001000;
        txspeedHistogram32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_32 = 69;</code>
       */
      public Builder clearTxspeedHistogram32() {
        bitField1_ = (bitField1_ & ~0x00001000);
        txspeedHistogram32_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram64_ ;
      /**
       * <code>optional uint32 txspeed_histogram_64 = 70;</code>
       */
      public boolean hasTxspeedHistogram64() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_64 = 70;</code>
       */
      public int getTxspeedHistogram64() {
        return txspeedHistogram64_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_64 = 70;</code>
       */
      public Builder setTxspeedHistogram64(int value) {
        bitField1_ |= 0x00002000;
        txspeedHistogram64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_64 = 70;</code>
       */
      public Builder clearTxspeedHistogram64() {
        bitField1_ = (bitField1_ & ~0x00002000);
        txspeedHistogram64_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram128_ ;
      /**
       * <code>optional uint32 txspeed_histogram_128 = 71;</code>
       */
      public boolean hasTxspeedHistogram128() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_128 = 71;</code>
       */
      public int getTxspeedHistogram128() {
        return txspeedHistogram128_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_128 = 71;</code>
       */
      public Builder setTxspeedHistogram128(int value) {
        bitField1_ |= 0x00004000;
        txspeedHistogram128_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_128 = 71;</code>
       */
      public Builder clearTxspeedHistogram128() {
        bitField1_ = (bitField1_ & ~0x00004000);
        txspeedHistogram128_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram256_ ;
      /**
       * <code>optional uint32 txspeed_histogram_256 = 72;</code>
       */
      public boolean hasTxspeedHistogram256() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_256 = 72;</code>
       */
      public int getTxspeedHistogram256() {
        return txspeedHistogram256_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_256 = 72;</code>
       */
      public Builder setTxspeedHistogram256(int value) {
        bitField1_ |= 0x00008000;
        txspeedHistogram256_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_256 = 72;</code>
       */
      public Builder clearTxspeedHistogram256() {
        bitField1_ = (bitField1_ & ~0x00008000);
        txspeedHistogram256_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram512_ ;
      /**
       * <code>optional uint32 txspeed_histogram_512 = 73;</code>
       */
      public boolean hasTxspeedHistogram512() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_512 = 73;</code>
       */
      public int getTxspeedHistogram512() {
        return txspeedHistogram512_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_512 = 73;</code>
       */
      public Builder setTxspeedHistogram512(int value) {
        bitField1_ |= 0x00010000;
        txspeedHistogram512_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_512 = 73;</code>
       */
      public Builder clearTxspeedHistogram512() {
        bitField1_ = (bitField1_ & ~0x00010000);
        txspeedHistogram512_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogram1024_ ;
      /**
       * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
       */
      public boolean hasTxspeedHistogram1024() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
       */
      public int getTxspeedHistogram1024() {
        return txspeedHistogram1024_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
       */
      public Builder setTxspeedHistogram1024(int value) {
        bitField1_ |= 0x00020000;
        txspeedHistogram1024_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_1024 = 74;</code>
       */
      public Builder clearTxspeedHistogram1024() {
        bitField1_ = (bitField1_ & ~0x00020000);
        txspeedHistogram1024_ = 0;
        onChanged();
        return this;
      }

      private int txspeedHistogramMax_ ;
      /**
       * <code>optional uint32 txspeed_histogram_max = 75;</code>
       */
      public boolean hasTxspeedHistogramMax() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 txspeed_histogram_max = 75;</code>
       */
      public int getTxspeedHistogramMax() {
        return txspeedHistogramMax_;
      }
      /**
       * <code>optional uint32 txspeed_histogram_max = 75;</code>
       */
      public Builder setTxspeedHistogramMax(int value) {
        bitField1_ |= 0x00040000;
        txspeedHistogramMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_histogram_max = 75;</code>
       */
      public Builder clearTxspeedHistogramMax() {
        bitField1_ = (bitField1_ & ~0x00040000);
        txspeedHistogramMax_ = 0;
        onChanged();
        return this;
      }

      private int txspeedNtile5Th_ ;
      /**
       * <code>optional uint32 txspeed_ntile_5th = 76;</code>
       */
      public boolean hasTxspeedNtile5Th() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 txspeed_ntile_5th = 76;</code>
       */
      public int getTxspeedNtile5Th() {
        return txspeedNtile5Th_;
      }
      /**
       * <code>optional uint32 txspeed_ntile_5th = 76;</code>
       */
      public Builder setTxspeedNtile5Th(int value) {
        bitField1_ |= 0x00080000;
        txspeedNtile5Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_ntile_5th = 76;</code>
       */
      public Builder clearTxspeedNtile5Th() {
        bitField1_ = (bitField1_ & ~0x00080000);
        txspeedNtile5Th_ = 0;
        onChanged();
        return this;
      }

      private int txspeedNtile50Th_ ;
      /**
       * <code>optional uint32 txspeed_ntile_50th = 77;</code>
       */
      public boolean hasTxspeedNtile50Th() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 txspeed_ntile_50th = 77;</code>
       */
      public int getTxspeedNtile50Th() {
        return txspeedNtile50Th_;
      }
      /**
       * <code>optional uint32 txspeed_ntile_50th = 77;</code>
       */
      public Builder setTxspeedNtile50Th(int value) {
        bitField1_ |= 0x00100000;
        txspeedNtile50Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_ntile_50th = 77;</code>
       */
      public Builder clearTxspeedNtile50Th() {
        bitField1_ = (bitField1_ & ~0x00100000);
        txspeedNtile50Th_ = 0;
        onChanged();
        return this;
      }

      private int txspeedNtile75Th_ ;
      /**
       * <code>optional uint32 txspeed_ntile_75th = 78;</code>
       */
      public boolean hasTxspeedNtile75Th() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 txspeed_ntile_75th = 78;</code>
       */
      public int getTxspeedNtile75Th() {
        return txspeedNtile75Th_;
      }
      /**
       * <code>optional uint32 txspeed_ntile_75th = 78;</code>
       */
      public Builder setTxspeedNtile75Th(int value) {
        bitField1_ |= 0x00200000;
        txspeedNtile75Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_ntile_75th = 78;</code>
       */
      public Builder clearTxspeedNtile75Th() {
        bitField1_ = (bitField1_ & ~0x00200000);
        txspeedNtile75Th_ = 0;
        onChanged();
        return this;
      }

      private int txspeedNtile95Th_ ;
      /**
       * <code>optional uint32 txspeed_ntile_95th = 79;</code>
       */
      public boolean hasTxspeedNtile95Th() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 txspeed_ntile_95th = 79;</code>
       */
      public int getTxspeedNtile95Th() {
        return txspeedNtile95Th_;
      }
      /**
       * <code>optional uint32 txspeed_ntile_95th = 79;</code>
       */
      public Builder setTxspeedNtile95Th(int value) {
        bitField1_ |= 0x00400000;
        txspeedNtile95Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_ntile_95th = 79;</code>
       */
      public Builder clearTxspeedNtile95Th() {
        bitField1_ = (bitField1_ & ~0x00400000);
        txspeedNtile95Th_ = 0;
        onChanged();
        return this;
      }

      private int txspeedNtile98Th_ ;
      /**
       * <code>optional uint32 txspeed_ntile_98th = 80;</code>
       */
      public boolean hasTxspeedNtile98Th() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 txspeed_ntile_98th = 80;</code>
       */
      public int getTxspeedNtile98Th() {
        return txspeedNtile98Th_;
      }
      /**
       * <code>optional uint32 txspeed_ntile_98th = 80;</code>
       */
      public Builder setTxspeedNtile98Th(int value) {
        bitField1_ |= 0x00800000;
        txspeedNtile98Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txspeed_ntile_98th = 80;</code>
       */
      public Builder clearTxspeedNtile98Th() {
        bitField1_ = (bitField1_ & ~0x00800000);
        txspeedNtile98Th_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedMax_ ;
      /**
       * <code>optional uint32 rxspeed_max = 81;</code>
       */
      public boolean hasRxspeedMax() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 rxspeed_max = 81;</code>
       */
      public int getRxspeedMax() {
        return rxspeedMax_;
      }
      /**
       * <code>optional uint32 rxspeed_max = 81;</code>
       */
      public Builder setRxspeedMax(int value) {
        bitField1_ |= 0x01000000;
        rxspeedMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_max = 81;</code>
       */
      public Builder clearRxspeedMax() {
        bitField1_ = (bitField1_ & ~0x01000000);
        rxspeedMax_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram16_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
       */
      public boolean hasRxspeedHistogram16() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
       */
      public int getRxspeedHistogram16() {
        return rxspeedHistogram16_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
       */
      public Builder setRxspeedHistogram16(int value) {
        bitField1_ |= 0x02000000;
        rxspeedHistogram16_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_16 = 82;</code>
       */
      public Builder clearRxspeedHistogram16() {
        bitField1_ = (bitField1_ & ~0x02000000);
        rxspeedHistogram16_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram32_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
       */
      public boolean hasRxspeedHistogram32() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
       */
      public int getRxspeedHistogram32() {
        return rxspeedHistogram32_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
       */
      public Builder setRxspeedHistogram32(int value) {
        bitField1_ |= 0x04000000;
        rxspeedHistogram32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_32 = 83;</code>
       */
      public Builder clearRxspeedHistogram32() {
        bitField1_ = (bitField1_ & ~0x04000000);
        rxspeedHistogram32_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram64_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
       */
      public boolean hasRxspeedHistogram64() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
       */
      public int getRxspeedHistogram64() {
        return rxspeedHistogram64_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
       */
      public Builder setRxspeedHistogram64(int value) {
        bitField1_ |= 0x08000000;
        rxspeedHistogram64_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_64 = 84;</code>
       */
      public Builder clearRxspeedHistogram64() {
        bitField1_ = (bitField1_ & ~0x08000000);
        rxspeedHistogram64_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram128_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
       */
      public boolean hasRxspeedHistogram128() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
       */
      public int getRxspeedHistogram128() {
        return rxspeedHistogram128_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
       */
      public Builder setRxspeedHistogram128(int value) {
        bitField1_ |= 0x10000000;
        rxspeedHistogram128_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_128 = 85;</code>
       */
      public Builder clearRxspeedHistogram128() {
        bitField1_ = (bitField1_ & ~0x10000000);
        rxspeedHistogram128_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram256_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
       */
      public boolean hasRxspeedHistogram256() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
       */
      public int getRxspeedHistogram256() {
        return rxspeedHistogram256_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
       */
      public Builder setRxspeedHistogram256(int value) {
        bitField1_ |= 0x20000000;
        rxspeedHistogram256_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_256 = 86;</code>
       */
      public Builder clearRxspeedHistogram256() {
        bitField1_ = (bitField1_ & ~0x20000000);
        rxspeedHistogram256_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram512_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
       */
      public boolean hasRxspeedHistogram512() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
       */
      public int getRxspeedHistogram512() {
        return rxspeedHistogram512_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
       */
      public Builder setRxspeedHistogram512(int value) {
        bitField1_ |= 0x40000000;
        rxspeedHistogram512_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_512 = 87;</code>
       */
      public Builder clearRxspeedHistogram512() {
        bitField1_ = (bitField1_ & ~0x40000000);
        rxspeedHistogram512_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogram1024_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
       */
      public boolean hasRxspeedHistogram1024() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
       */
      public int getRxspeedHistogram1024() {
        return rxspeedHistogram1024_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
       */
      public Builder setRxspeedHistogram1024(int value) {
        bitField1_ |= 0x80000000;
        rxspeedHistogram1024_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_1024 = 88;</code>
       */
      public Builder clearRxspeedHistogram1024() {
        bitField1_ = (bitField1_ & ~0x80000000);
        rxspeedHistogram1024_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedHistogramMax_ ;
      /**
       * <code>optional uint32 rxspeed_histogram_max = 89;</code>
       */
      public boolean hasRxspeedHistogramMax() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 rxspeed_histogram_max = 89;</code>
       */
      public int getRxspeedHistogramMax() {
        return rxspeedHistogramMax_;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_max = 89;</code>
       */
      public Builder setRxspeedHistogramMax(int value) {
        bitField2_ |= 0x00000001;
        rxspeedHistogramMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_histogram_max = 89;</code>
       */
      public Builder clearRxspeedHistogramMax() {
        bitField2_ = (bitField2_ & ~0x00000001);
        rxspeedHistogramMax_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedNtile5Th_ ;
      /**
       * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
       */
      public boolean hasRxspeedNtile5Th() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
       */
      public int getRxspeedNtile5Th() {
        return rxspeedNtile5Th_;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
       */
      public Builder setRxspeedNtile5Th(int value) {
        bitField2_ |= 0x00000002;
        rxspeedNtile5Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_5th = 90;</code>
       */
      public Builder clearRxspeedNtile5Th() {
        bitField2_ = (bitField2_ & ~0x00000002);
        rxspeedNtile5Th_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedNtile50Th_ ;
      /**
       * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
       */
      public boolean hasRxspeedNtile50Th() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
       */
      public int getRxspeedNtile50Th() {
        return rxspeedNtile50Th_;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
       */
      public Builder setRxspeedNtile50Th(int value) {
        bitField2_ |= 0x00000004;
        rxspeedNtile50Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_50th = 91;</code>
       */
      public Builder clearRxspeedNtile50Th() {
        bitField2_ = (bitField2_ & ~0x00000004);
        rxspeedNtile50Th_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedNtile75Th_ ;
      /**
       * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
       */
      public boolean hasRxspeedNtile75Th() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
       */
      public int getRxspeedNtile75Th() {
        return rxspeedNtile75Th_;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
       */
      public Builder setRxspeedNtile75Th(int value) {
        bitField2_ |= 0x00000008;
        rxspeedNtile75Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_75th = 92;</code>
       */
      public Builder clearRxspeedNtile75Th() {
        bitField2_ = (bitField2_ & ~0x00000008);
        rxspeedNtile75Th_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedNtile95Th_ ;
      /**
       * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
       */
      public boolean hasRxspeedNtile95Th() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
       */
      public int getRxspeedNtile95Th() {
        return rxspeedNtile95Th_;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
       */
      public Builder setRxspeedNtile95Th(int value) {
        bitField2_ |= 0x00000010;
        rxspeedNtile95Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_95th = 93;</code>
       */
      public Builder clearRxspeedNtile95Th() {
        bitField2_ = (bitField2_ & ~0x00000010);
        rxspeedNtile95Th_ = 0;
        onChanged();
        return this;
      }

      private int rxspeedNtile98Th_ ;
      /**
       * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
       */
      public boolean hasRxspeedNtile98Th() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
       */
      public int getRxspeedNtile98Th() {
        return rxspeedNtile98Th_;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
       */
      public Builder setRxspeedNtile98Th(int value) {
        bitField2_ |= 0x00000020;
        rxspeedNtile98Th_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxspeed_ntile_98th = 94;</code>
       */
      public Builder clearRxspeedNtile98Th() {
        bitField2_ = (bitField2_ & ~0x00000020);
        rxspeedNtile98Th_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramLinkLifetimeStats)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkLifetimeStats)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramLinkLifetimeStats>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramLinkLifetimeStats>() {
      @java.lang.Override
      public CMsgSteamDatagramLinkLifetimeStats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramLinkLifetimeStats(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramLinkLifetimeStats> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramLinkLifetimeStats> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamDatagramConnectionQualityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgSteamDatagramConnectionQuality)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    boolean hasInstantaneous();
    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getInstantaneous();
    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder getInstantaneousOrBuilder();

    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    boolean hasLifetime();
    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getLifetime();
    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder getLifetimeOrBuilder();
  }
  /**
   * Protobuf type {@code CMsgSteamDatagramConnectionQuality}
   */
  public  static final class CMsgSteamDatagramConnectionQuality extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgSteamDatagramConnectionQuality)
      CMsgSteamDatagramConnectionQualityOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgSteamDatagramConnectionQuality.newBuilder() to construct.
    private CMsgSteamDatagramConnectionQuality(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamDatagramConnectionQuality() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMsgSteamDatagramConnectionQuality(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = instantaneous_.toBuilder();
              }
              instantaneous_ = input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(instantaneous_);
                instantaneous_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = lifetime_.toBuilder();
              }
              lifetime_ = input.readMessage(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lifetime_);
                lifetime_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramConnectionQuality_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramConnectionQuality_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder.class);
    }

    private int bitField0_;
    public static final int INSTANTANEOUS_FIELD_NUMBER = 1;
    private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats instantaneous_;
    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    public boolean hasInstantaneous() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getInstantaneous() {
      return instantaneous_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance() : instantaneous_;
    }
    /**
     * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder getInstantaneousOrBuilder() {
      return instantaneous_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance() : instantaneous_;
    }

    public static final int LIFETIME_FIELD_NUMBER = 2;
    private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats lifetime_;
    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    public boolean hasLifetime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getLifetime() {
      return lifetime_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance() : lifetime_;
    }
    /**
     * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
     */
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder getLifetimeOrBuilder() {
      return lifetime_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance() : lifetime_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getInstantaneous());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getLifetime());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInstantaneous());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLifetime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality)) {
        return super.equals(obj);
      }
      com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality other = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality) obj;

      boolean result = true;
      result = result && (hasInstantaneous() == other.hasInstantaneous());
      if (hasInstantaneous()) {
        result = result && getInstantaneous()
            .equals(other.getInstantaneous());
      }
      result = result && (hasLifetime() == other.hasLifetime());
      if (hasLifetime()) {
        result = result && getLifetime()
            .equals(other.getLifetime());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInstantaneous()) {
        hash = (37 * hash) + INSTANTANEOUS_FIELD_NUMBER;
        hash = (53 * hash) + getInstantaneous().hashCode();
      }
      if (hasLifetime()) {
        hash = (37 * hash) + LIFETIME_FIELD_NUMBER;
        hash = (53 * hash) + getLifetime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgSteamDatagramConnectionQuality}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgSteamDatagramConnectionQuality)
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQualityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramConnectionQuality_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramConnectionQuality_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.class, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.Builder.class);
      }

      // Construct using com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInstantaneousFieldBuilder();
          getLifetimeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (instantaneousBuilder_ == null) {
          instantaneous_ = null;
        } else {
          instantaneousBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (lifetimeBuilder_ == null) {
          lifetime_ = null;
        } else {
          lifetimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.internal_static_CMsgSteamDatagramConnectionQuality_descriptor;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getDefaultInstanceForType() {
        return com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance();
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality build() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality buildPartial() {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality result = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (instantaneousBuilder_ == null) {
          result.instantaneous_ = instantaneous_;
        } else {
          result.instantaneous_ = instantaneousBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (lifetimeBuilder_ == null) {
          result.lifetime_ = lifetime_;
        } else {
          result.lifetime_ = lifetimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality) {
          return mergeFrom((com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality other) {
        if (other == com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality.getDefaultInstance()) return this;
        if (other.hasInstantaneous()) {
          mergeInstantaneous(other.getInstantaneous());
        }
        if (other.hasLifetime()) {
          mergeLifetime(other.getLifetime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats instantaneous_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder> instantaneousBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public boolean hasInstantaneous() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats getInstantaneous() {
        if (instantaneousBuilder_ == null) {
          return instantaneous_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance() : instantaneous_;
        } else {
          return instantaneousBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public Builder setInstantaneous(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats value) {
        if (instantaneousBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          instantaneous_ = value;
          onChanged();
        } else {
          instantaneousBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public Builder setInstantaneous(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder builderForValue) {
        if (instantaneousBuilder_ == null) {
          instantaneous_ = builderForValue.build();
          onChanged();
        } else {
          instantaneousBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public Builder mergeInstantaneous(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats value) {
        if (instantaneousBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              instantaneous_ != null &&
              instantaneous_ != com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance()) {
            instantaneous_ =
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.newBuilder(instantaneous_).mergeFrom(value).buildPartial();
          } else {
            instantaneous_ = value;
          }
          onChanged();
        } else {
          instantaneousBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public Builder clearInstantaneous() {
        if (instantaneousBuilder_ == null) {
          instantaneous_ = null;
          onChanged();
        } else {
          instantaneousBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder getInstantaneousBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getInstantaneousFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder getInstantaneousOrBuilder() {
        if (instantaneousBuilder_ != null) {
          return instantaneousBuilder_.getMessageOrBuilder();
        } else {
          return instantaneous_ == null ?
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.getDefaultInstance() : instantaneous_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder> 
          getInstantaneousFieldBuilder() {
        if (instantaneousBuilder_ == null) {
          instantaneousBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkInstantaneousStatsOrBuilder>(
                  getInstantaneous(),
                  getParentForChildren(),
                  isClean());
          instantaneous_ = null;
        }
        return instantaneousBuilder_;
      }

      private com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats lifetime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder> lifetimeBuilder_;
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public boolean hasLifetime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats getLifetime() {
        if (lifetimeBuilder_ == null) {
          return lifetime_ == null ? com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance() : lifetime_;
        } else {
          return lifetimeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public Builder setLifetime(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats value) {
        if (lifetimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lifetime_ = value;
          onChanged();
        } else {
          lifetimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public Builder setLifetime(
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder builderForValue) {
        if (lifetimeBuilder_ == null) {
          lifetime_ = builderForValue.build();
          onChanged();
        } else {
          lifetimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public Builder mergeLifetime(com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats value) {
        if (lifetimeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              lifetime_ != null &&
              lifetime_ != com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance()) {
            lifetime_ =
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.newBuilder(lifetime_).mergeFrom(value).buildPartial();
          } else {
            lifetime_ = value;
          }
          onChanged();
        } else {
          lifetimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public Builder clearLifetime() {
        if (lifetimeBuilder_ == null) {
          lifetime_ = null;
          onChanged();
        } else {
          lifetimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder getLifetimeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLifetimeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder getLifetimeOrBuilder() {
        if (lifetimeBuilder_ != null) {
          return lifetimeBuilder_.getMessageOrBuilder();
        } else {
          return lifetime_ == null ?
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.getDefaultInstance() : lifetime_;
        }
      }
      /**
       * <code>optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder> 
          getLifetimeFieldBuilder() {
        if (lifetimeBuilder_ == null) {
          lifetimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStats.Builder, com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramLinkLifetimeStatsOrBuilder>(
                  getLifetime(),
                  getParentForChildren(),
                  isClean());
          lifetime_ = null;
        }
        return lifetimeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgSteamDatagramConnectionQuality)
    }

    // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionQuality)
    private static final com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality();
    }

    public static com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgSteamDatagramConnectionQuality>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamDatagramConnectionQuality>() {
      @java.lang.Override
      public CMsgSteamDatagramConnectionQuality parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMsgSteamDatagramConnectionQuality(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamDatagramConnectionQuality> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamDatagramConnectionQuality> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.valve.gamenetworkingsockets.proto.Messages.CMsgSteamDatagramConnectionQuality getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramRouterPingReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramRouterPingReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramRouterPingReply_RouteException_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramSessionCryptInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramSessionCryptInfoSigned_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramDiagnostic_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramDiagnostic_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramLinkInstantaneousStats_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramLinkLifetimeStats_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgSteamDatagramConnectionQuality_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgSteamDatagramConnectionQuality_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%steamnetworkingsockets_messages.proto\"" +
      "\261\003\n CMsgSteamDatagramRouterPingReply\022\030\n\020" +
      "client_timestamp\030\001 \001(\007\022\"\n\026latency_datace" +
      "nter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latency_ping_ms\030\003 " +
      "\003(\rB\002\020\001\022\026\n\016your_public_ip\030\004 \001(\007\022\023\n\013serve" +
      "r_time\030\005 \001(\007\022\021\n\tchallenge\030\006 \001(\006\022\036\n\026secon" +
      "ds_until_shutdown\030\007 \001(\r\022\025\n\rclient_cookie" +
      "\030\010 \001(\007\022%\n\035scoring_penalty_relay_cluster\030" +
      "\t \001(\r\022J\n\020route_exceptions\030\n \003(\01320.CMsgSt" +
      "eamDatagramRouterPingReply.RouteExceptio" +
      "n\032H\n\016RouteException\022\026\n\016data_center_id\030\001 " +
      "\001(\007\022\r\n\005flags\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\"\305\001\n!" +
      "CMsgSteamDatagramSessionCryptInfo\022F\n\010key" +
      "_type\030\001 \001(\0162+.CMsgSteamDatagramSessionCr" +
      "yptInfo.EKeyType:\007INVALID\022\020\n\010key_data\030\002 " +
      "\001(\014\022\r\n\005nonce\030\003 \001(\006\022\016\n\006is_snp\030\004 \001(\010\"\'\n\010EK" +
      "eyType\022\013\n\007INVALID\020\000\022\016\n\nCURVE25519\020\001\"J\n\'C" +
      "MsgSteamDatagramSessionCryptInfoSigned\022\014" +
      "\n\004info\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"=\n\033CMsgS" +
      "teamDatagramDiagnostic\022\020\n\010severity\030\001 \001(\r" +
      "\022\014\n\004text\030\002 \001(\t\"\213\002\n\'CMsgSteamDatagramLink" +
      "InstantaneousStats\022\037\n\027out_packets_per_se" +
      "c_x10\030\001 \001(\r\022\031\n\021out_bytes_per_sec\030\002 \001(\r\022\036" +
      "\n\026in_packets_per_sec_x10\030\003 \001(\r\022\030\n\020in_byt" +
      "es_per_sec\030\004 \001(\r\022\017\n\007ping_ms\030\005 \001(\r\022\033\n\023pac" +
      "kets_dropped_pct\030\006 \001(\r\022\"\n\032packets_weird_" +
      "sequence_pct\030\007 \001(\r\022\030\n\020peak_jitter_usec\030\010" +
      " \001(\r\"\341\017\n\"CMsgSteamDatagramLinkLifetimeSt" +
      "ats\022\024\n\014packets_sent\030\003 \001(\004\022\017\n\007kb_sent\030\004 \001" +
      "(\004\022\024\n\014packets_recv\030\005 \001(\004\022\017\n\007kb_recv\030\006 \001(" +
      "\004\022\036\n\026packets_recv_sequenced\030\007 \001(\004\022\034\n\024pac" +
      "kets_recv_dropped\030\010 \001(\004\022!\n\031packets_recv_" +
      "out_of_order\030\t \001(\004\022\036\n\026packets_recv_dupli" +
      "cate\030\n \001(\004\022\032\n\022packets_recv_lurch\030\013 \001(\004\022\035" +
      "\n\025quality_histogram_100\030\025 \001(\r\022\034\n\024quality" +
      "_histogram_99\030\026 \001(\r\022\034\n\024quality_histogram" +
      "_97\030\027 \001(\r\022\034\n\024quality_histogram_95\030\030 \001(\r\022" +
      "\034\n\024quality_histogram_90\030\031 \001(\r\022\034\n\024quality" +
      "_histogram_75\030\032 \001(\r\022\034\n\024quality_histogram" +
      "_50\030\033 \001(\r\022\033\n\023quality_histogram_1\030\034 \001(\r\022\036" +
      "\n\026quality_histogram_dead\030\035 \001(\r\022\031\n\021qualit" +
      "y_ntile_2nd\030\036 \001(\r\022\031\n\021quality_ntile_5th\030\037" +
      " \001(\r\022\032\n\022quality_ntile_25th\030  \001(\r\022\032\n\022qual" +
      "ity_ntile_50th\030! \001(\r\022\031\n\021ping_histogram_2" +
      "5\030) \001(\r\022\031\n\021ping_histogram_50\030* \001(\r\022\031\n\021pi" +
      "ng_histogram_75\030+ \001(\r\022\032\n\022ping_histogram_" +
      "100\030, \001(\r\022\032\n\022ping_histogram_125\030- \001(\r\022\032\n" +
      "\022ping_histogram_150\030. \001(\r\022\032\n\022ping_histog" +
      "ram_200\030/ \001(\r\022\032\n\022ping_histogram_300\0300 \001(" +
      "\r\022\032\n\022ping_histogram_max\0301 \001(\r\022\026\n\016ping_nt" +
      "ile_5th\0302 \001(\r\022\027\n\017ping_ntile_50th\0303 \001(\r\022\027" +
      "\n\017ping_ntile_75th\0304 \001(\r\022\027\n\017ping_ntile_95" +
      "th\0305 \001(\r\022\027\n\017ping_ntile_98th\0306 \001(\r\022#\n\033jit" +
      "ter_histogram_negligible\030= \001(\r\022\032\n\022jitter" +
      "_histogram_1\030> \001(\r\022\032\n\022jitter_histogram_2" +
      "\030? \001(\r\022\032\n\022jitter_histogram_5\030@ \001(\r\022\033\n\023ji" +
      "tter_histogram_10\030A \001(\r\022\033\n\023jitter_histog" +
      "ram_20\030B \001(\r\022\023\n\013txspeed_max\030C \001(\r\022\034\n\024txs" +
      "peed_histogram_16\030D \001(\r\022\034\n\024txspeed_histo" +
      "gram_32\030E \001(\r\022\034\n\024txspeed_histogram_64\030F " +
      "\001(\r\022\035\n\025txspeed_histogram_128\030G \001(\r\022\035\n\025tx" +
      "speed_histogram_256\030H \001(\r\022\035\n\025txspeed_his" +
      "togram_512\030I \001(\r\022\036\n\026txspeed_histogram_10" +
      "24\030J \001(\r\022\035\n\025txspeed_histogram_max\030K \001(\r\022" +
      "\031\n\021txspeed_ntile_5th\030L \001(\r\022\032\n\022txspeed_nt" +
      "ile_50th\030M \001(\r\022\032\n\022txspeed_ntile_75th\030N \001" +
      "(\r\022\032\n\022txspeed_ntile_95th\030O \001(\r\022\032\n\022txspee" +
      "d_ntile_98th\030P \001(\r\022\023\n\013rxspeed_max\030Q \001(\r\022" +
      "\034\n\024rxspeed_histogram_16\030R \001(\r\022\034\n\024rxspeed" +
      "_histogram_32\030S \001(\r\022\034\n\024rxspeed_histogram" +
      "_64\030T \001(\r\022\035\n\025rxspeed_histogram_128\030U \001(\r" +
      "\022\035\n\025rxspeed_histogram_256\030V \001(\r\022\035\n\025rxspe" +
      "ed_histogram_512\030W \001(\r\022\036\n\026rxspeed_histog" +
      "ram_1024\030X \001(\r\022\035\n\025rxspeed_histogram_max\030" +
      "Y \001(\r\022\031\n\021rxspeed_ntile_5th\030Z \001(\r\022\032\n\022rxsp" +
      "eed_ntile_50th\030[ \001(\r\022\032\n\022rxspeed_ntile_75" +
      "th\030\\ \001(\r\022\032\n\022rxspeed_ntile_95th\030] \001(\r\022\032\n\022" +
      "rxspeed_ntile_98th\030^ \001(\r\"\234\001\n\"CMsgSteamDa" +
      "tagramConnectionQuality\022?\n\rinstantaneous" +
      "\030\001 \001(\0132(.CMsgSteamDatagramLinkInstantane" +
      "ousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgSteamDa" +
      "tagramLinkLifetimeStats*\351\t\n\023ESteamDatagr" +
      "amMsgID\022\037\n\033k_ESteamDatagramMsg_Invalid\020\000" +
      "\022)\n%k_ESteamDatagramMsg_RouterPingReques" +
      "t\020\001\022\'\n#k_ESteamDatagramMsg_RouterPingRep" +
      "ly\020\002\022-\n)k_ESteamDatagramMsg_GameserverPi" +
      "ngRequest\020\003\022+\n\'k_ESteamDatagramMsg_Games" +
      "erverPingReply\020\004\0220\n,k_ESteamDatagramMsg_" +
      "GameserverSessionRequest\020\005\0224\n0k_ESteamDa" +
      "tagramMsg_GameserverSessionEstablished\020\006" +
      "\022!\n\035k_ESteamDatagramMsg_NoSession\020\007\022\"\n\036k" +
      "_ESteamDatagramMsg_Diagnostic\020\010\022*\n&k_ESt" +
      "eamDatagramMsg_DataClientToRouter\020\t\022*\n&k" +
      "_ESteamDatagramMsg_DataRouterToServer\020\n\022" +
      "*\n&k_ESteamDatagramMsg_DataServerToRoute" +
      "r\020\013\022*\n&k_ESteamDatagramMsg_DataRouterToC" +
      "lient\020\014\022\035\n\031k_ESteamDatagramMsg_Stats\020\r\022/" +
      "\n+k_ESteamDatagramMsg_ClientPingSampleRe" +
      "quest\020\016\022-\n)k_ESteamDatagramMsg_ClientPin" +
      "gSampleReply\020\017\0225\n1k_ESteamDatagramMsg_Cl" +
      "ientToRouterSwitchedPrimary\020\020\022#\n\037k_EStea" +
      "mDatagramMsg_RelayHealth\020\021\022&\n\"k_ESteamDa" +
      "tagramMsg_ConnectRequest\020\022\022!\n\035k_ESteamDa" +
      "tagramMsg_ConnectOK\020\023\022(\n$k_ESteamDatagra" +
      "mMsg_ConnectionClosed\020\024\022$\n k_ESteamDatag" +
      "ramMsg_NoConnection\020\025\022/\n+k_ESteamDatagra" +
      "mMsg_RelayToRelayPingRequest\020\026\022-\n)k_ESte" +
      "amDatagramMsg_RelayToRelayPingReply\020\027\022)\n" +
      "%k_ESteamDatagramMsg_P2PSessionRequest\020\030" +
      "\022-\n)k_ESteamDatagramMsg_P2PSessionEstabl" +
      "ished\020\031\022&\n\"k_ESteamDatagramMsg_P2PStatsC" +
      "lient\020\032\022%\n!k_ESteamDatagramMsg_P2PStatsR" +
      "elay\020\033\022#\n\037k_ESteamDatagramMsg_P2PBadRout" +
      "e\020\034B4\n%com.valve.gamenetworkingsockets.p" +
      "rotoB\010Messages\200\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_CMsgSteamDatagramRouterPingReply_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_CMsgSteamDatagramRouterPingReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramRouterPingReply_descriptor,
        new java.lang.String[] { "ClientTimestamp", "LatencyDatacenterIds", "LatencyPingMs", "YourPublicIp", "ServerTime", "Challenge", "SecondsUntilShutdown", "ClientCookie", "ScoringPenaltyRelayCluster", "RouteExceptions", });
    internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor =
      internal_static_CMsgSteamDatagramRouterPingReply_descriptor.getNestedTypes().get(0);
    internal_static_CMsgSteamDatagramRouterPingReply_RouteException_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramRouterPingReply_RouteException_descriptor,
        new java.lang.String[] { "DataCenterId", "Flags", "Penalty", });
    internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_CMsgSteamDatagramSessionCryptInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramSessionCryptInfo_descriptor,
        new java.lang.String[] { "KeyType", "KeyData", "Nonce", "IsSnp", });
    internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_CMsgSteamDatagramSessionCryptInfoSigned_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramSessionCryptInfoSigned_descriptor,
        new java.lang.String[] { "Info", "Signature", });
    internal_static_CMsgSteamDatagramDiagnostic_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_CMsgSteamDatagramDiagnostic_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramDiagnostic_descriptor,
        new java.lang.String[] { "Severity", "Text", });
    internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_CMsgSteamDatagramLinkInstantaneousStats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramLinkInstantaneousStats_descriptor,
        new java.lang.String[] { "OutPacketsPerSecX10", "OutBytesPerSec", "InPacketsPerSecX10", "InBytesPerSec", "PingMs", "PacketsDroppedPct", "PacketsWeirdSequencePct", "PeakJitterUsec", });
    internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_CMsgSteamDatagramLinkLifetimeStats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramLinkLifetimeStats_descriptor,
        new java.lang.String[] { "PacketsSent", "KbSent", "PacketsRecv", "KbRecv", "PacketsRecvSequenced", "PacketsRecvDropped", "PacketsRecvOutOfOrder", "PacketsRecvDuplicate", "PacketsRecvLurch", "QualityHistogram100", "QualityHistogram99", "QualityHistogram97", "QualityHistogram95", "QualityHistogram90", "QualityHistogram75", "QualityHistogram50", "QualityHistogram1", "QualityHistogramDead", "QualityNtile2Nd", "QualityNtile5Th", "QualityNtile25Th", "QualityNtile50Th", "PingHistogram25", "PingHistogram50", "PingHistogram75", "PingHistogram100", "PingHistogram125", "PingHistogram150", "PingHistogram200", "PingHistogram300", "PingHistogramMax", "PingNtile5Th", "PingNtile50Th", "PingNtile75Th", "PingNtile95Th", "PingNtile98Th", "JitterHistogramNegligible", "JitterHistogram1", "JitterHistogram2", "JitterHistogram5", "JitterHistogram10", "JitterHistogram20", "TxspeedMax", "TxspeedHistogram16", "TxspeedHistogram32", "TxspeedHistogram64", "TxspeedHistogram128", "TxspeedHistogram256", "TxspeedHistogram512", "TxspeedHistogram1024", "TxspeedHistogramMax", "TxspeedNtile5Th", "TxspeedNtile50Th", "TxspeedNtile75Th", "TxspeedNtile95Th", "TxspeedNtile98Th", "RxspeedMax", "RxspeedHistogram16", "RxspeedHistogram32", "RxspeedHistogram64", "RxspeedHistogram128", "RxspeedHistogram256", "RxspeedHistogram512", "RxspeedHistogram1024", "RxspeedHistogramMax", "RxspeedNtile5Th", "RxspeedNtile50Th", "RxspeedNtile75Th", "RxspeedNtile95Th", "RxspeedNtile98Th", });
    internal_static_CMsgSteamDatagramConnectionQuality_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_CMsgSteamDatagramConnectionQuality_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgSteamDatagramConnectionQuality_descriptor,
        new java.lang.String[] { "Instantaneous", "Lifetime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
